[{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler.html","title":"FSharp.Compiler","content":"CompilerEnvironment"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil.html","title":"FSharp.Compiler.AbstractIL","content":"IL \nILBinaryReader"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis.html","title":"FSharp.Compiler.CodeAnalysis","content":"LegacyMSBuildReferenceResolver \nFSharpCheckFileAnswer \nFSharpCheckFileResults \nFSharpCheckProjectResults \nFSharpChecker \nFSharpParseFileResults \nFSharpParsingOptions \nFSharpProjectContext \nFSharpProjectOptions \nFSharpReferencedProject \nFSharpSymbolUse \nFSharpUnresolvedReferencesSet \nLegacyReferenceResolver"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager.html","title":"FSharp.Compiler.DependencyManager","content":"AssemblyResolutionProbe \nAssemblyResolveHandler \nDependencyProvider \nErrorReportType \nIDependencyManagerProvider \nIResolveDependenciesResult \nNativeDllResolveHandler \nNativeResolutionProbe \nResolvingErrorReport"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics.html","title":"FSharp.Compiler.Diagnostics","content":"CompilerDiagnostics \nFSharpDiagnostic \nFSharpDiagnosticKind \nFSharpDiagnosticOptions \nFSharpDiagnosticSeverity"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices.html","title":"FSharp.Compiler.EditorServices","content":"AssemblyContent \nInterfaceStubGenerator \nNavigateTo \nNavigation \nParsedInput \nQuickParse \nSimplifyNames \nStructure \nUnusedDeclarations \nUnusedOpens \nXmlDocComment \nXmlDocParser \nAssemblyContentType \nAssemblySymbol \nCompletionContext \nCompletionItemKind \nDeclarationListInfo \nDeclarationListItem \nEntityCache \nEntityKind \nFSharpGlyph \nFindDeclExternalParam \nFindDeclExternalSymbol \nFindDeclExternalType \nFindDeclFailureReason \nFindDeclResult \nIAssemblyContentCache \nInheritanceContext \nInsertionContext \nInsertionContextEntity \nInterfaceData \nLookupType \nMaybeUnresolvedIdent \nMethodGroup \nMethodGroupItem \nMethodGroupItemParameter \nModuleKind \nNavigableContainer \nNavigableContainerType \nNavigableItem \nNavigableItemKind \nNavigationEntityKind \nNavigationItem \nNavigationItemKind \nNavigationItems \nNavigationTopLevelDeclaration \nOpenStatementInsertionPoint \nParameterLocations \nPartialLongName \nRecordContext \nScopeKind \nSemanticClassificationItem \nSemanticClassificationType \nSemanticClassificationView \nShortIdents \nToolTipElement \nToolTipElementData \nToolTipText \nUnresolvedSymbol \nXmlDocable"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io.html","title":"FSharp.Compiler.IO","content":"FileSystemAutoOpens \nStreamExtensions \nByteMemory \nDefaultAssemblyLoader \nDefaultFileSystem \nIAssemblyLoader \nIFileSystem \nIllegalFileNameChar"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive.html","title":"FSharp.Compiler.Interactive","content":"Shell"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols.html","title":"FSharp.Compiler.Symbols","content":"FSharpExprPatterns \nFSharpSymbolPatterns \nFSharpAbstractParameter \nFSharpAbstractSignature \nFSharpAccessibility \nFSharpAccessibilityRights \nFSharpActivePatternCase \nFSharpActivePatternGroup \nFSharpAnonRecordTypeDetails \nFSharpAssembly \nFSharpAssemblyContents \nFSharpAssemblySignature \nFSharpAttribute \nFSharpDelegateSignature \nFSharpDisplayContext \nFSharpEntity \nFSharpExpr \nFSharpField \nFSharpGenericParameter \nFSharpGenericParameterConstraint \nFSharpGenericParameterDefaultsToConstraint \nFSharpGenericParameterDelegateConstraint \nFSharpGenericParameterMemberConstraint \nFSharpImplementationFileContents \nFSharpImplementationFileDeclaration \nFSharpInlineAnnotation \nFSharpMemberOrFunctionOrValue \nFSharpObjectExprOverride \nFSharpOpenDeclaration \nFSharpParameter \nFSharpStaticParameter \nFSharpSymbol \nFSharpType \nFSharpUnionCase \nFSharpXmlDoc"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax.html","title":"FSharp.Compiler.Syntax","content":"PrettyNaming \nSyntaxTraversal \nDebugPointAtBinding \nDebugPointAtFinally \nDebugPointAtFor \nDebugPointAtSequential \nDebugPointAtSwitch \nDebugPointAtTarget \nDebugPointAtTry \nDebugPointAtWhile \nDebugPointAtWith \nExprAtomicFlag \nIdent \nLongIdentWithDots \nParsedHashDirective \nParsedHashDirectiveArgument \nParsedImplFile \nParsedImplFileFragment \nParsedImplFileInput \nParsedInput \nParsedScriptInteraction \nParsedSigFile \nParsedSigFileFragment \nParsedSigFileInput \nParserDetail \nPropertyKeyword \nQualifiedNameOfFile \nScopedPragma \nSeqExprOnly \nSynAccess \nSynArgInfo \nSynArgPats \nSynAttribute \nSynAttributeList \nSynBinding \nSynBindingKind \nSynBindingReturnInfo \nSynByteStringKind \nSynComponentInfo \nSynConst \nSynEnumCase \nSynExceptionDefn \nSynExceptionDefnRepr \nSynExceptionSig \nSynExpr \nSynExprAndBang \nSynExprRecordField \nSynField \nSynInterfaceImpl \nSynInterpolatedStringPart \nSynMatchClause \nSynMeasure \nSynMemberDefn \nSynMemberFlags \nSynMemberKind \nSynMemberSig \nSynModuleDecl \nSynModuleOrNamespace \nSynModuleOrNamespaceKind \nSynModuleOrNamespaceSig \nSynModuleSigDecl \nSynOpenDeclTarget \nSynPat \nSynRationalConst \nSynReturnInfo \nSynSimplePat \nSynSimplePatAlternativeIdInfo \nSynSimplePats \nSynStaticOptimizationConstraint \nSynStringKind \nSynTypar \nSynTyparDecl \nSynTyparDecls \nSynType \nSynTypeConstraint \nSynTypeDefn \nSynTypeDefnKind \nSynTypeDefnRepr \nSynTypeDefnSig \nSynTypeDefnSigRepr \nSynTypeDefnSimpleRepr \nSynUnionCase \nSynUnionCaseKind \nSynValData \nSynValInfo \nSynValSig \nSynValTyparDecls \nSyntaxNode \nSyntaxVisitorBase\u003C\u0027T\u003E \nTyparStaticReq"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text.html","title":"FSharp.Compiler.Text","content":"Line \nPosition \nRange \nSourceText \nTaggedText \nISourceText \nLine0 \nNavigableTaggedText \nPosition \nRange \nTaggedText \nTextTag \npos \nrange"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization.html","title":"FSharp.Compiler.Tokenization","content":"FSharpKeywords \nFSharpTokenTag \nFSharpLexer \nFSharpLexerFlags \nFSharpLineTokenizer \nFSharpSourceTokenizer \nFSharpToken \nFSharpTokenCharKind \nFSharpTokenColorKind \nFSharpTokenInfo \nFSharpTokenKind \nFSharpTokenTriggerClass \nFSharpTokenizerColorState \nFSharpTokenizerLexState"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml.html","title":"FSharp.Compiler.Xml","content":"PreXmlDoc \nXmlDoc"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html","title":"CompilerEnvironment","content":"CompilerEnvironment \n\n Information about the compilation environment\n \nCompilerEnvironment.BinFolderOfDefaultFSharpCompiler \nBinFolderOfDefaultFSharpCompiler \nCompilerEnvironment.DefaultReferencesForOrphanSources \nDefaultReferencesForOrphanSources \nCompilerEnvironment.GetCompilationDefinesForEditing \nGetCompilationDefinesForEditing \nCompilerEnvironment.GetDebuggerLanguageID \nGetDebuggerLanguageID \nCompilerEnvironment.IsCheckerSupportedSubcategory \nIsCheckerSupportedSubcategory \nCompilerEnvironment.IsCompilable \nIsCompilable \nCompilerEnvironment.IsScriptFile \nIsScriptFile \nCompilerEnvironment.MustBeSingleFileProject \nMustBeSingleFileProject"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#BinFolderOfDefaultFSharpCompiler","title":"CompilerEnvironment.BinFolderOfDefaultFSharpCompiler","content":"CompilerEnvironment.BinFolderOfDefaultFSharpCompiler \nBinFolderOfDefaultFSharpCompiler \n\n The default location of FSharp.Core.dll and fsc.exe based on the version of fsc.exe that is running\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#DefaultReferencesForOrphanSources","title":"CompilerEnvironment.DefaultReferencesForOrphanSources","content":"CompilerEnvironment.DefaultReferencesForOrphanSources \nDefaultReferencesForOrphanSources \n\n These are the names of assemblies that should be referenced for .fs or .fsi files that\n are not associated with a project.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#GetCompilationDefinesForEditing","title":"CompilerEnvironment.GetCompilationDefinesForEditing","content":"CompilerEnvironment.GetCompilationDefinesForEditing \nGetCompilationDefinesForEditing \n\n Return the compilation defines that should be used when editing the given file.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#GetDebuggerLanguageID","title":"CompilerEnvironment.GetDebuggerLanguageID","content":"CompilerEnvironment.GetDebuggerLanguageID \nGetDebuggerLanguageID \n\n Return the language ID, which is the expression evaluator id that the debugger will use.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#IsCheckerSupportedSubcategory","title":"CompilerEnvironment.IsCheckerSupportedSubcategory","content":"CompilerEnvironment.IsCheckerSupportedSubcategory \nIsCheckerSupportedSubcategory \n\n Return true if this is a subcategory of error or warning message that the language service can emit\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#IsCompilable","title":"CompilerEnvironment.IsCompilable","content":"CompilerEnvironment.IsCompilable \nIsCompilable \n\n Whether or not this file is compilable\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#IsScriptFile","title":"CompilerEnvironment.IsScriptFile","content":"CompilerEnvironment.IsScriptFile \nIsScriptFile \n\n A helpers for dealing with F# files.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-compilerenvironment.html#MustBeSingleFileProject","title":"CompilerEnvironment.MustBeSingleFileProject","content":"CompilerEnvironment.MustBeSingleFileProject \nMustBeSingleFileProject \n\n Whether or not this file should be a single-file project\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html","title":"IL","content":"IL \n\n The \u0022unlinked\u0022 view of .NET metadata and code.  Central to the Abstract IL library\n \nIL.ILArgConvention \nILArgConvention \nIL.ILArrayShape \nILArrayShape \nIL.ILAssemblyLongevity \nILAssemblyLongevity \nIL.ILAssemblyManifest \nILAssemblyManifest \nIL.ILAssemblyRef \nILAssemblyRef \nIL.ILAttribElem \nILAttribElem \nIL.ILAttribute \nILAttribute \nIL.ILAttributes \nILAttributes \nIL.ILAttributesStored \nILAttributesStored \nIL.ILCallingConv \nILCallingConv \nIL.ILCallingSignature \nILCallingSignature \nIL.ILDebugImport \nILDebugImport \nIL.ILDebugImports \nILDebugImports \nIL.ILDefaultPInvokeEncoding \nILDefaultPInvokeEncoding \nIL.ILEventDef \nILEventDef \nIL.ILEventDefs \nILEventDefs \nIL.ILExportedTypeOrForwarder \nILExportedTypeOrForwarder \nIL.ILExportedTypesAndForwarders \nILExportedTypesAndForwarders \nIL.ILFieldDef \nILFieldDef \nIL.ILFieldDefs \nILFieldDefs \nIL.ILFieldInit \nILFieldInit \nIL.ILFieldRef \nILFieldRef \nIL.ILFieldSpec \nILFieldSpec \nIL.ILGenericParameterDef \nILGenericParameterDef \nIL.ILGenericVariance \nILGenericVariance \nIL.ILGuid \nILGuid \nIL.ILMemberAccess \nILMemberAccess \nIL.ILMethodDef \nILMethodDef \nIL.ILMethodDefs \nILMethodDefs \nIL.ILMethodImplDef \nILMethodImplDef \nIL.ILMethodImplDefs \nILMethodImplDefs \nIL.ILMethodRef \nILMethodRef \nIL.ILMethodSpec \nILMethodSpec \nIL.ILModuleDef \nILModuleDef \nIL.ILModuleRef \nILModuleRef \nIL.ILNativeResource \nILNativeResource \nIL.ILNativeType \nILNativeType \nIL.ILNestedExportedType \nILNestedExportedType \nIL.ILNestedExportedTypes \nILNestedExportedTypes \nIL.ILParameter \nILParameter \nIL.ILPlatform \nILPlatform \nIL.ILPreTypeDef \nILPreTypeDef \nIL.ILPropertyDef \nILPropertyDef \nIL.ILPropertyDefs \nILPropertyDefs \nIL.ILResources \nILResources \nIL.ILReturn \nILReturn \nIL.ILScopeRef \nILScopeRef \nIL.ILSecurityDeclsStored \nILSecurityDeclsStored \nIL.ILSourceDocument \nILSourceDocument \nIL.ILThisConvention \nILThisConvention \nIL.ILType \nILType \nIL.ILTypeDef \nILTypeDef \nIL.ILTypeDefAccess \nILTypeDefAccess \nIL.ILTypeDefKind \nILTypeDefKind \nIL.ILTypeDefLayout \nILTypeDefLayout \nIL.ILTypeDefs \nILTypeDefs \nIL.ILTypeInit \nILTypeInit \nIL.ILTypeRef \nILTypeRef \nIL.ILTypeSpec \nILTypeSpec \nIL.ILVersionInfo \nILVersionInfo \nIL.MethodBody \nMethodBody \nIL.PublicKey \nPublicKey \nIL.mkILReturn \nmkILReturn \nIL.mkILCustomAttrs \nmkILCustomAttrs \nIL.mkILCustomAttrsFromArray \nmkILCustomAttrsFromArray \nIL.storeILCustomAttrs \nstoreILCustomAttrs \nIL.emptyILCustomAttrs \nemptyILCustomAttrs \nIL.mkILSecurityDecls \nmkILSecurityDecls \nIL.emptyILSecurityDecls \nemptyILSecurityDecls \nIL.storeILSecurityDecls \nstoreILSecurityDecls \nIL.mkILEvents \nmkILEvents \nIL.mkILEventsLazy \nmkILEventsLazy \nIL.emptyILEvents \nemptyILEvents \nIL.mkILProperties \nmkILProperties \nIL.mkILPropertiesLazy \nmkILPropertiesLazy \nIL.emptyILProperties \nemptyILProperties \nIL.mkILMethods \nmkILMethods \nIL.mkILMethodsFromArray \nmkILMethodsFromArray \nIL.mkILMethodsComputed \nmkILMethodsComputed \nIL.emptyILMethods \nemptyILMethods \nIL.mkILFields \nmkILFields \nIL.mkILFieldsLazy \nmkILFieldsLazy \nIL.emptyILFields \nemptyILFields \nIL.mkILMethodImpls \nmkILMethodImpls \nIL.mkILMethodImplsLazy \nmkILMethodImplsLazy \nIL.emptyILMethodImpls \nemptyILMethodImpls \nIL.mkILTypeDefs \nmkILTypeDefs \nIL.mkILTypeDefsFromArray \nmkILTypeDefsFromArray \nIL.emptyILTypeDefs \nemptyILTypeDefs \nIL.mkILTypeDefsComputed \nmkILTypeDefsComputed \nIL.mkILNestedExportedTypes \nmkILNestedExportedTypes \nIL.mkILExportedTypes \nmkILExportedTypes \nIL.emptyILResources \nemptyILResources \nIL.mkILSimpleModule \nmkILSimpleModule \nIL.NoMetadataIdx \nNoMetadataIdx"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILReturn","title":"IL.mkILReturn","content":"IL.mkILReturn \nmkILReturn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILCustomAttrs","title":"IL.mkILCustomAttrs","content":"IL.mkILCustomAttrs \nmkILCustomAttrs \n\n Making tables of custom attributes, etc.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILCustomAttrsFromArray","title":"IL.mkILCustomAttrsFromArray","content":"IL.mkILCustomAttrsFromArray \nmkILCustomAttrsFromArray \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#storeILCustomAttrs","title":"IL.storeILCustomAttrs","content":"IL.storeILCustomAttrs \nstoreILCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILCustomAttrs","title":"IL.emptyILCustomAttrs","content":"IL.emptyILCustomAttrs \nemptyILCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILSecurityDecls","title":"IL.mkILSecurityDecls","content":"IL.mkILSecurityDecls \nmkILSecurityDecls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILSecurityDecls","title":"IL.emptyILSecurityDecls","content":"IL.emptyILSecurityDecls \nemptyILSecurityDecls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#storeILSecurityDecls","title":"IL.storeILSecurityDecls","content":"IL.storeILSecurityDecls \nstoreILSecurityDecls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILEvents","title":"IL.mkILEvents","content":"IL.mkILEvents \nmkILEvents \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILEventsLazy","title":"IL.mkILEventsLazy","content":"IL.mkILEventsLazy \nmkILEventsLazy \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILEvents","title":"IL.emptyILEvents","content":"IL.emptyILEvents \nemptyILEvents \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILProperties","title":"IL.mkILProperties","content":"IL.mkILProperties \nmkILProperties \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILPropertiesLazy","title":"IL.mkILPropertiesLazy","content":"IL.mkILPropertiesLazy \nmkILPropertiesLazy \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILProperties","title":"IL.emptyILProperties","content":"IL.emptyILProperties \nemptyILProperties \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILMethods","title":"IL.mkILMethods","content":"IL.mkILMethods \nmkILMethods \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILMethodsFromArray","title":"IL.mkILMethodsFromArray","content":"IL.mkILMethodsFromArray \nmkILMethodsFromArray \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILMethodsComputed","title":"IL.mkILMethodsComputed","content":"IL.mkILMethodsComputed \nmkILMethodsComputed \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILMethods","title":"IL.emptyILMethods","content":"IL.emptyILMethods \nemptyILMethods \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILFields","title":"IL.mkILFields","content":"IL.mkILFields \nmkILFields \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILFieldsLazy","title":"IL.mkILFieldsLazy","content":"IL.mkILFieldsLazy \nmkILFieldsLazy \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILFields","title":"IL.emptyILFields","content":"IL.emptyILFields \nemptyILFields \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILMethodImpls","title":"IL.mkILMethodImpls","content":"IL.mkILMethodImpls \nmkILMethodImpls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILMethodImplsLazy","title":"IL.mkILMethodImplsLazy","content":"IL.mkILMethodImplsLazy \nmkILMethodImplsLazy \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILMethodImpls","title":"IL.emptyILMethodImpls","content":"IL.emptyILMethodImpls \nemptyILMethodImpls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILTypeDefs","title":"IL.mkILTypeDefs","content":"IL.mkILTypeDefs \nmkILTypeDefs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILTypeDefsFromArray","title":"IL.mkILTypeDefsFromArray","content":"IL.mkILTypeDefsFromArray \nmkILTypeDefsFromArray \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILTypeDefs","title":"IL.emptyILTypeDefs","content":"IL.emptyILTypeDefs \nemptyILTypeDefs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILTypeDefsComputed","title":"IL.mkILTypeDefsComputed","content":"IL.mkILTypeDefsComputed \nmkILTypeDefsComputed \n\n Create table of types which is loaded/computed on-demand, and whose individual\n elements are also loaded/computed on-demand. Any call to tdefs.AsList will\n result in the laziness being forced.  Operations can examine the\n custom attributes and name of each type in order to decide whether\n to proceed with examining the other details of the type.\n\n Note that individual type definitions may contain further delays\n in their method, field and other tables.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILNestedExportedTypes","title":"IL.mkILNestedExportedTypes","content":"IL.mkILNestedExportedTypes \nmkILNestedExportedTypes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILExportedTypes","title":"IL.mkILExportedTypes","content":"IL.mkILExportedTypes \nmkILExportedTypes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#emptyILResources","title":"IL.emptyILResources","content":"IL.emptyILResources \nemptyILResources \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#mkILSimpleModule","title":"IL.mkILSimpleModule","content":"IL.mkILSimpleModule \nmkILSimpleModule \n\n Making modules.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il.html#NoMetadataIdx","title":"IL.NoMetadataIdx","content":"IL.NoMetadataIdx \nNoMetadataIdx \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html","title":"ILArgConvention","content":"ILArgConvention \n \nILArgConvention.Default \nDefault \nILArgConvention.CDecl \nCDecl \nILArgConvention.StdCall \nStdCall \nILArgConvention.ThisCall \nThisCall \nILArgConvention.FastCall \nFastCall \nILArgConvention.VarArg \nVarArg"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#Default","title":"ILArgConvention.Default","content":"ILArgConvention.Default \nDefault \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#CDecl","title":"ILArgConvention.CDecl","content":"ILArgConvention.CDecl \nCDecl \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#StdCall","title":"ILArgConvention.StdCall","content":"ILArgConvention.StdCall \nStdCall \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#ThisCall","title":"ILArgConvention.ThisCall","content":"ILArgConvention.ThisCall \nThisCall \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#FastCall","title":"ILArgConvention.FastCall","content":"ILArgConvention.FastCall \nFastCall \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilargconvention.html#VarArg","title":"ILArgConvention.VarArg","content":"ILArgConvention.VarArg \nVarArg \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilarrayshape.html","title":"ILArrayShape","content":"ILArrayShape \n \nILArrayShape.Rank \nRank \nILArrayShape.FromRank \nFromRank \nILArrayShape.SingleDimensional \nSingleDimensional"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilarrayshape.html#Rank","title":"ILArrayShape.Rank","content":"ILArrayShape.Rank \nRank \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilarrayshape.html#FromRank","title":"ILArrayShape.FromRank","content":"ILArrayShape.FromRank \nFromRank \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilarrayshape.html#SingleDimensional","title":"ILArrayShape.SingleDimensional","content":"ILArrayShape.SingleDimensional \nSingleDimensional \n\n Bounds for a single dimensional, zero based array\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblylongevity.html","title":"ILAssemblyLongevity","content":"ILAssemblyLongevity \n \nILAssemblyLongevity.Default \nDefault"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblylongevity.html#Default","title":"ILAssemblyLongevity.Default","content":"ILAssemblyLongevity.Default \nDefault \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html","title":"ILAssemblyManifest","content":"ILAssemblyManifest \n\n The main module of an assembly is a module plus some manifest information.\n \nILAssemblyManifest.SecurityDecls \nSecurityDecls \nILAssemblyManifest.CustomAttrs \nCustomAttrs \nILAssemblyManifest.Name \nName \nILAssemblyManifest.AuxModuleHashAlgorithm \nAuxModuleHashAlgorithm \nILAssemblyManifest.SecurityDeclsStored \nSecurityDeclsStored \nILAssemblyManifest.PublicKey \nPublicKey \nILAssemblyManifest.Version \nVersion \nILAssemblyManifest.Locale \nLocale \nILAssemblyManifest.CustomAttrsStored \nCustomAttrsStored \nILAssemblyManifest.AssemblyLongevity \nAssemblyLongevity \nILAssemblyManifest.DisableJitOptimizations \nDisableJitOptimizations \nILAssemblyManifest.JitTracking \nJitTracking \nILAssemblyManifest.IgnoreSymbolStoreSequencePoints \nIgnoreSymbolStoreSequencePoints \nILAssemblyManifest.Retargetable \nRetargetable \nILAssemblyManifest.ExportedTypes \nExportedTypes \nILAssemblyManifest.EntrypointElsewhere \nEntrypointElsewhere \nILAssemblyManifest.MetadataIndex \nMetadataIndex"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#SecurityDecls","title":"ILAssemblyManifest.SecurityDecls","content":"ILAssemblyManifest.SecurityDecls \nSecurityDecls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#CustomAttrs","title":"ILAssemblyManifest.CustomAttrs","content":"ILAssemblyManifest.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Name","title":"ILAssemblyManifest.Name","content":"ILAssemblyManifest.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#AuxModuleHashAlgorithm","title":"ILAssemblyManifest.AuxModuleHashAlgorithm","content":"ILAssemblyManifest.AuxModuleHashAlgorithm \nAuxModuleHashAlgorithm \n\n This is the ID of the algorithm used for the hashes of auxiliary\n files in the assembly.   These hashes are stored in the\n \u003Cc\u003EILModuleRef.Hash\u003C/c\u003E fields of this assembly. These are not\n cryptographic hashes: they are simple file hashes. The algorithm\n is normally \u003Cc\u003E0x00008004\u003C/c\u003E indicating the SHA1 hash algorithm.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#SecurityDeclsStored","title":"ILAssemblyManifest.SecurityDeclsStored","content":"ILAssemblyManifest.SecurityDeclsStored \nSecurityDeclsStored \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#PublicKey","title":"ILAssemblyManifest.PublicKey","content":"ILAssemblyManifest.PublicKey \nPublicKey \n\n This is the public key used to sign this\n assembly (the signature itself is stored elsewhere: see the\n binary format, and may not have been written if delay signing\n is used).  (member Name, member PublicKey) forms the full\n public name of the assembly.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Version","title":"ILAssemblyManifest.Version","content":"ILAssemblyManifest.Version \nVersion \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Locale","title":"ILAssemblyManifest.Locale","content":"ILAssemblyManifest.Locale \nLocale \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#CustomAttrsStored","title":"ILAssemblyManifest.CustomAttrsStored","content":"ILAssemblyManifest.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#AssemblyLongevity","title":"ILAssemblyManifest.AssemblyLongevity","content":"ILAssemblyManifest.AssemblyLongevity \nAssemblyLongevity \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#DisableJitOptimizations","title":"ILAssemblyManifest.DisableJitOptimizations","content":"ILAssemblyManifest.DisableJitOptimizations \nDisableJitOptimizations \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#JitTracking","title":"ILAssemblyManifest.JitTracking","content":"ILAssemblyManifest.JitTracking \nJitTracking \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#IgnoreSymbolStoreSequencePoints","title":"ILAssemblyManifest.IgnoreSymbolStoreSequencePoints","content":"ILAssemblyManifest.IgnoreSymbolStoreSequencePoints \nIgnoreSymbolStoreSequencePoints \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#Retargetable","title":"ILAssemblyManifest.Retargetable","content":"ILAssemblyManifest.Retargetable \nRetargetable \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#ExportedTypes","title":"ILAssemblyManifest.ExportedTypes","content":"ILAssemblyManifest.ExportedTypes \nExportedTypes \n\n Records the types implemented by this assembly in auxiliary\n modules.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#EntrypointElsewhere","title":"ILAssemblyManifest.EntrypointElsewhere","content":"ILAssemblyManifest.EntrypointElsewhere \nEntrypointElsewhere \n\n Records whether the entrypoint resides in another module.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblymanifest.html#MetadataIndex","title":"ILAssemblyManifest.MetadataIndex","content":"ILAssemblyManifest.MetadataIndex \nMetadataIndex \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html","title":"ILAssemblyRef","content":"ILAssemblyRef \n \nILAssemblyRef.EqualsIgnoringVersion \nEqualsIgnoringVersion \nILAssemblyRef.Hash \nHash \nILAssemblyRef.Locale \nLocale \nILAssemblyRef.Version \nVersion \nILAssemblyRef.QualifiedName \nQualifiedName \nILAssemblyRef.Retargetable \nRetargetable \nILAssemblyRef.Name \nName \nILAssemblyRef.PublicKey \nPublicKey \nILAssemblyRef.Create \nCreate \nILAssemblyRef.FromAssemblyName \nFromAssemblyName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#EqualsIgnoringVersion","title":"ILAssemblyRef.EqualsIgnoringVersion","content":"ILAssemblyRef.EqualsIgnoringVersion \nEqualsIgnoringVersion \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Hash","title":"ILAssemblyRef.Hash","content":"ILAssemblyRef.Hash \nHash \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Locale","title":"ILAssemblyRef.Locale","content":"ILAssemblyRef.Locale \nLocale \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Version","title":"ILAssemblyRef.Version","content":"ILAssemblyRef.Version \nVersion \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#QualifiedName","title":"ILAssemblyRef.QualifiedName","content":"ILAssemblyRef.QualifiedName \nQualifiedName \n\n The fully qualified name of the assembly reference, e.g. mscorlib, Version=1.0.3705 etc.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Retargetable","title":"ILAssemblyRef.Retargetable","content":"ILAssemblyRef.Retargetable \nRetargetable \n\n CLI says this indicates if the assembly can be retargeted (at runtime) to be from a different publisher.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Name","title":"ILAssemblyRef.Name","content":"ILAssemblyRef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#PublicKey","title":"ILAssemblyRef.PublicKey","content":"ILAssemblyRef.PublicKey \nPublicKey \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#Create","title":"ILAssemblyRef.Create","content":"ILAssemblyRef.Create \nCreate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilassemblyref.html#FromAssemblyName","title":"ILAssemblyRef.FromAssemblyName","content":"ILAssemblyRef.FromAssemblyName \nFromAssemblyName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html","title":"ILAttribElem","content":"ILAttribElem \n \nILAttribElem.String \nString \nILAttribElem.Bool \nBool \nILAttribElem.Char \nChar \nILAttribElem.SByte \nSByte \nILAttribElem.Int16 \nInt16 \nILAttribElem.Int32 \nInt32 \nILAttribElem.Int64 \nInt64 \nILAttribElem.Byte \nByte \nILAttribElem.UInt16 \nUInt16 \nILAttribElem.UInt32 \nUInt32 \nILAttribElem.UInt64 \nUInt64 \nILAttribElem.Single \nSingle \nILAttribElem.Double \nDouble \nILAttribElem.Null \nNull \nILAttribElem.Type \nType \nILAttribElem.TypeRef \nTypeRef \nILAttribElem.Array \nArray"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#String","title":"ILAttribElem.String","content":"ILAttribElem.String \nString \n\n Represents a custom attribute parameter of type \u0027string\u0027. These may be null, in which case they are encoded in a special\n way as indicated by Ecma-335 Partition II.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Bool","title":"ILAttribElem.Bool","content":"ILAttribElem.Bool \nBool \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Char","title":"ILAttribElem.Char","content":"ILAttribElem.Char \nChar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#SByte","title":"ILAttribElem.SByte","content":"ILAttribElem.SByte \nSByte \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Int16","title":"ILAttribElem.Int16","content":"ILAttribElem.Int16 \nInt16 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Int32","title":"ILAttribElem.Int32","content":"ILAttribElem.Int32 \nInt32 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Int64","title":"ILAttribElem.Int64","content":"ILAttribElem.Int64 \nInt64 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Byte","title":"ILAttribElem.Byte","content":"ILAttribElem.Byte \nByte \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#UInt16","title":"ILAttribElem.UInt16","content":"ILAttribElem.UInt16 \nUInt16 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#UInt32","title":"ILAttribElem.UInt32","content":"ILAttribElem.UInt32 \nUInt32 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#UInt64","title":"ILAttribElem.UInt64","content":"ILAttribElem.UInt64 \nUInt64 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Single","title":"ILAttribElem.Single","content":"ILAttribElem.Single \nSingle \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Double","title":"ILAttribElem.Double","content":"ILAttribElem.Double \nDouble \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Null","title":"ILAttribElem.Null","content":"ILAttribElem.Null \nNull \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Type","title":"ILAttribElem.Type","content":"ILAttribElem.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#TypeRef","title":"ILAttribElem.TypeRef","content":"ILAttribElem.TypeRef \nTypeRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribelem.html#Array","title":"ILAttribElem.Array","content":"ILAttribElem.Array \nArray \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribute.html","title":"ILAttribute","content":"ILAttribute \n\n Custom attribute.\n \nILAttribute.Encoded \nEncoded \nILAttribute.Decoded \nDecoded"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribute.html#Encoded","title":"ILAttribute.Encoded","content":"ILAttribute.Encoded \nEncoded \n\n Attribute with args encoded to a binary blob according to ECMA-335 II.21 and II.23.3.\n \u0027decodeILAttribData\u0027 is used to parse the byte[] blob to ILAttribElem\u0027s as best as possible.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattribute.html#Decoded","title":"ILAttribute.Decoded","content":"ILAttribute.Decoded \nDecoded \n\n Attribute with args in decoded form.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributes.html","title":"ILAttributes","content":"ILAttributes \n \nILAttributes.AsArray \nAsArray \nILAttributes.AsList \nAsList"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributes.html#AsArray","title":"ILAttributes.AsArray","content":"ILAttributes.AsArray \nAsArray \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributes.html#AsList","title":"ILAttributes.AsList","content":"ILAttributes.AsList \nAsList \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilattributesstored.html","title":"ILAttributesStored","content":"ILAttributesStored \n\n Represents the efficiency-oriented storage of ILAttributes in another item.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingconv.html","title":"ILCallingConv","content":"ILCallingConv \n \nILCallingConv.Instance \nInstance \nILCallingConv.Static \nStatic \nILCallingConv.Callconv \nCallconv"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingconv.html#Instance","title":"ILCallingConv.Instance","content":"ILCallingConv.Instance \nInstance \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingconv.html#Static","title":"ILCallingConv.Static","content":"ILCallingConv.Static \nStatic \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingconv.html#Callconv","title":"ILCallingConv.Callconv","content":"ILCallingConv.Callconv \nCallconv \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html","title":"ILCallingSignature","content":"ILCallingSignature \n \nILCallingSignature.CallingConv \nCallingConv \nILCallingSignature.ArgTypes \nArgTypes \nILCallingSignature.ReturnType \nReturnType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html#CallingConv","title":"ILCallingSignature.CallingConv","content":"ILCallingSignature.CallingConv \nCallingConv \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html#ArgTypes","title":"ILCallingSignature.ArgTypes","content":"ILCallingSignature.ArgTypes \nArgTypes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilcallingsignature.html#ReturnType","title":"ILCallingSignature.ReturnType","content":"ILCallingSignature.ReturnType \nReturnType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimport.html","title":"ILDebugImport","content":"ILDebugImport \n\n Defines an opened namespace, type relevant to a code location.\n \n Emitted to the PortablePDB format. Note the format supports additional variations on\n imported things that are not yet emitted in F#.\n \nILDebugImport.ImportType \nImportType \nILDebugImport.ImportNamespace \nImportNamespace"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimport.html#ImportType","title":"ILDebugImport.ImportType","content":"ILDebugImport.ImportType \nImportType \n\n Represents an \u0027open type XYZ\u0027 opening a type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimport.html#ImportNamespace","title":"ILDebugImport.ImportNamespace","content":"ILDebugImport.ImportNamespace \nImportNamespace \n\n Represents an \u0027open XYZ\u0027 opening a namespace\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimports.html","title":"ILDebugImports","content":"ILDebugImports \n\n Defines a set of opened namespace, type relevant to a code location.\n \n Emitted to the PortablePDB format.\n \nILDebugImports.Parent \nParent \nILDebugImports.Imports \nImports"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimports.html#Parent","title":"ILDebugImports.Parent","content":"ILDebugImports.Parent \nParent \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildebugimports.html#Imports","title":"ILDebugImports.Imports","content":"ILDebugImports.Imports \nImports \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html","title":"ILDefaultPInvokeEncoding","content":"ILDefaultPInvokeEncoding \n\n Default Unicode encoding for P/Invoke  within a type.\n \nILDefaultPInvokeEncoding.Ansi \nAnsi \nILDefaultPInvokeEncoding.Auto \nAuto \nILDefaultPInvokeEncoding.Unicode \nUnicode"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#Ansi","title":"ILDefaultPInvokeEncoding.Ansi","content":"ILDefaultPInvokeEncoding.Ansi \nAnsi \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#Auto","title":"ILDefaultPInvokeEncoding.Auto","content":"ILDefaultPInvokeEncoding.Auto \nAuto \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ildefaultpinvokeencoding.html#Unicode","title":"ILDefaultPInvokeEncoding.Unicode","content":"ILDefaultPInvokeEncoding.Unicode \nUnicode \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html","title":"ILEventDef","content":"ILEventDef \n\n Event definitions.\n \nILEventDef.( .ctor ) \n( .ctor ) \nILEventDef.AddMethod \nAddMethod \nILEventDef.IsRTSpecialName \nIsRTSpecialName \nILEventDef.Attributes \nAttributes \nILEventDef.OtherMethods \nOtherMethods \nILEventDef.FireMethod \nFireMethod \nILEventDef.CustomAttrs \nCustomAttrs \nILEventDef.EventType \nEventType \nILEventDef.RemoveMethod \nRemoveMethod \nILEventDef.IsSpecialName \nIsSpecialName \nILEventDef.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#( .ctor )","title":"ILEventDef.( .ctor )","content":"ILEventDef.( .ctor ) \n( .ctor ) \n\n Functional creation of a value, immediate\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#AddMethod","title":"ILEventDef.AddMethod","content":"ILEventDef.AddMethod \nAddMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#IsRTSpecialName","title":"ILEventDef.IsRTSpecialName","content":"ILEventDef.IsRTSpecialName \nIsRTSpecialName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#Attributes","title":"ILEventDef.Attributes","content":"ILEventDef.Attributes \nAttributes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#OtherMethods","title":"ILEventDef.OtherMethods","content":"ILEventDef.OtherMethods \nOtherMethods \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#FireMethod","title":"ILEventDef.FireMethod","content":"ILEventDef.FireMethod \nFireMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#CustomAttrs","title":"ILEventDef.CustomAttrs","content":"ILEventDef.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#EventType","title":"ILEventDef.EventType","content":"ILEventDef.EventType \nEventType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#RemoveMethod","title":"ILEventDef.RemoveMethod","content":"ILEventDef.RemoveMethod \nRemoveMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#IsSpecialName","title":"ILEventDef.IsSpecialName","content":"ILEventDef.IsSpecialName \nIsSpecialName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdef.html#Name","title":"ILEventDef.Name","content":"ILEventDef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ileventdefs.html","title":"ILEventDefs","content":"ILEventDefs \n\n Table of those events in a type definition.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html","title":"ILExportedTypeOrForwarder","content":"ILExportedTypeOrForwarder \n\n these are only found in the ILExportedTypesAndForwarders table in the manifest\n \nILExportedTypeOrForwarder.Access \nAccess \nILExportedTypeOrForwarder.CustomAttrs \nCustomAttrs \nILExportedTypeOrForwarder.IsForwarder \nIsForwarder \nILExportedTypeOrForwarder.ScopeRef \nScopeRef \nILExportedTypeOrForwarder.Name \nName \nILExportedTypeOrForwarder.Attributes \nAttributes \nILExportedTypeOrForwarder.Nested \nNested \nILExportedTypeOrForwarder.CustomAttrsStored \nCustomAttrsStored \nILExportedTypeOrForwarder.MetadataIndex \nMetadataIndex"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Access","title":"ILExportedTypeOrForwarder.Access","content":"ILExportedTypeOrForwarder.Access \nAccess \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#CustomAttrs","title":"ILExportedTypeOrForwarder.CustomAttrs","content":"ILExportedTypeOrForwarder.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#IsForwarder","title":"ILExportedTypeOrForwarder.IsForwarder","content":"ILExportedTypeOrForwarder.IsForwarder \nIsForwarder \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#ScopeRef","title":"ILExportedTypeOrForwarder.ScopeRef","content":"ILExportedTypeOrForwarder.ScopeRef \nScopeRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Name","title":"ILExportedTypeOrForwarder.Name","content":"ILExportedTypeOrForwarder.Name \nName \n\n [Namespace.]Name\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Attributes","title":"ILExportedTypeOrForwarder.Attributes","content":"ILExportedTypeOrForwarder.Attributes \nAttributes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#Nested","title":"ILExportedTypeOrForwarder.Nested","content":"ILExportedTypeOrForwarder.Nested \nNested \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#CustomAttrsStored","title":"ILExportedTypeOrForwarder.CustomAttrsStored","content":"ILExportedTypeOrForwarder.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypeorforwarder.html#MetadataIndex","title":"ILExportedTypeOrForwarder.MetadataIndex","content":"ILExportedTypeOrForwarder.MetadataIndex \nMetadataIndex \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilexportedtypesandforwarders.html","title":"ILExportedTypesAndForwarders","content":"ILExportedTypesAndForwarders \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html","title":"ILFieldDef","content":"ILFieldDef \n\n Field definitions.\n \nILFieldDef.( .ctor ) \n( .ctor ) \nILFieldDef.Offset \nOffset \nILFieldDef.IsStatic \nIsStatic \nILFieldDef.IsLiteral \nIsLiteral \nILFieldDef.Access \nAccess \nILFieldDef.Attributes \nAttributes \nILFieldDef.Data \nData \nILFieldDef.FieldType \nFieldType \nILFieldDef.LiteralValue \nLiteralValue \nILFieldDef.CustomAttrs \nCustomAttrs \nILFieldDef.IsInitOnly \nIsInitOnly \nILFieldDef.Marshal \nMarshal \nILFieldDef.NotSerialized \nNotSerialized \nILFieldDef.IsSpecialName \nIsSpecialName \nILFieldDef.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#( .ctor )","title":"ILFieldDef.( .ctor )","content":"ILFieldDef.( .ctor ) \n( .ctor ) \n\n Functional creation of a value, immediate\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Offset","title":"ILFieldDef.Offset","content":"ILFieldDef.Offset \nOffset \n\n The explicit offset in bytes when explicit layout is used.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsStatic","title":"ILFieldDef.IsStatic","content":"ILFieldDef.IsStatic \nIsStatic \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsLiteral","title":"ILFieldDef.IsLiteral","content":"ILFieldDef.IsLiteral \nIsLiteral \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Access","title":"ILFieldDef.Access","content":"ILFieldDef.Access \nAccess \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Attributes","title":"ILFieldDef.Attributes","content":"ILFieldDef.Attributes \nAttributes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Data","title":"ILFieldDef.Data","content":"ILFieldDef.Data \nData \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#FieldType","title":"ILFieldDef.FieldType","content":"ILFieldDef.FieldType \nFieldType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#LiteralValue","title":"ILFieldDef.LiteralValue","content":"ILFieldDef.LiteralValue \nLiteralValue \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#CustomAttrs","title":"ILFieldDef.CustomAttrs","content":"ILFieldDef.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsInitOnly","title":"ILFieldDef.IsInitOnly","content":"ILFieldDef.IsInitOnly \nIsInitOnly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Marshal","title":"ILFieldDef.Marshal","content":"ILFieldDef.Marshal \nMarshal \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#NotSerialized","title":"ILFieldDef.NotSerialized","content":"ILFieldDef.NotSerialized \nNotSerialized \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#IsSpecialName","title":"ILFieldDef.IsSpecialName","content":"ILFieldDef.IsSpecialName \nIsSpecialName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddef.html#Name","title":"ILFieldDef.Name","content":"ILFieldDef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfielddefs.html","title":"ILFieldDefs","content":"ILFieldDefs \n\n Tables of fields.  Logically equivalent to a list of fields but the table is kept in\n a form to allow efficient looking up fields by name.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html","title":"ILFieldInit","content":"ILFieldInit \n\n Field Init\n \nILFieldInit.AsObject \nAsObject \nILFieldInit.String \nString \nILFieldInit.Bool \nBool \nILFieldInit.Char \nChar \nILFieldInit.Int8 \nInt8 \nILFieldInit.Int16 \nInt16 \nILFieldInit.Int32 \nInt32 \nILFieldInit.Int64 \nInt64 \nILFieldInit.UInt8 \nUInt8 \nILFieldInit.UInt16 \nUInt16 \nILFieldInit.UInt32 \nUInt32 \nILFieldInit.UInt64 \nUInt64 \nILFieldInit.Single \nSingle \nILFieldInit.Double \nDouble \nILFieldInit.Null \nNull"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#AsObject","title":"ILFieldInit.AsObject","content":"ILFieldInit.AsObject \nAsObject \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#String","title":"ILFieldInit.String","content":"ILFieldInit.String \nString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Bool","title":"ILFieldInit.Bool","content":"ILFieldInit.Bool \nBool \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Char","title":"ILFieldInit.Char","content":"ILFieldInit.Char \nChar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int8","title":"ILFieldInit.Int8","content":"ILFieldInit.Int8 \nInt8 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int16","title":"ILFieldInit.Int16","content":"ILFieldInit.Int16 \nInt16 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int32","title":"ILFieldInit.Int32","content":"ILFieldInit.Int32 \nInt32 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Int64","title":"ILFieldInit.Int64","content":"ILFieldInit.Int64 \nInt64 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt8","title":"ILFieldInit.UInt8","content":"ILFieldInit.UInt8 \nUInt8 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt16","title":"ILFieldInit.UInt16","content":"ILFieldInit.UInt16 \nUInt16 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt32","title":"ILFieldInit.UInt32","content":"ILFieldInit.UInt32 \nUInt32 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#UInt64","title":"ILFieldInit.UInt64","content":"ILFieldInit.UInt64 \nUInt64 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Single","title":"ILFieldInit.Single","content":"ILFieldInit.Single \nSingle \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Double","title":"ILFieldInit.Double","content":"ILFieldInit.Double \nDouble \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldinit.html#Null","title":"ILFieldInit.Null","content":"ILFieldInit.Null \nNull \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldref.html","title":"ILFieldRef","content":"ILFieldRef \n\n Formal identities of fields.\n \nILFieldRef.DeclaringTypeRef \nDeclaringTypeRef \nILFieldRef.Name \nName \nILFieldRef.Type \nType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldref.html#DeclaringTypeRef","title":"ILFieldRef.DeclaringTypeRef","content":"ILFieldRef.DeclaringTypeRef \nDeclaringTypeRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldref.html#Name","title":"ILFieldRef.Name","content":"ILFieldRef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldref.html#Type","title":"ILFieldRef.Type","content":"ILFieldRef.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html","title":"ILFieldSpec","content":"ILFieldSpec \n\n Field specs.  The data given for a ldfld, stfld etc. instruction.\n \nILFieldSpec.DeclaringTypeRef \nDeclaringTypeRef \nILFieldSpec.FormalType \nFormalType \nILFieldSpec.ActualType \nActualType \nILFieldSpec.Name \nName \nILFieldSpec.FieldRef \nFieldRef \nILFieldSpec.DeclaringType \nDeclaringType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#DeclaringTypeRef","title":"ILFieldSpec.DeclaringTypeRef","content":"ILFieldSpec.DeclaringTypeRef \nDeclaringTypeRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#FormalType","title":"ILFieldSpec.FormalType","content":"ILFieldSpec.FormalType \nFormalType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#ActualType","title":"ILFieldSpec.ActualType","content":"ILFieldSpec.ActualType \nActualType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#Name","title":"ILFieldSpec.Name","content":"ILFieldSpec.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#FieldRef","title":"ILFieldSpec.FieldRef","content":"ILFieldSpec.FieldRef \nFieldRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilfieldspec.html#DeclaringType","title":"ILFieldSpec.DeclaringType","content":"ILFieldSpec.DeclaringType \nDeclaringType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html","title":"ILGenericParameterDef","content":"ILGenericParameterDef \n\n Generic parameters.  Formal generic parameter declarations may include the bounds, if any, on the generic parameter.\n \nILGenericParameterDef.CustomAttrs \nCustomAttrs \nILGenericParameterDef.Name \nName \nILGenericParameterDef.Constraints \nConstraints \nILGenericParameterDef.Variance \nVariance \nILGenericParameterDef.HasReferenceTypeConstraint \nHasReferenceTypeConstraint \nILGenericParameterDef.HasNotNullableValueTypeConstraint \nHasNotNullableValueTypeConstraint \nILGenericParameterDef.HasDefaultConstructorConstraint \nHasDefaultConstructorConstraint \nILGenericParameterDef.CustomAttrsStored \nCustomAttrsStored \nILGenericParameterDef.MetadataIndex \nMetadataIndex"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#CustomAttrs","title":"ILGenericParameterDef.CustomAttrs","content":"ILGenericParameterDef.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#Name","title":"ILGenericParameterDef.Name","content":"ILGenericParameterDef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#Constraints","title":"ILGenericParameterDef.Constraints","content":"ILGenericParameterDef.Constraints \nConstraints \n\n At most one is the parent type, the others are interface types.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#Variance","title":"ILGenericParameterDef.Variance","content":"ILGenericParameterDef.Variance \nVariance \n\n Variance of type parameters, only applicable to generic parameters for generic interfaces and delegates.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#HasReferenceTypeConstraint","title":"ILGenericParameterDef.HasReferenceTypeConstraint","content":"ILGenericParameterDef.HasReferenceTypeConstraint \nHasReferenceTypeConstraint \n\n Indicates the type argument must be a reference type.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#HasNotNullableValueTypeConstraint","title":"ILGenericParameterDef.HasNotNullableValueTypeConstraint","content":"ILGenericParameterDef.HasNotNullableValueTypeConstraint \nHasNotNullableValueTypeConstraint \n\n Indicates the type argument must be a value type, but not Nullable.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#HasDefaultConstructorConstraint","title":"ILGenericParameterDef.HasDefaultConstructorConstraint","content":"ILGenericParameterDef.HasDefaultConstructorConstraint \nHasDefaultConstructorConstraint \n\n Indicates the type argument must have a public nullary constructor.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#CustomAttrsStored","title":"ILGenericParameterDef.CustomAttrsStored","content":"ILGenericParameterDef.CustomAttrsStored \nCustomAttrsStored \n\n Do not use this\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericparameterdef.html#MetadataIndex","title":"ILGenericParameterDef.MetadataIndex","content":"ILGenericParameterDef.MetadataIndex \nMetadataIndex \n\n Do not use this\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html","title":"ILGenericVariance","content":"ILGenericVariance \n \nILGenericVariance.NonVariant \nNonVariant \nILGenericVariance.CoVariant \nCoVariant \nILGenericVariance.ContraVariant \nContraVariant"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#NonVariant","title":"ILGenericVariance.NonVariant","content":"ILGenericVariance.NonVariant \nNonVariant \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#CoVariant","title":"ILGenericVariance.CoVariant","content":"ILGenericVariance.CoVariant \nCoVariant \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilgenericvariance.html#ContraVariant","title":"ILGenericVariance.ContraVariant","content":"ILGenericVariance.ContraVariant \nContraVariant \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilguid.html","title":"ILGuid","content":"ILGuid \n\n Represents guids\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html","title":"ILMemberAccess","content":"ILMemberAccess \n\n Member Access\n \nILMemberAccess.Assembly \nAssembly \nILMemberAccess.CompilerControlled \nCompilerControlled \nILMemberAccess.FamilyAndAssembly \nFamilyAndAssembly \nILMemberAccess.FamilyOrAssembly \nFamilyOrAssembly \nILMemberAccess.Family \nFamily \nILMemberAccess.Private \nPrivate \nILMemberAccess.Public \nPublic"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Assembly","title":"ILMemberAccess.Assembly","content":"ILMemberAccess.Assembly \nAssembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#CompilerControlled","title":"ILMemberAccess.CompilerControlled","content":"ILMemberAccess.CompilerControlled \nCompilerControlled \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#FamilyAndAssembly","title":"ILMemberAccess.FamilyAndAssembly","content":"ILMemberAccess.FamilyAndAssembly \nFamilyAndAssembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#FamilyOrAssembly","title":"ILMemberAccess.FamilyOrAssembly","content":"ILMemberAccess.FamilyOrAssembly \nFamilyOrAssembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Family","title":"ILMemberAccess.Family","content":"ILMemberAccess.Family \nFamily \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Private","title":"ILMemberAccess.Private","content":"ILMemberAccess.Private \nPrivate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmemberaccess.html#Public","title":"ILMemberAccess.Public","content":"ILMemberAccess.Public \nPublic \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html","title":"ILMethodDef","content":"ILMethodDef \n\n IL Method definitions.\n \nILMethodDef.( .ctor ) \n( .ctor ) \nILMethodDef.IsAggressiveInline \nIsAggressiveInline \nILMethodDef.CallingConv \nCallingConv \nILMethodDef.IsUnmanagedExport \nIsUnmanagedExport \nILMethodDef.IsVirtual \nIsVirtual \nILMethodDef.Access \nAccess \nILMethodDef.IsForwardRef \nIsForwardRef \nILMethodDef.SecurityDecls \nSecurityDecls \nILMethodDef.IsNewSlot \nIsNewSlot \nILMethodDef.MaxStack \nMaxStack \nILMethodDef.IsEntryPoint \nIsEntryPoint \nILMethodDef.Return \nReturn \nILMethodDef.IsSynchronized \nIsSynchronized \nILMethodDef.IsHideBySig \nIsHideBySig \nILMethodDef.GenericParams \nGenericParams \nILMethodDef.IsAbstract \nIsAbstract \nILMethodDef.Name \nName \nILMethodDef.IsCheckAccessOnOverride \nIsCheckAccessOnOverride \nILMethodDef.IsReqSecObj \nIsReqSecObj \nILMethodDef.Parameters \nParameters \nILMethodDef.CustomAttrs \nCustomAttrs \nILMethodDef.IsIL \nIsIL \nILMethodDef.IsClassInitializer \nIsClassInitializer \nILMethodDef.IsPreserveSig \nIsPreserveSig \nILMethodDef.Attributes \nAttributes \nILMethodDef.Body \nBody \nILMethodDef.Locals \nLocals \nILMethodDef.Code \nCode \nILMethodDef.IsStatic \nIsStatic \nILMethodDef.ImplAttributes \nImplAttributes \nILMethodDef.IsSpecialName \nIsSpecialName \nILMethodDef.IsMustRun \nIsMustRun \nILMethodDef.ParameterTypes \nParameterTypes \nILMethodDef.IsNoInline \nIsNoInline \nILMethodDef.MethodBody \nMethodBody \nILMethodDef.CallingSignature \nCallingSignature \nILMethodDef.IsZeroInit \nIsZeroInit \nILMethodDef.IsManaged \nIsManaged \nILMethodDef.IsFinal \nIsFinal \nILMethodDef.IsInternalCall \nIsInternalCall \nILMethodDef.HasSecurity \nHasSecurity \nILMethodDef.IsConstructor \nIsConstructor \nILMethodDef.IsNonVirtualInstance \nIsNonVirtualInstance"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#( .ctor )","title":"ILMethodDef.( .ctor )","content":"ILMethodDef.( .ctor ) \n( .ctor ) \n\n Functional creation of a value, immediate\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsAggressiveInline","title":"ILMethodDef.IsAggressiveInline","content":"ILMethodDef.IsAggressiveInline \nIsAggressiveInline \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#CallingConv","title":"ILMethodDef.CallingConv","content":"ILMethodDef.CallingConv \nCallingConv \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsUnmanagedExport","title":"ILMethodDef.IsUnmanagedExport","content":"ILMethodDef.IsUnmanagedExport \nIsUnmanagedExport \n\n The method is exported to unmanaged code using COM interop.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsVirtual","title":"ILMethodDef.IsVirtual","content":"ILMethodDef.IsVirtual \nIsVirtual \n\n Indicates an instance methods that is virtual or abstract or implements an interface slot.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Access","title":"ILMethodDef.Access","content":"ILMethodDef.Access \nAccess \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsForwardRef","title":"ILMethodDef.IsForwardRef","content":"ILMethodDef.IsForwardRef \nIsForwardRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#SecurityDecls","title":"ILMethodDef.SecurityDecls","content":"ILMethodDef.SecurityDecls \nSecurityDecls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsNewSlot","title":"ILMethodDef.IsNewSlot","content":"ILMethodDef.IsNewSlot \nIsNewSlot \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#MaxStack","title":"ILMethodDef.MaxStack","content":"ILMethodDef.MaxStack \nMaxStack \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsEntryPoint","title":"ILMethodDef.IsEntryPoint","content":"ILMethodDef.IsEntryPoint \nIsEntryPoint \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Return","title":"ILMethodDef.Return","content":"ILMethodDef.Return \nReturn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsSynchronized","title":"ILMethodDef.IsSynchronized","content":"ILMethodDef.IsSynchronized \nIsSynchronized \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsHideBySig","title":"ILMethodDef.IsHideBySig","content":"ILMethodDef.IsHideBySig \nIsHideBySig \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#GenericParams","title":"ILMethodDef.GenericParams","content":"ILMethodDef.GenericParams \nGenericParams \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsAbstract","title":"ILMethodDef.IsAbstract","content":"ILMethodDef.IsAbstract \nIsAbstract \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Name","title":"ILMethodDef.Name","content":"ILMethodDef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsCheckAccessOnOverride","title":"ILMethodDef.IsCheckAccessOnOverride","content":"ILMethodDef.IsCheckAccessOnOverride \nIsCheckAccessOnOverride \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsReqSecObj","title":"ILMethodDef.IsReqSecObj","content":"ILMethodDef.IsReqSecObj \nIsReqSecObj \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Parameters","title":"ILMethodDef.Parameters","content":"ILMethodDef.Parameters \nParameters \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#CustomAttrs","title":"ILMethodDef.CustomAttrs","content":"ILMethodDef.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsIL","title":"ILMethodDef.IsIL","content":"ILMethodDef.IsIL \nIsIL \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsClassInitializer","title":"ILMethodDef.IsClassInitializer","content":"ILMethodDef.IsClassInitializer \nIsClassInitializer \n\n Indicates a .cctor method.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsPreserveSig","title":"ILMethodDef.IsPreserveSig","content":"ILMethodDef.IsPreserveSig \nIsPreserveSig \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Attributes","title":"ILMethodDef.Attributes","content":"ILMethodDef.Attributes \nAttributes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Body","title":"ILMethodDef.Body","content":"ILMethodDef.Body \nBody \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Locals","title":"ILMethodDef.Locals","content":"ILMethodDef.Locals \nLocals \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#Code","title":"ILMethodDef.Code","content":"ILMethodDef.Code \nCode \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsStatic","title":"ILMethodDef.IsStatic","content":"ILMethodDef.IsStatic \nIsStatic \n\n Indicates a static method.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#ImplAttributes","title":"ILMethodDef.ImplAttributes","content":"ILMethodDef.ImplAttributes \nImplAttributes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsSpecialName","title":"ILMethodDef.IsSpecialName","content":"ILMethodDef.IsSpecialName \nIsSpecialName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsMustRun","title":"ILMethodDef.IsMustRun","content":"ILMethodDef.IsMustRun \nIsMustRun \n\n SafeHandle finalizer must be run.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#ParameterTypes","title":"ILMethodDef.ParameterTypes","content":"ILMethodDef.ParameterTypes \nParameterTypes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsNoInline","title":"ILMethodDef.IsNoInline","content":"ILMethodDef.IsNoInline \nIsNoInline \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#MethodBody","title":"ILMethodDef.MethodBody","content":"ILMethodDef.MethodBody \nMethodBody \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#CallingSignature","title":"ILMethodDef.CallingSignature","content":"ILMethodDef.CallingSignature \nCallingSignature \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsZeroInit","title":"ILMethodDef.IsZeroInit","content":"ILMethodDef.IsZeroInit \nIsZeroInit \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsManaged","title":"ILMethodDef.IsManaged","content":"ILMethodDef.IsManaged \nIsManaged \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsFinal","title":"ILMethodDef.IsFinal","content":"ILMethodDef.IsFinal \nIsFinal \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsInternalCall","title":"ILMethodDef.IsInternalCall","content":"ILMethodDef.IsInternalCall \nIsInternalCall \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#HasSecurity","title":"ILMethodDef.HasSecurity","content":"ILMethodDef.HasSecurity \nHasSecurity \n\n Some methods are marked \u0022HasSecurity\u0022 even if there are no permissions attached, e.g. if they use SuppressUnmanagedCodeSecurityAttribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsConstructor","title":"ILMethodDef.IsConstructor","content":"ILMethodDef.IsConstructor \nIsConstructor \n\n Indicates a .ctor method.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddef.html#IsNonVirtualInstance","title":"ILMethodDef.IsNonVirtualInstance","content":"ILMethodDef.IsNonVirtualInstance \nIsNonVirtualInstance \n\n Indicates this is an instance methods that is not virtual.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html","title":"ILMethodDefs","content":"ILMethodDefs \n\n Tables of methods.  Logically equivalent to a list of methods but\n the table is kept in a form optimized for looking up methods by\n name and arity.\n \nILMethodDefs.FindByName \nFindByName \nILMethodDefs.TryFindInstanceByNameAndCallingSignature \nTryFindInstanceByNameAndCallingSignature \nILMethodDefs.AsArray \nAsArray \nILMethodDefs.AsList \nAsList"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#FindByName","title":"ILMethodDefs.FindByName","content":"ILMethodDefs.FindByName \nFindByName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#TryFindInstanceByNameAndCallingSignature","title":"ILMethodDefs.TryFindInstanceByNameAndCallingSignature","content":"ILMethodDefs.TryFindInstanceByNameAndCallingSignature \nTryFindInstanceByNameAndCallingSignature \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#AsArray","title":"ILMethodDefs.AsArray","content":"ILMethodDefs.AsArray \nAsArray \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethoddefs.html#AsList","title":"ILMethodDefs.AsList","content":"ILMethodDefs.AsList \nAsList \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodimpldef.html","title":"ILMethodImplDef","content":"ILMethodImplDef \n\n Method Impls\n \nILMethodImplDef.Overrides \nOverrides \nILMethodImplDef.OverrideBy \nOverrideBy"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodimpldef.html#Overrides","title":"ILMethodImplDef.Overrides","content":"ILMethodImplDef.Overrides \nOverrides \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodimpldef.html#OverrideBy","title":"ILMethodImplDef.OverrideBy","content":"ILMethodImplDef.OverrideBy \nOverrideBy \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodimpldefs.html","title":"ILMethodImplDefs","content":"ILMethodImplDefs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html","title":"ILMethodRef","content":"ILMethodRef \n\n Formal identities of methods.\n \nILMethodRef.GenericArity \nGenericArity \nILMethodRef.DeclaringTypeRef \nDeclaringTypeRef \nILMethodRef.CallingConv \nCallingConv \nILMethodRef.ArgCount \nArgCount \nILMethodRef.ReturnType \nReturnType \nILMethodRef.CallingSignature \nCallingSignature \nILMethodRef.ArgTypes \nArgTypes \nILMethodRef.Name \nName \nILMethodRef.Create \nCreate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#GenericArity","title":"ILMethodRef.GenericArity","content":"ILMethodRef.GenericArity \nGenericArity \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#DeclaringTypeRef","title":"ILMethodRef.DeclaringTypeRef","content":"ILMethodRef.DeclaringTypeRef \nDeclaringTypeRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#CallingConv","title":"ILMethodRef.CallingConv","content":"ILMethodRef.CallingConv \nCallingConv \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#ArgCount","title":"ILMethodRef.ArgCount","content":"ILMethodRef.ArgCount \nArgCount \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#ReturnType","title":"ILMethodRef.ReturnType","content":"ILMethodRef.ReturnType \nReturnType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#CallingSignature","title":"ILMethodRef.CallingSignature","content":"ILMethodRef.CallingSignature \nCallingSignature \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#ArgTypes","title":"ILMethodRef.ArgTypes","content":"ILMethodRef.ArgTypes \nArgTypes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#Name","title":"ILMethodRef.Name","content":"ILMethodRef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodref.html#Create","title":"ILMethodRef.Create","content":"ILMethodRef.Create \nCreate \n\n Functional creation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html","title":"ILMethodSpec","content":"ILMethodSpec \n\n The information at the callsite of a method\n \nILMethodSpec.FormalReturnType \nFormalReturnType \nILMethodSpec.GenericArity \nGenericArity \nILMethodSpec.DeclaringType \nDeclaringType \nILMethodSpec.GenericArgs \nGenericArgs \nILMethodSpec.CallingConv \nCallingConv \nILMethodSpec.FormalArgTypes \nFormalArgTypes \nILMethodSpec.MethodRef \nMethodRef \nILMethodSpec.Name \nName \nILMethodSpec.Create \nCreate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#FormalReturnType","title":"ILMethodSpec.FormalReturnType","content":"ILMethodSpec.FormalReturnType \nFormalReturnType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#GenericArity","title":"ILMethodSpec.GenericArity","content":"ILMethodSpec.GenericArity \nGenericArity \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#DeclaringType","title":"ILMethodSpec.DeclaringType","content":"ILMethodSpec.DeclaringType \nDeclaringType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#GenericArgs","title":"ILMethodSpec.GenericArgs","content":"ILMethodSpec.GenericArgs \nGenericArgs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#CallingConv","title":"ILMethodSpec.CallingConv","content":"ILMethodSpec.CallingConv \nCallingConv \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#FormalArgTypes","title":"ILMethodSpec.FormalArgTypes","content":"ILMethodSpec.FormalArgTypes \nFormalArgTypes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#MethodRef","title":"ILMethodSpec.MethodRef","content":"ILMethodSpec.MethodRef \nMethodRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#Name","title":"ILMethodSpec.Name","content":"ILMethodSpec.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmethodspec.html#Create","title":"ILMethodSpec.Create","content":"ILMethodSpec.Create \nCreate \n\n Functional creation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html","title":"ILModuleDef","content":"ILModuleDef \n\n One module in the \u0022current\u0022 assembly, either a main-module or\n an auxiliary module.  The main module will have a manifest.\n\n An assembly is built by joining together a \u0022main\u0022 module plus\n several auxiliary modules.\n \nILModuleDef.HasManifest \nHasManifest \nILModuleDef.CustomAttrs \nCustomAttrs \nILModuleDef.ManifestOfAssembly \nManifestOfAssembly \nILModuleDef.Manifest \nManifest \nILModuleDef.Name \nName \nILModuleDef.TypeDefs \nTypeDefs \nILModuleDef.SubsystemVersion \nSubsystemVersion \nILModuleDef.UseHighEntropyVA \nUseHighEntropyVA \nILModuleDef.SubSystemFlags \nSubSystemFlags \nILModuleDef.IsDLL \nIsDLL \nILModuleDef.IsILOnly \nIsILOnly \nILModuleDef.Platform \nPlatform \nILModuleDef.StackReserveSize \nStackReserveSize \nILModuleDef.Is32Bit \nIs32Bit \nILModuleDef.Is32BitPreferred \nIs32BitPreferred \nILModuleDef.Is64Bit \nIs64Bit \nILModuleDef.VirtualAlignment \nVirtualAlignment \nILModuleDef.PhysicalAlignment \nPhysicalAlignment \nILModuleDef.ImageBase \nImageBase \nILModuleDef.MetadataVersion \nMetadataVersion \nILModuleDef.Resources \nResources \nILModuleDef.NativeResources \nNativeResources \nILModuleDef.CustomAttrsStored \nCustomAttrsStored \nILModuleDef.MetadataIndex \nMetadataIndex"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#HasManifest","title":"ILModuleDef.HasManifest","content":"ILModuleDef.HasManifest \nHasManifest \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#CustomAttrs","title":"ILModuleDef.CustomAttrs","content":"ILModuleDef.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#ManifestOfAssembly","title":"ILModuleDef.ManifestOfAssembly","content":"ILModuleDef.ManifestOfAssembly \nManifestOfAssembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Manifest","title":"ILModuleDef.Manifest","content":"ILModuleDef.Manifest \nManifest \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Name","title":"ILModuleDef.Name","content":"ILModuleDef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#TypeDefs","title":"ILModuleDef.TypeDefs","content":"ILModuleDef.TypeDefs \nTypeDefs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#SubsystemVersion","title":"ILModuleDef.SubsystemVersion","content":"ILModuleDef.SubsystemVersion \nSubsystemVersion \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#UseHighEntropyVA","title":"ILModuleDef.UseHighEntropyVA","content":"ILModuleDef.UseHighEntropyVA \nUseHighEntropyVA \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#SubSystemFlags","title":"ILModuleDef.SubSystemFlags","content":"ILModuleDef.SubSystemFlags \nSubSystemFlags \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#IsDLL","title":"ILModuleDef.IsDLL","content":"ILModuleDef.IsDLL \nIsDLL \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#IsILOnly","title":"ILModuleDef.IsILOnly","content":"ILModuleDef.IsILOnly \nIsILOnly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Platform","title":"ILModuleDef.Platform","content":"ILModuleDef.Platform \nPlatform \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#StackReserveSize","title":"ILModuleDef.StackReserveSize","content":"ILModuleDef.StackReserveSize \nStackReserveSize \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Is32Bit","title":"ILModuleDef.Is32Bit","content":"ILModuleDef.Is32Bit \nIs32Bit \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Is32BitPreferred","title":"ILModuleDef.Is32BitPreferred","content":"ILModuleDef.Is32BitPreferred \nIs32BitPreferred \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Is64Bit","title":"ILModuleDef.Is64Bit","content":"ILModuleDef.Is64Bit \nIs64Bit \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#VirtualAlignment","title":"ILModuleDef.VirtualAlignment","content":"ILModuleDef.VirtualAlignment \nVirtualAlignment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#PhysicalAlignment","title":"ILModuleDef.PhysicalAlignment","content":"ILModuleDef.PhysicalAlignment \nPhysicalAlignment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#ImageBase","title":"ILModuleDef.ImageBase","content":"ILModuleDef.ImageBase \nImageBase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#MetadataVersion","title":"ILModuleDef.MetadataVersion","content":"ILModuleDef.MetadataVersion \nMetadataVersion \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#Resources","title":"ILModuleDef.Resources","content":"ILModuleDef.Resources \nResources \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#NativeResources","title":"ILModuleDef.NativeResources","content":"ILModuleDef.NativeResources \nNativeResources \n\n e.g. win86 resources, as the exact contents of a .res or .obj file. Must be unlinked manually.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#CustomAttrsStored","title":"ILModuleDef.CustomAttrsStored","content":"ILModuleDef.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduledef.html#MetadataIndex","title":"ILModuleDef.MetadataIndex","content":"ILModuleDef.MetadataIndex \nMetadataIndex \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduleref.html","title":"ILModuleRef","content":"ILModuleRef \n \nILModuleRef.Hash \nHash \nILModuleRef.HasMetadata \nHasMetadata \nILModuleRef.Name \nName \nILModuleRef.Create \nCreate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#Hash","title":"ILModuleRef.Hash","content":"ILModuleRef.Hash \nHash \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#HasMetadata","title":"ILModuleRef.HasMetadata","content":"ILModuleRef.HasMetadata \nHasMetadata \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#Name","title":"ILModuleRef.Name","content":"ILModuleRef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilmoduleref.html#Create","title":"ILModuleRef.Create","content":"ILModuleRef.Create \nCreate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativeresource.html","title":"ILNativeResource","content":"ILNativeResource \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html","title":"ILNativeType","content":"ILNativeType \n\n Native Types, for marshalling to the native C interface.\n These are taken directly from the ILASM syntax.\n Most of these are listed in the CLI ECMA-335 Spec (Partition II, 7.4).\n \nILNativeType.Empty \nEmpty \nILNativeType.Custom \nCustom \nILNativeType.FixedSysString \nFixedSysString \nILNativeType.FixedArray \nFixedArray \nILNativeType.Currency \nCurrency \nILNativeType.LPSTR \nLPSTR \nILNativeType.LPWSTR \nLPWSTR \nILNativeType.LPTSTR \nLPTSTR \nILNativeType.LPUTF8STR \nLPUTF8STR \nILNativeType.ByValStr \nByValStr \nILNativeType.TBSTR \nTBSTR \nILNativeType.LPSTRUCT \nLPSTRUCT \nILNativeType.Struct \nStruct \nILNativeType.Void \nVoid \nILNativeType.Bool \nBool \nILNativeType.Int8 \nInt8 \nILNativeType.Int16 \nInt16 \nILNativeType.Int32 \nInt32 \nILNativeType.Int64 \nInt64 \nILNativeType.Single \nSingle \nILNativeType.Double \nDouble \nILNativeType.Byte \nByte \nILNativeType.UInt16 \nUInt16 \nILNativeType.UInt32 \nUInt32 \nILNativeType.UInt64 \nUInt64 \nILNativeType.Array \nArray \nILNativeType.Int \nInt \nILNativeType.UInt \nUInt \nILNativeType.Method \nMethod \nILNativeType.AsAny \nAsAny \nILNativeType.BSTR \nBSTR \nILNativeType.IUnknown \nIUnknown \nILNativeType.IDispatch \nIDispatch \nILNativeType.Interface \nInterface \nILNativeType.Error \nError \nILNativeType.SafeArray \nSafeArray \nILNativeType.ANSIBSTR \nANSIBSTR \nILNativeType.VariantBool \nVariantBool"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Empty","title":"ILNativeType.Empty","content":"ILNativeType.Empty \nEmpty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Custom","title":"ILNativeType.Custom","content":"ILNativeType.Custom \nCustom \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#FixedSysString","title":"ILNativeType.FixedSysString","content":"ILNativeType.FixedSysString \nFixedSysString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#FixedArray","title":"ILNativeType.FixedArray","content":"ILNativeType.FixedArray \nFixedArray \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Currency","title":"ILNativeType.Currency","content":"ILNativeType.Currency \nCurrency \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPSTR","title":"ILNativeType.LPSTR","content":"ILNativeType.LPSTR \nLPSTR \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPWSTR","title":"ILNativeType.LPWSTR","content":"ILNativeType.LPWSTR \nLPWSTR \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPTSTR","title":"ILNativeType.LPTSTR","content":"ILNativeType.LPTSTR \nLPTSTR \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPUTF8STR","title":"ILNativeType.LPUTF8STR","content":"ILNativeType.LPUTF8STR \nLPUTF8STR \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#ByValStr","title":"ILNativeType.ByValStr","content":"ILNativeType.ByValStr \nByValStr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#TBSTR","title":"ILNativeType.TBSTR","content":"ILNativeType.TBSTR \nTBSTR \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#LPSTRUCT","title":"ILNativeType.LPSTRUCT","content":"ILNativeType.LPSTRUCT \nLPSTRUCT \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Struct","title":"ILNativeType.Struct","content":"ILNativeType.Struct \nStruct \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Void","title":"ILNativeType.Void","content":"ILNativeType.Void \nVoid \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Bool","title":"ILNativeType.Bool","content":"ILNativeType.Bool \nBool \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int8","title":"ILNativeType.Int8","content":"ILNativeType.Int8 \nInt8 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int16","title":"ILNativeType.Int16","content":"ILNativeType.Int16 \nInt16 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int32","title":"ILNativeType.Int32","content":"ILNativeType.Int32 \nInt32 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int64","title":"ILNativeType.Int64","content":"ILNativeType.Int64 \nInt64 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Single","title":"ILNativeType.Single","content":"ILNativeType.Single \nSingle \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Double","title":"ILNativeType.Double","content":"ILNativeType.Double \nDouble \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Byte","title":"ILNativeType.Byte","content":"ILNativeType.Byte \nByte \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt16","title":"ILNativeType.UInt16","content":"ILNativeType.UInt16 \nUInt16 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt32","title":"ILNativeType.UInt32","content":"ILNativeType.UInt32 \nUInt32 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt64","title":"ILNativeType.UInt64","content":"ILNativeType.UInt64 \nUInt64 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Array","title":"ILNativeType.Array","content":"ILNativeType.Array \nArray \n\n  optional idx of parameter giving size plus optional additive i.e. num elems\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Int","title":"ILNativeType.Int","content":"ILNativeType.Int \nInt \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#UInt","title":"ILNativeType.UInt","content":"ILNativeType.UInt \nUInt \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Method","title":"ILNativeType.Method","content":"ILNativeType.Method \nMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#AsAny","title":"ILNativeType.AsAny","content":"ILNativeType.AsAny \nAsAny \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#BSTR","title":"ILNativeType.BSTR","content":"ILNativeType.BSTR \nBSTR \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IUnknown","title":"ILNativeType.IUnknown","content":"ILNativeType.IUnknown \nIUnknown \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#IDispatch","title":"ILNativeType.IDispatch","content":"ILNativeType.IDispatch \nIDispatch \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Interface","title":"ILNativeType.Interface","content":"ILNativeType.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#Error","title":"ILNativeType.Error","content":"ILNativeType.Error \nError \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#SafeArray","title":"ILNativeType.SafeArray","content":"ILNativeType.SafeArray \nSafeArray \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#ANSIBSTR","title":"ILNativeType.ANSIBSTR","content":"ILNativeType.ANSIBSTR \nANSIBSTR \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnativetype.html#VariantBool","title":"ILNativeType.VariantBool","content":"ILNativeType.VariantBool \nVariantBool \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html","title":"ILNestedExportedType","content":"ILNestedExportedType \n\n \u0022Classes Elsewhere\u0022 - classes in auxiliary modules.\n\n Manifests include declarations for all the classes in an\n assembly, regardless of which module they are in.\n\n The \u0022.class extern\u0022 construct describes so-called exported types --\n these are public classes defined in the auxiliary modules of this assembly,\n i.e. modules other than the manifest-carrying module.\n\n For example, if you have a two-module\n assembly (A.DLL and B.DLL), and the manifest resides in the A.DLL,\n then in the manifest all the public classes declared in B.DLL should\n be defined as exported types, i.e., as \u0022.class extern\u0022. The public classes\n defined in A.DLL should not be defined as \u0022.class extern\u0022 -- they are\n already available in the manifest-carrying module. The union of all\n public classes defined in the manifest-carrying module and all\n exported types defined there is the set of all classes exposed by\n this assembly. Thus, by analysing the metadata of the manifest-carrying\n module of an assembly, you can identify all the classes exposed by\n this assembly, and where to find them.\n\n Nested classes found in external modules should also be located in\n this table, suitably nested inside another \u0022ILExportedTypeOrForwarder\u0022\n definition.\n these are only found in the \u0022Nested\u0022 field of ILExportedTypeOrForwarder objects\n \nILNestedExportedType.CustomAttrs \nCustomAttrs \nILNestedExportedType.Name \nName \nILNestedExportedType.Access \nAccess \nILNestedExportedType.Nested \nNested \nILNestedExportedType.CustomAttrsStored \nCustomAttrsStored \nILNestedExportedType.MetadataIndex \nMetadataIndex"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#CustomAttrs","title":"ILNestedExportedType.CustomAttrs","content":"ILNestedExportedType.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#Name","title":"ILNestedExportedType.Name","content":"ILNestedExportedType.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#Access","title":"ILNestedExportedType.Access","content":"ILNestedExportedType.Access \nAccess \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#Nested","title":"ILNestedExportedType.Nested","content":"ILNestedExportedType.Nested \nNested \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#CustomAttrsStored","title":"ILNestedExportedType.CustomAttrsStored","content":"ILNestedExportedType.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtype.html#MetadataIndex","title":"ILNestedExportedType.MetadataIndex","content":"ILNestedExportedType.MetadataIndex \nMetadataIndex \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilnestedexportedtypes.html","title":"ILNestedExportedTypes","content":"ILNestedExportedTypes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html","title":"ILParameter","content":"ILParameter \n\n Method parameters and return values.\n \nILParameter.CustomAttrs \nCustomAttrs \nILParameter.Name \nName \nILParameter.Type \nType \nILParameter.Default \nDefault \nILParameter.Marshal \nMarshal \nILParameter.IsIn \nIsIn \nILParameter.IsOut \nIsOut \nILParameter.IsOptional \nIsOptional \nILParameter.CustomAttrsStored \nCustomAttrsStored \nILParameter.MetadataIndex \nMetadataIndex"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#CustomAttrs","title":"ILParameter.CustomAttrs","content":"ILParameter.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#Name","title":"ILParameter.Name","content":"ILParameter.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#Type","title":"ILParameter.Type","content":"ILParameter.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#Default","title":"ILParameter.Default","content":"ILParameter.Default \nDefault \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#Marshal","title":"ILParameter.Marshal","content":"ILParameter.Marshal \nMarshal \n\n Marshalling map for parameters. COM Interop only.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#IsIn","title":"ILParameter.IsIn","content":"ILParameter.IsIn \nIsIn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#IsOut","title":"ILParameter.IsOut","content":"ILParameter.IsOut \nIsOut \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#IsOptional","title":"ILParameter.IsOptional","content":"ILParameter.IsOptional \nIsOptional \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#CustomAttrsStored","title":"ILParameter.CustomAttrsStored","content":"ILParameter.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilparameter.html#MetadataIndex","title":"ILParameter.MetadataIndex","content":"ILParameter.MetadataIndex \nMetadataIndex \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilplatform.html","title":"ILPlatform","content":"ILPlatform \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpretypedef.html","title":"ILPreTypeDef","content":"ILPreTypeDef \n\n Represents a prefix of information for ILTypeDef.\n\n The information is enough to perform name resolution for the F# compiler, probe attributes\n for ExtensionAttribute  etc.  This is key to the on-demand exploration of .NET metadata.\n This information has to be \u0022Goldilocks\u0022 - not too much, not too little, just right.\n \nILPreTypeDef.GetTypeDef \nGetTypeDef \nILPreTypeDef.Namespace \nNamespace \nILPreTypeDef.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpretypedef.html#GetTypeDef","title":"ILPreTypeDef.GetTypeDef","content":"ILPreTypeDef.GetTypeDef \nGetTypeDef \n\n Realise the actual full typedef\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpretypedef.html#Namespace","title":"ILPreTypeDef.Namespace","content":"ILPreTypeDef.Namespace \nNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpretypedef.html#Name","title":"ILPreTypeDef.Name","content":"ILPreTypeDef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html","title":"ILPropertyDef","content":"ILPropertyDef \n\n Property definitions\n \nILPropertyDef.( .ctor ) \n( .ctor ) \nILPropertyDef.IsRTSpecialName \nIsRTSpecialName \nILPropertyDef.GetMethod \nGetMethod \nILPropertyDef.CallingConv \nCallingConv \nILPropertyDef.Args \nArgs \nILPropertyDef.Attributes \nAttributes \nILPropertyDef.CustomAttrs \nCustomAttrs \nILPropertyDef.Init \nInit \nILPropertyDef.SetMethod \nSetMethod \nILPropertyDef.PropertyType \nPropertyType \nILPropertyDef.IsSpecialName \nIsSpecialName \nILPropertyDef.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#( .ctor )","title":"ILPropertyDef.( .ctor )","content":"ILPropertyDef.( .ctor ) \n( .ctor ) \n\n Functional creation of a value, immediate\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#IsRTSpecialName","title":"ILPropertyDef.IsRTSpecialName","content":"ILPropertyDef.IsRTSpecialName \nIsRTSpecialName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#GetMethod","title":"ILPropertyDef.GetMethod","content":"ILPropertyDef.GetMethod \nGetMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#CallingConv","title":"ILPropertyDef.CallingConv","content":"ILPropertyDef.CallingConv \nCallingConv \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Args","title":"ILPropertyDef.Args","content":"ILPropertyDef.Args \nArgs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Attributes","title":"ILPropertyDef.Attributes","content":"ILPropertyDef.Attributes \nAttributes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#CustomAttrs","title":"ILPropertyDef.CustomAttrs","content":"ILPropertyDef.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Init","title":"ILPropertyDef.Init","content":"ILPropertyDef.Init \nInit \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#SetMethod","title":"ILPropertyDef.SetMethod","content":"ILPropertyDef.SetMethod \nSetMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#PropertyType","title":"ILPropertyDef.PropertyType","content":"ILPropertyDef.PropertyType \nPropertyType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#IsSpecialName","title":"ILPropertyDef.IsSpecialName","content":"ILPropertyDef.IsSpecialName \nIsSpecialName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydef.html#Name","title":"ILPropertyDef.Name","content":"ILPropertyDef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilpropertydefs.html","title":"ILPropertyDefs","content":"ILPropertyDefs \n\n Table of properties in an IL type definition.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilresources.html","title":"ILResources","content":"ILResources \n\n Table of resources in a module.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html","title":"ILReturn","content":"ILReturn \n\n Method return values.\n \nILReturn.WithCustomAttrs \nWithCustomAttrs \nILReturn.CustomAttrs \nCustomAttrs \nILReturn.Marshal \nMarshal \nILReturn.Type \nType \nILReturn.CustomAttrsStored \nCustomAttrsStored \nILReturn.MetadataIndex \nMetadataIndex"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#WithCustomAttrs","title":"ILReturn.WithCustomAttrs","content":"ILReturn.WithCustomAttrs \nWithCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#CustomAttrs","title":"ILReturn.CustomAttrs","content":"ILReturn.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#Marshal","title":"ILReturn.Marshal","content":"ILReturn.Marshal \nMarshal \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#Type","title":"ILReturn.Type","content":"ILReturn.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#CustomAttrsStored","title":"ILReturn.CustomAttrsStored","content":"ILReturn.CustomAttrsStored \nCustomAttrsStored \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilreturn.html#MetadataIndex","title":"ILReturn.MetadataIndex","content":"ILReturn.MetadataIndex \nMetadataIndex \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html","title":"ILScopeRef","content":"ILScopeRef \n \nILScopeRef.IsLocalRef \nIsLocalRef \nILScopeRef.QualifiedName \nQualifiedName \nILScopeRef.Local \nLocal \nILScopeRef.Module \nModule \nILScopeRef.Assembly \nAssembly \nILScopeRef.PrimaryAssembly \nPrimaryAssembly"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#IsLocalRef","title":"ILScopeRef.IsLocalRef","content":"ILScopeRef.IsLocalRef \nIsLocalRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#QualifiedName","title":"ILScopeRef.QualifiedName","content":"ILScopeRef.QualifiedName \nQualifiedName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#Local","title":"ILScopeRef.Local","content":"ILScopeRef.Local \nLocal \n\n A reference to the type in the current module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#Module","title":"ILScopeRef.Module","content":"ILScopeRef.Module \nModule \n\n A reference to a type in a module in the same assembly\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#Assembly","title":"ILScopeRef.Assembly","content":"ILScopeRef.Assembly \nAssembly \n\n A reference to a type in another assembly\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilscoperef.html#PrimaryAssembly","title":"ILScopeRef.PrimaryAssembly","content":"ILScopeRef.PrimaryAssembly \nPrimaryAssembly \n\n A reference to a type in the primary assembly\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsecuritydeclsstored.html","title":"ILSecurityDeclsStored","content":"ILSecurityDeclsStored \n\n Represents the efficiency-oriented storage of ILSecurityDecls in another item.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html","title":"ILSourceDocument","content":"ILSourceDocument \n\n Debug info.  Values of type \u0022source\u0022 can be attached at sequence\n points and some other locations.\n \nILSourceDocument.File \nFile \nILSourceDocument.Language \nLanguage \nILSourceDocument.Vendor \nVendor \nILSourceDocument.DocumentType \nDocumentType \nILSourceDocument.Create \nCreate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#File","title":"ILSourceDocument.File","content":"ILSourceDocument.File \nFile \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#Language","title":"ILSourceDocument.Language","content":"ILSourceDocument.Language \nLanguage \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#Vendor","title":"ILSourceDocument.Vendor","content":"ILSourceDocument.Vendor \nVendor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#DocumentType","title":"ILSourceDocument.DocumentType","content":"ILSourceDocument.DocumentType \nDocumentType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilsourcedocument.html#Create","title":"ILSourceDocument.Create","content":"ILSourceDocument.Create \nCreate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html","title":"ILThisConvention","content":"ILThisConvention \n \nILThisConvention.Instance \nInstance \nILThisConvention.InstanceExplicit \nInstanceExplicit \nILThisConvention.Static \nStatic"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#Instance","title":"ILThisConvention.Instance","content":"ILThisConvention.Instance \nInstance \n\n accepts an implicit \u0027this\u0027 pointer\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#InstanceExplicit","title":"ILThisConvention.InstanceExplicit","content":"ILThisConvention.InstanceExplicit \nInstanceExplicit \n\n accepts an explicit \u0027this\u0027 pointer\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilthisconvention.html#Static","title":"ILThisConvention.Static","content":"ILThisConvention.Static \nStatic \n\n no \u0027this\u0027 pointer is passed\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html","title":"ILType","content":"ILType \n \nILType.TypeSpec \nTypeSpec \nILType.BasicQualifiedName \nBasicQualifiedName \nILType.IsNominal \nIsNominal \nILType.GenericArgs \nGenericArgs \nILType.QualifiedName \nQualifiedName \nILType.IsTyvar \nIsTyvar \nILType.TypeRef \nTypeRef \nILType.Void \nVoid \nILType.Array \nArray \nILType.Value \nValue \nILType.Boxed \nBoxed \nILType.Ptr \nPtr \nILType.Byref \nByref \nILType.FunctionPointer \nFunctionPointer \nILType.TypeVar \nTypeVar \nILType.Modified \nModified"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#TypeSpec","title":"ILType.TypeSpec","content":"ILType.TypeSpec \nTypeSpec \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#BasicQualifiedName","title":"ILType.BasicQualifiedName","content":"ILType.BasicQualifiedName \nBasicQualifiedName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsNominal","title":"ILType.IsNominal","content":"ILType.IsNominal \nIsNominal \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#GenericArgs","title":"ILType.GenericArgs","content":"ILType.GenericArgs \nGenericArgs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#QualifiedName","title":"ILType.QualifiedName","content":"ILType.QualifiedName \nQualifiedName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#IsTyvar","title":"ILType.IsTyvar","content":"ILType.IsTyvar \nIsTyvar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#TypeRef","title":"ILType.TypeRef","content":"ILType.TypeRef \nTypeRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Void","title":"ILType.Void","content":"ILType.Void \nVoid \n\n Used only in return and pointer types.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Array","title":"ILType.Array","content":"ILType.Array \nArray \n\n Array types\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Value","title":"ILType.Value","content":"ILType.Value \nValue \n\n Unboxed types, including builtin types.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Boxed","title":"ILType.Boxed","content":"ILType.Boxed \nBoxed \n\n Reference types.  Also may be used for parents of members even if for members in value types.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Ptr","title":"ILType.Ptr","content":"ILType.Ptr \nPtr \n\n Unmanaged pointers.  Nb. the type is used by tools and for binding only, not by the verifier.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Byref","title":"ILType.Byref","content":"ILType.Byref \nByref \n\n Managed pointers.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#FunctionPointer","title":"ILType.FunctionPointer","content":"ILType.FunctionPointer \nFunctionPointer \n\n ILCode pointers.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#TypeVar","title":"ILType.TypeVar","content":"ILType.TypeVar \nTypeVar \n\n Reference a generic arg.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltype.html#Modified","title":"ILType.Modified","content":"ILType.Modified \nModified \n\n Custom modifiers.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html","title":"ILTypeDef","content":"ILTypeDef \n\n Represents IL Type Definitions.\n \nILTypeDef.( .ctor ) \n( .ctor ) \nILTypeDef.With \nWith \nILTypeDef.IsSealed \nIsSealed \nILTypeDef.Fields \nFields \nILTypeDef.Methods \nMethods \nILTypeDef.Implements \nImplements \nILTypeDef.Access \nAccess \nILTypeDef.Properties \nProperties \nILTypeDef.Attributes \nAttributes \nILTypeDef.IsSerializable \nIsSerializable \nILTypeDef.IsInterface \nIsInterface \nILTypeDef.SecurityDecls \nSecurityDecls \nILTypeDef.CustomAttrs \nCustomAttrs \nILTypeDef.GenericParams \nGenericParams \nILTypeDef.IsDelegate \nIsDelegate \nILTypeDef.IsClass \nIsClass \nILTypeDef.Layout \nLayout \nILTypeDef.IsStructOrEnum \nIsStructOrEnum \nILTypeDef.Encoding \nEncoding \nILTypeDef.Extends \nExtends \nILTypeDef.IsComInterop \nIsComInterop \nILTypeDef.IsStruct \nIsStruct \nILTypeDef.IsEnum \nIsEnum \nILTypeDef.MethodImpls \nMethodImpls \nILTypeDef.IsSpecialName \nIsSpecialName \nILTypeDef.Name \nName \nILTypeDef.NestedTypes \nNestedTypes \nILTypeDef.Events \nEvents \nILTypeDef.HasSecurity \nHasSecurity \nILTypeDef.IsAbstract \nIsAbstract"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#( .ctor )","title":"ILTypeDef.( .ctor )","content":"ILTypeDef.( .ctor ) \n( .ctor ) \n\n Functional creation of a value, immediate\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#With","title":"ILTypeDef.With","content":"ILTypeDef.With \nWith \n\n Functional update\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsSealed","title":"ILTypeDef.IsSealed","content":"ILTypeDef.IsSealed \nIsSealed \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Fields","title":"ILTypeDef.Fields","content":"ILTypeDef.Fields \nFields \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Methods","title":"ILTypeDef.Methods","content":"ILTypeDef.Methods \nMethods \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Implements","title":"ILTypeDef.Implements","content":"ILTypeDef.Implements \nImplements \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Access","title":"ILTypeDef.Access","content":"ILTypeDef.Access \nAccess \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Properties","title":"ILTypeDef.Properties","content":"ILTypeDef.Properties \nProperties \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Attributes","title":"ILTypeDef.Attributes","content":"ILTypeDef.Attributes \nAttributes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsSerializable","title":"ILTypeDef.IsSerializable","content":"ILTypeDef.IsSerializable \nIsSerializable \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsInterface","title":"ILTypeDef.IsInterface","content":"ILTypeDef.IsInterface \nIsInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#SecurityDecls","title":"ILTypeDef.SecurityDecls","content":"ILTypeDef.SecurityDecls \nSecurityDecls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#CustomAttrs","title":"ILTypeDef.CustomAttrs","content":"ILTypeDef.CustomAttrs \nCustomAttrs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#GenericParams","title":"ILTypeDef.GenericParams","content":"ILTypeDef.GenericParams \nGenericParams \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsDelegate","title":"ILTypeDef.IsDelegate","content":"ILTypeDef.IsDelegate \nIsDelegate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsClass","title":"ILTypeDef.IsClass","content":"ILTypeDef.IsClass \nIsClass \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Layout","title":"ILTypeDef.Layout","content":"ILTypeDef.Layout \nLayout \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsStructOrEnum","title":"ILTypeDef.IsStructOrEnum","content":"ILTypeDef.IsStructOrEnum \nIsStructOrEnum \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Encoding","title":"ILTypeDef.Encoding","content":"ILTypeDef.Encoding \nEncoding \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Extends","title":"ILTypeDef.Extends","content":"ILTypeDef.Extends \nExtends \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsComInterop","title":"ILTypeDef.IsComInterop","content":"ILTypeDef.IsComInterop \nIsComInterop \n\n Class or interface generated for COM interop.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsStruct","title":"ILTypeDef.IsStruct","content":"ILTypeDef.IsStruct \nIsStruct \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsEnum","title":"ILTypeDef.IsEnum","content":"ILTypeDef.IsEnum \nIsEnum \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#MethodImpls","title":"ILTypeDef.MethodImpls","content":"ILTypeDef.MethodImpls \nMethodImpls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsSpecialName","title":"ILTypeDef.IsSpecialName","content":"ILTypeDef.IsSpecialName \nIsSpecialName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Name","title":"ILTypeDef.Name","content":"ILTypeDef.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#NestedTypes","title":"ILTypeDef.NestedTypes","content":"ILTypeDef.NestedTypes \nNestedTypes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#Events","title":"ILTypeDef.Events","content":"ILTypeDef.Events \nEvents \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#HasSecurity","title":"ILTypeDef.HasSecurity","content":"ILTypeDef.HasSecurity \nHasSecurity \n\n Some classes are marked \u0022HasSecurity\u0022 even if there are no permissions attached,\n e.g. if they use SuppressUnmanagedCodeSecurityAttribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedef.html#IsAbstract","title":"ILTypeDef.IsAbstract","content":"ILTypeDef.IsAbstract \nIsAbstract \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html","title":"ILTypeDefAccess","content":"ILTypeDefAccess \n\n Type Access.\n \nILTypeDefAccess.Public \nPublic \nILTypeDefAccess.Private \nPrivate \nILTypeDefAccess.Nested \nNested"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#Public","title":"ILTypeDefAccess.Public","content":"ILTypeDefAccess.Public \nPublic \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#Private","title":"ILTypeDefAccess.Private","content":"ILTypeDefAccess.Private \nPrivate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefaccess.html#Nested","title":"ILTypeDefAccess.Nested","content":"ILTypeDefAccess.Nested \nNested \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefkind.html","title":"ILTypeDefKind","content":"ILTypeDefKind \n\n A categorization of type definitions into \u0022kinds\u0022\n \nILTypeDefKind.Class \nClass \nILTypeDefKind.ValueType \nValueType \nILTypeDefKind.Interface \nInterface \nILTypeDefKind.Enum \nEnum \nILTypeDefKind.Delegate \nDelegate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefkind.html#Class","title":"ILTypeDefKind.Class","content":"ILTypeDefKind.Class \nClass \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefkind.html#ValueType","title":"ILTypeDefKind.ValueType","content":"ILTypeDefKind.ValueType \nValueType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefkind.html#Interface","title":"ILTypeDefKind.Interface","content":"ILTypeDefKind.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefkind.html#Enum","title":"ILTypeDefKind.Enum","content":"ILTypeDefKind.Enum \nEnum \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefkind.html#Delegate","title":"ILTypeDefKind.Delegate","content":"ILTypeDefKind.Delegate \nDelegate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html","title":"ILTypeDefLayout","content":"ILTypeDefLayout \n\n Type Layout information.\n \nILTypeDefLayout.Auto \nAuto \nILTypeDefLayout.Sequential \nSequential \nILTypeDefLayout.Explicit \nExplicit"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#Auto","title":"ILTypeDefLayout.Auto","content":"ILTypeDefLayout.Auto \nAuto \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#Sequential","title":"ILTypeDefLayout.Sequential","content":"ILTypeDefLayout.Sequential \nSequential \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedeflayout.html#Explicit","title":"ILTypeDefLayout.Explicit","content":"ILTypeDefLayout.Explicit \nExplicit \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypedefs.html","title":"ILTypeDefs","content":"ILTypeDefs \n\n Tables of named type definitions.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypeinit.html","title":"ILTypeInit","content":"ILTypeInit \n\n Indicate the initialization semantics of a type.\n \nILTypeInit.BeforeField \nBeforeField \nILTypeInit.OnAny \nOnAny"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypeinit.html#BeforeField","title":"ILTypeInit.BeforeField","content":"ILTypeInit.BeforeField \nBeforeField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypeinit.html#OnAny","title":"ILTypeInit.OnAny","content":"ILTypeInit.OnAny \nOnAny \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html","title":"ILTypeRef","content":"ILTypeRef \n\n Type refs, i.e. references to types in some .NET assembly\n \nILTypeRef.BasicQualifiedName \nBasicQualifiedName \nILTypeRef.FullName \nFullName \nILTypeRef.QualifiedName \nQualifiedName \nILTypeRef.Enclosing \nEnclosing \nILTypeRef.Scope \nScope \nILTypeRef.Name \nName \nILTypeRef.Create \nCreate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#BasicQualifiedName","title":"ILTypeRef.BasicQualifiedName","content":"ILTypeRef.BasicQualifiedName \nBasicQualifiedName \n\n The name of the type in the assembly using the \u0027\u002B\u0027 notation for nested types.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#FullName","title":"ILTypeRef.FullName","content":"ILTypeRef.FullName \nFullName \n\n The name of the type in the assembly using the \u0027.\u0027 notation for nested types.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#QualifiedName","title":"ILTypeRef.QualifiedName","content":"ILTypeRef.QualifiedName \nQualifiedName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#Enclosing","title":"ILTypeRef.Enclosing","content":"ILTypeRef.Enclosing \nEnclosing \n\n The list of enclosing type names for a nested type. If non-nil then the first of these also contains the namespace.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#Scope","title":"ILTypeRef.Scope","content":"ILTypeRef.Scope \nScope \n\n Where is the type, i.e. is it in this module, in another module in this assembly or in another assembly?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#Name","title":"ILTypeRef.Name","content":"ILTypeRef.Name \nName \n\n The name of the type. This also contains the namespace if Enclosing is empty.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltyperef.html#Create","title":"ILTypeRef.Create","content":"ILTypeRef.Create \nCreate \n\n Create a ILTypeRef.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html","title":"ILTypeSpec","content":"ILTypeSpec \n\n Type specs and types.\n \nILTypeSpec.FullName \nFullName \nILTypeSpec.GenericArgs \nGenericArgs \nILTypeSpec.TypeRef \nTypeRef \nILTypeSpec.Enclosing \nEnclosing \nILTypeSpec.Scope \nScope \nILTypeSpec.Name \nName \nILTypeSpec.Create \nCreate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#FullName","title":"ILTypeSpec.FullName","content":"ILTypeSpec.FullName \nFullName \n\n The name of the type in the assembly using the \u0027.\u0027 notation for nested types.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#GenericArgs","title":"ILTypeSpec.GenericArgs","content":"ILTypeSpec.GenericArgs \nGenericArgs \n\n The type instantiation if the type is generic, otherwise empty\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#TypeRef","title":"ILTypeSpec.TypeRef","content":"ILTypeSpec.TypeRef \nTypeRef \n\n Which type is being referred to?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#Enclosing","title":"ILTypeSpec.Enclosing","content":"ILTypeSpec.Enclosing \nEnclosing \n\n The list of enclosing type names for a nested type. If non-nil then the first of these also contains the namespace.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#Scope","title":"ILTypeSpec.Scope","content":"ILTypeSpec.Scope \nScope \n\n Where is the type, i.e. is it in this module, in another module in this assembly or in another assembly?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#Name","title":"ILTypeSpec.Name","content":"ILTypeSpec.Name \nName \n\n The name of the type. This also contains the namespace if Enclosing is empty.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-iltypespec.html#Create","title":"ILTypeSpec.Create","content":"ILTypeSpec.Create \nCreate \n\n Create an ILTypeSpec.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html","title":"ILVersionInfo","content":"ILVersionInfo \n \nILVersionInfo.( .ctor ) \n( .ctor ) \nILVersionInfo.Major \nMajor \nILVersionInfo.Minor \nMinor \nILVersionInfo.Build \nBuild \nILVersionInfo.Revision \nRevision"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#( .ctor )","title":"ILVersionInfo.( .ctor )","content":"ILVersionInfo.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Major","title":"ILVersionInfo.Major","content":"ILVersionInfo.Major \nMajor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Minor","title":"ILVersionInfo.Minor","content":"ILVersionInfo.Minor \nMinor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Build","title":"ILVersionInfo.Build","content":"ILVersionInfo.Build \nBuild \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-ilversioninfo.html#Revision","title":"ILVersionInfo.Revision","content":"ILVersionInfo.Revision \nRevision \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html","title":"MethodBody","content":"MethodBody \n \nMethodBody.IL \nIL \nMethodBody.PInvoke \nPInvoke \nMethodBody.Abstract \nAbstract \nMethodBody.Native \nNative \nMethodBody.NotAvailable \nNotAvailable"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#IL","title":"MethodBody.IL","content":"MethodBody.IL \nIL \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#PInvoke","title":"MethodBody.PInvoke","content":"MethodBody.PInvoke \nPInvoke \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#Abstract","title":"MethodBody.Abstract","content":"MethodBody.Abstract \nAbstract \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#Native","title":"MethodBody.Native","content":"MethodBody.Native \nNative \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-methodbody.html#NotAvailable","title":"MethodBody.NotAvailable","content":"MethodBody.NotAvailable \nNotAvailable \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html","title":"PublicKey","content":"PublicKey \n \nPublicKey.KeyToken \nKeyToken \nPublicKey.IsKey \nIsKey \nPublicKey.Key \nKey \nPublicKey.IsKeyToken \nIsKeyToken \nPublicKey.KeyAsToken \nKeyAsToken \nPublicKey.PublicKey \nPublicKey \nPublicKey.PublicKeyToken \nPublicKeyToken"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#KeyToken","title":"PublicKey.KeyToken","content":"PublicKey.KeyToken \nKeyToken \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#IsKey","title":"PublicKey.IsKey","content":"PublicKey.IsKey \nIsKey \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#Key","title":"PublicKey.Key","content":"PublicKey.Key \nKey \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#IsKeyToken","title":"PublicKey.IsKeyToken","content":"PublicKey.IsKeyToken \nIsKeyToken \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#KeyAsToken","title":"PublicKey.KeyAsToken","content":"PublicKey.KeyAsToken \nKeyAsToken \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#PublicKey","title":"PublicKey.PublicKey","content":"PublicKey.PublicKey \nPublicKey \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-il-publickey.html#PublicKeyToken","title":"PublicKey.PublicKeyToken","content":"PublicKey.PublicKeyToken \nPublicKeyToken \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader.html","title":"ILBinaryReader","content":"ILBinaryReader \n\n Binary reader.  Read a .NET binary and concert it to Abstract IL data\n structures.\n \n NOTE:\n   - The metadata in the loaded modules will be relative to \n     those modules, e.g. ILScopeRef.Local will mean \u0022local to \n     that module\u0022.  You must use [rescopeILType] etc. if you want to include \n     (i.e. copy) the metadata into your own module. \n\n   - PDB (debug info) reading/folding:\n     The PDB reader is invoked if you give a PDB path \n     This indicates if you want to search for PDB files and have the \n     reader fold them in.  You cannot currently name the pdb file \n     directly - you can only name the path.  Giving \u0022None\u0022 says \n     \u0022do not read the PDB file even if one exists\u0022. \n \n     The debug info appears primarily as I_seqpoint annotations in \n     the instruction streams.  Unfortunately the PDB information does\n     not, for example, tell you how to map back from a class definition\n     to a source code line number - you will need to explicitly search\n     for a sequence point in the code for one of the methods of the \n     class.  That is not particularly satisfactory, and it may be\n     a good idea to build a small library which extracts the information\n     you need.  \n \nILBinaryReader.Shim \nShim \nILBinaryReader.ILModuleReader \nILModuleReader \nILBinaryReader.ILReaderOptions \nILReaderOptions \nILBinaryReader.ILReaderTryGetMetadataSnapshot \nILReaderTryGetMetadataSnapshot \nILBinaryReader.MetadataOnlyFlag \nMetadataOnlyFlag \nILBinaryReader.ReduceMemoryFlag \nReduceMemoryFlag"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-shim.html","title":"Shim","content":"Shim \n\n The public API hook for changing the IL assembly reader, used by Resharper\n \nShim.IAssemblyReader \nIAssemblyReader \nShim.AssemblyReader \nAssemblyReader"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-shim.html#AssemblyReader","title":"Shim.AssemblyReader","content":"Shim.AssemblyReader \nAssemblyReader \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-shim-iassemblyreader.html","title":"IAssemblyReader","content":"IAssemblyReader \n \nIAssemblyReader.GetILModuleReader \nGetILModuleReader"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-shim-iassemblyreader.html#GetILModuleReader","title":"IAssemblyReader.GetILModuleReader","content":"IAssemblyReader.GetILModuleReader \nGetILModuleReader \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilmodulereader.html","title":"ILModuleReader","content":"ILModuleReader \n\n Represents a reader of the metadata of a .NET binary.  May also give some values (e.g. IL code) from the PE file\n if it was provided.\n \nILModuleReader.ILModuleDef \nILModuleDef \nILModuleReader.ILAssemblyRefs \nILAssemblyRefs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilmodulereader.html#ILModuleDef","title":"ILModuleReader.ILModuleDef","content":"ILModuleReader.ILModuleDef \nILModuleDef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilmodulereader.html#ILAssemblyRefs","title":"ILModuleReader.ILAssemblyRefs","content":"ILModuleReader.ILAssemblyRefs \nILAssemblyRefs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreaderoptions.html","title":"ILReaderOptions","content":"ILReaderOptions \n \nILReaderOptions.pdbDirPath \npdbDirPath \nILReaderOptions.reduceMemoryUsage \nreduceMemoryUsage \nILReaderOptions.metadataOnly \nmetadataOnly \nILReaderOptions.tryGetMetadataSnapshot \ntryGetMetadataSnapshot"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreaderoptions.html#pdbDirPath","title":"ILReaderOptions.pdbDirPath","content":"ILReaderOptions.pdbDirPath \npdbDirPath \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreaderoptions.html#reduceMemoryUsage","title":"ILReaderOptions.reduceMemoryUsage","content":"ILReaderOptions.reduceMemoryUsage \nreduceMemoryUsage \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreaderoptions.html#metadataOnly","title":"ILReaderOptions.metadataOnly","content":"ILReaderOptions.metadataOnly \nmetadataOnly \n\n Only open a metadata reader for the metadata portion of the .NET binary without keeping alive any data associated with the PE reader\n - IL code will not be available (mdBody in ILMethodDef will return NotAvailable)\n - Managed resources will be reported back as ILResourceLocation.LocalIn (as always)\n - Native resources will not be available (none will be returned)\n - Static data associated with fields will not be available\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreaderoptions.html#tryGetMetadataSnapshot","title":"ILReaderOptions.tryGetMetadataSnapshot","content":"ILReaderOptions.tryGetMetadataSnapshot \ntryGetMetadataSnapshot \n\n A function to call to try to get an object that acts as a snapshot of the metadata section of a .NET binary,\n and from which we can read the metadata. Only used when metadataOnly=true.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-ilreadertrygetmetadatasnapshot.html","title":"ILReaderTryGetMetadataSnapshot","content":"ILReaderTryGetMetadataSnapshot \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-metadataonlyflag.html","title":"MetadataOnlyFlag","content":"MetadataOnlyFlag \n \nMetadataOnlyFlag.Yes \nYes \nMetadataOnlyFlag.No \nNo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-metadataonlyflag.html#Yes","title":"MetadataOnlyFlag.Yes","content":"MetadataOnlyFlag.Yes \nYes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-metadataonlyflag.html#No","title":"MetadataOnlyFlag.No","content":"MetadataOnlyFlag.No \nNo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-reducememoryflag.html","title":"ReduceMemoryFlag","content":"ReduceMemoryFlag \n \nReduceMemoryFlag.Yes \nYes \nReduceMemoryFlag.No \nNo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-reducememoryflag.html#Yes","title":"ReduceMemoryFlag.Yes","content":"ReduceMemoryFlag.Yes \nYes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-abstractil-ilbinaryreader-reducememoryflag.html#No","title":"ReduceMemoryFlag.No","content":"ReduceMemoryFlag.No \nNo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacymsbuildreferenceresolver.html","title":"LegacyMSBuildReferenceResolver","content":"LegacyMSBuildReferenceResolver \n \nLegacyMSBuildReferenceResolver.getResolver \ngetResolver"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacymsbuildreferenceresolver.html#getResolver","title":"LegacyMSBuildReferenceResolver.getResolver","content":"LegacyMSBuildReferenceResolver.getResolver \ngetResolver \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileanswer.html","title":"FSharpCheckFileAnswer","content":"FSharpCheckFileAnswer \n\n The result of calling TypeCheckResult including the possibility of abort and background compiler not caught up.\n \nFSharpCheckFileAnswer.Aborted \nAborted \nFSharpCheckFileAnswer.Succeeded \nSucceeded"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileanswer.html#Aborted","title":"FSharpCheckFileAnswer.Aborted","content":"FSharpCheckFileAnswer.Aborted \nAborted \n\n Aborted because cancellation caused an abandonment of the operation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileanswer.html#Succeeded","title":"FSharpCheckFileAnswer.Succeeded","content":"FSharpCheckFileAnswer.Succeeded \nSucceeded \n\n Success \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html","title":"FSharpCheckFileResults","content":"FSharpCheckFileResults \n\n A handle to the results of CheckFileInProject.\n \nFSharpCheckFileResults.GenerateSignature \nGenerateSignature \nFSharpCheckFileResults.GetAllUsesOfAllSymbolsInFile \nGetAllUsesOfAllSymbolsInFile \nFSharpCheckFileResults.GetDeclarationListInfo \nGetDeclarationListInfo \nFSharpCheckFileResults.GetDeclarationListSymbols \nGetDeclarationListSymbols \nFSharpCheckFileResults.GetDeclarationLocation \nGetDeclarationLocation \nFSharpCheckFileResults.GetDescription \nGetDescription \nFSharpCheckFileResults.GetDisplayContextForPos \nGetDisplayContextForPos \nFSharpCheckFileResults.GetF1Keyword \nGetF1Keyword \nFSharpCheckFileResults.GetFormatSpecifierLocations \nGetFormatSpecifierLocations \nFSharpCheckFileResults.GetFormatSpecifierLocationsAndArity \nGetFormatSpecifierLocationsAndArity \nFSharpCheckFileResults.GetMethods \nGetMethods \nFSharpCheckFileResults.GetMethodsAsSymbols \nGetMethodsAsSymbols \nFSharpCheckFileResults.GetSemanticClassification \nGetSemanticClassification \nFSharpCheckFileResults.GetSymbolUseAtLocation \nGetSymbolUseAtLocation \nFSharpCheckFileResults.GetToolTip \nGetToolTip \nFSharpCheckFileResults.GetUsesOfSymbolInFile \nGetUsesOfSymbolInFile \nFSharpCheckFileResults.IsRelativeNameResolvableFromSymbol \nIsRelativeNameResolvableFromSymbol \nFSharpCheckFileResults.PartialAssemblySignature \nPartialAssemblySignature \nFSharpCheckFileResults.OpenDeclarations \nOpenDeclarations \nFSharpCheckFileResults.HasFullTypeCheckInfo \nHasFullTypeCheckInfo \nFSharpCheckFileResults.ImplementationFile \nImplementationFile \nFSharpCheckFileResults.DependencyFiles \nDependencyFiles \nFSharpCheckFileResults.ProjectContext \nProjectContext \nFSharpCheckFileResults.Diagnostics \nDiagnostics"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GenerateSignature","title":"FSharpCheckFileResults.GenerateSignature","content":"FSharpCheckFileResults.GenerateSignature \nGenerateSignature \n\n Lays out and returns the formatted signature for the typechecked file as source text.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetAllUsesOfAllSymbolsInFile","title":"FSharpCheckFileResults.GetAllUsesOfAllSymbolsInFile","content":"FSharpCheckFileResults.GetAllUsesOfAllSymbolsInFile \nGetAllUsesOfAllSymbolsInFile \n\n Get all textual usages of all symbols throughout the file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetDeclarationListInfo","title":"FSharpCheckFileResults.GetDeclarationListInfo","content":"FSharpCheckFileResults.GetDeclarationListInfo \nGetDeclarationListInfo \nGet the items for a declaration list"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetDeclarationListSymbols","title":"FSharpCheckFileResults.GetDeclarationListSymbols","content":"FSharpCheckFileResults.GetDeclarationListSymbols \nGetDeclarationListSymbols \nGet the items for a declaration list in FSharpSymbol format"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetDeclarationLocation","title":"FSharpCheckFileResults.GetDeclarationLocation","content":"FSharpCheckFileResults.GetDeclarationLocation \nGetDeclarationLocation \nResolve the names at the given location to the declaration location of the corresponding construct."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetDescription","title":"FSharpCheckFileResults.GetDescription","content":"FSharpCheckFileResults.GetDescription \nGetDescription \nCompute a formatted tooltip for the given symbol at position"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetDisplayContextForPos","title":"FSharpCheckFileResults.GetDisplayContextForPos","content":"FSharpCheckFileResults.GetDisplayContextForPos \nGetDisplayContextForPos \n\n Find the most precise display environment for the given line and column.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetF1Keyword","title":"FSharpCheckFileResults.GetF1Keyword","content":"FSharpCheckFileResults.GetF1Keyword \nGetF1Keyword \nCompute the Visual Studio F1-help key identifier for the given location, based on name resolution results"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetFormatSpecifierLocations","title":"FSharpCheckFileResults.GetFormatSpecifierLocations","content":"FSharpCheckFileResults.GetFormatSpecifierLocations \nGetFormatSpecifierLocations \nGet the locations of format specifiers"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetFormatSpecifierLocationsAndArity","title":"FSharpCheckFileResults.GetFormatSpecifierLocationsAndArity","content":"FSharpCheckFileResults.GetFormatSpecifierLocationsAndArity \nGetFormatSpecifierLocationsAndArity \nGet the locations of and number of arguments associated with format specifiers"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetMethods","title":"FSharpCheckFileResults.GetMethods","content":"FSharpCheckFileResults.GetMethods \nGetMethods \nCompute a set of method overloads to show in a dialog relevant to the given code location."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetMethodsAsSymbols","title":"FSharpCheckFileResults.GetMethodsAsSymbols","content":"FSharpCheckFileResults.GetMethodsAsSymbols \nGetMethodsAsSymbols \nCompute a set of method overloads to show in a dialog relevant to the given code location.  The resulting method overloads are returned as symbols."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetSemanticClassification","title":"FSharpCheckFileResults.GetSemanticClassification","content":"FSharpCheckFileResults.GetSemanticClassification \nGetSemanticClassification \nGet any extra colorization info that is available after the typecheck"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetSymbolUseAtLocation","title":"FSharpCheckFileResults.GetSymbolUseAtLocation","content":"FSharpCheckFileResults.GetSymbolUseAtLocation \nGetSymbolUseAtLocation \nResolve the names at the given location to a use of symbol."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetToolTip","title":"FSharpCheckFileResults.GetToolTip","content":"FSharpCheckFileResults.GetToolTip \nGetToolTip \nCompute a formatted tooltip for the given location"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#GetUsesOfSymbolInFile","title":"FSharpCheckFileResults.GetUsesOfSymbolInFile","content":"FSharpCheckFileResults.GetUsesOfSymbolInFile \nGetUsesOfSymbolInFile \n\n Get the textual usages that resolved to the given symbol throughout the file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#IsRelativeNameResolvableFromSymbol","title":"FSharpCheckFileResults.IsRelativeNameResolvableFromSymbol","content":"FSharpCheckFileResults.IsRelativeNameResolvableFromSymbol \nIsRelativeNameResolvableFromSymbol \n\n Determines if a long ident is resolvable at a specific point.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#PartialAssemblySignature","title":"FSharpCheckFileResults.PartialAssemblySignature","content":"FSharpCheckFileResults.PartialAssemblySignature \nPartialAssemblySignature \n\n Get a view of the contents of the assembly up to and including the file just checked\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#OpenDeclarations","title":"FSharpCheckFileResults.OpenDeclarations","content":"FSharpCheckFileResults.OpenDeclarations \nOpenDeclarations \n\n Open declarations in the file, including auto open modules.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#HasFullTypeCheckInfo","title":"FSharpCheckFileResults.HasFullTypeCheckInfo","content":"FSharpCheckFileResults.HasFullTypeCheckInfo \nHasFullTypeCheckInfo \n\n Indicates whether type checking successfully occurred with some results returned. If false, indicates that \n an unrecoverable error in earlier checking/parsing/resolution steps.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#ImplementationFile","title":"FSharpCheckFileResults.ImplementationFile","content":"FSharpCheckFileResults.ImplementationFile \nImplementationFile \n\n Represents complete typechecked implementation file, including its typechecked signatures if any.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#DependencyFiles","title":"FSharpCheckFileResults.DependencyFiles","content":"FSharpCheckFileResults.DependencyFiles \nDependencyFiles \n\n Indicates the set of files which must be watched to accurately track changes that affect these results,\n Clients interested in reacting to updates to these files should watch these files and take actions as described\n in the documentation for compiler service.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#ProjectContext","title":"FSharpCheckFileResults.ProjectContext","content":"FSharpCheckFileResults.ProjectContext \nProjectContext \n\n Get the resolution of the ProjectOptions \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckfileresults.html#Diagnostics","title":"FSharpCheckFileResults.Diagnostics","content":"FSharpCheckFileResults.Diagnostics \nDiagnostics \n\n The errors returned by parsing a source file.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html","title":"FSharpCheckProjectResults","content":"FSharpCheckProjectResults \n\n A handle to the results of CheckFileInProject.\n \nFSharpCheckProjectResults.GetAllUsesOfAllSymbols \nGetAllUsesOfAllSymbols \nFSharpCheckProjectResults.GetOptimizedAssemblyContents \nGetOptimizedAssemblyContents \nFSharpCheckProjectResults.GetUsesOfSymbol \nGetUsesOfSymbol \nFSharpCheckProjectResults.AssemblyContents \nAssemblyContents \nFSharpCheckProjectResults.AssemblySignature \nAssemblySignature \nFSharpCheckProjectResults.DependencyFiles \nDependencyFiles \nFSharpCheckProjectResults.HasCriticalErrors \nHasCriticalErrors \nFSharpCheckProjectResults.ProjectContext \nProjectContext \nFSharpCheckProjectResults.Diagnostics \nDiagnostics"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#GetAllUsesOfAllSymbols","title":"FSharpCheckProjectResults.GetAllUsesOfAllSymbols","content":"FSharpCheckProjectResults.GetAllUsesOfAllSymbols \nGetAllUsesOfAllSymbols \n\n Get all textual usages of all symbols throughout the project\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#GetOptimizedAssemblyContents","title":"FSharpCheckProjectResults.GetOptimizedAssemblyContents","content":"FSharpCheckProjectResults.GetOptimizedAssemblyContents \nGetOptimizedAssemblyContents \n\n Get an optimized view of the overall contents of the assembly. Only valid to use if HasCriticalErrors is false.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#GetUsesOfSymbol","title":"FSharpCheckProjectResults.GetUsesOfSymbol","content":"FSharpCheckProjectResults.GetUsesOfSymbol \nGetUsesOfSymbol \n\n Get the textual usages that resolved to the given symbol throughout the project\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#AssemblyContents","title":"FSharpCheckProjectResults.AssemblyContents","content":"FSharpCheckProjectResults.AssemblyContents \nAssemblyContents \n\n Get a view of the overall contents of the assembly. Only valid to use if HasCriticalErrors is false.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#AssemblySignature","title":"FSharpCheckProjectResults.AssemblySignature","content":"FSharpCheckProjectResults.AssemblySignature \nAssemblySignature \n\n Get a view of the overall signature of the assembly. Only valid to use if HasCriticalErrors is false.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#DependencyFiles","title":"FSharpCheckProjectResults.DependencyFiles","content":"FSharpCheckProjectResults.DependencyFiles \nDependencyFiles \n\n Indicates the set of files which must be watched to accurately track changes that affect these results,\n Clients interested in reacting to updates to these files should watch these files and take actions as described\n in the documentation for compiler service.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#HasCriticalErrors","title":"FSharpCheckProjectResults.HasCriticalErrors","content":"FSharpCheckProjectResults.HasCriticalErrors \nHasCriticalErrors \n\n Indicates if critical errors existed in the project options\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#ProjectContext","title":"FSharpCheckProjectResults.ProjectContext","content":"FSharpCheckProjectResults.ProjectContext \nProjectContext \n\n Get the resolution of the ProjectOptions \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpcheckprojectresults.html#Diagnostics","title":"FSharpCheckProjectResults.Diagnostics","content":"FSharpCheckProjectResults.Diagnostics \nDiagnostics \n\n The errors returned by processing the project\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html","title":"FSharpChecker","content":"FSharpChecker \n\n Used to parse and check F# source code.\n \nFSharpChecker.CheckFileInProject \nCheckFileInProject \nFSharpChecker.CheckFileInProjectAllowingStaleCachedResults \nCheckFileInProjectAllowingStaleCachedResults \nFSharpChecker.ClearCache \nClearCache \nFSharpChecker.ClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients \nClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients \nFSharpChecker.Compile \nCompile \nFSharpChecker.Compile \nCompile \nFSharpChecker.CompileToDynamicAssembly \nCompileToDynamicAssembly \nFSharpChecker.CompileToDynamicAssembly \nCompileToDynamicAssembly \nFSharpChecker.FindBackgroundReferencesInFile \nFindBackgroundReferencesInFile \nFSharpChecker.GetBackgroundCheckResultsForFileInProject \nGetBackgroundCheckResultsForFileInProject \nFSharpChecker.GetBackgroundParseResultsForFileInProject \nGetBackgroundParseResultsForFileInProject \nFSharpChecker.GetBackgroundSemanticClassificationForFile \nGetBackgroundSemanticClassificationForFile \nFSharpChecker.GetParsingOptionsFromCommandLineArgs \nGetParsingOptionsFromCommandLineArgs \nFSharpChecker.GetParsingOptionsFromCommandLineArgs \nGetParsingOptionsFromCommandLineArgs \nFSharpChecker.GetParsingOptionsFromProjectOptions \nGetParsingOptionsFromProjectOptions \nFSharpChecker.GetProjectOptionsFromCommandLineArgs \nGetProjectOptionsFromCommandLineArgs \nFSharpChecker.GetProjectOptionsFromScript \nGetProjectOptionsFromScript \nFSharpChecker.InvalidateAll \nInvalidateAll \nFSharpChecker.InvalidateConfiguration \nInvalidateConfiguration \nFSharpChecker.MatchBraces \nMatchBraces \nFSharpChecker.MatchBraces \nMatchBraces \nFSharpChecker.NotifyProjectCleaned \nNotifyProjectCleaned \nFSharpChecker.ParseAndCheckFileInProject \nParseAndCheckFileInProject \nFSharpChecker.ParseAndCheckProject \nParseAndCheckProject \nFSharpChecker.ParseFile \nParseFile \nFSharpChecker.ParseFileInProject \nParseFileInProject \nFSharpChecker.TokenizeFile \nTokenizeFile \nFSharpChecker.TokenizeLine \nTokenizeLine \nFSharpChecker.TryGetRecentCheckResultsForFile \nTryGetRecentCheckResultsForFile \nFSharpChecker.BeforeBackgroundFileCheck \nBeforeBackgroundFileCheck \nFSharpChecker.ProjectChecked \nProjectChecked \nFSharpChecker.FileParsed \nFileParsed \nFSharpChecker.FileChecked \nFileChecked \nFSharpChecker.Create \nCreate \nFSharpChecker.ActualCheckFileCount \nActualCheckFileCount \nFSharpChecker.ActualParseFileCount \nActualParseFileCount \nFSharpChecker.Instance \nInstance"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#CheckFileInProject","title":"FSharpChecker.CheckFileInProject","content":"FSharpChecker.CheckFileInProject \nCheckFileInProject \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\n   Check a source code file, returning a handle to the results\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n    Note: all files except the one being checked are read from the FileSystem API\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n   Return FSharpCheckFileAnswer.Aborted if a parse tree was not available.\n \u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#CheckFileInProjectAllowingStaleCachedResults","title":"FSharpChecker.CheckFileInProjectAllowingStaleCachedResults","content":"FSharpChecker.CheckFileInProjectAllowingStaleCachedResults \nCheckFileInProjectAllowingStaleCachedResults \n\u003Cp class=\u0027fsdocs-para\u0027\u003ECheck a source code file, returning a handle to the results of the parse including\n the reconstructed types in the file.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files except the one being checked are read from the FileSystem API\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003ENote: returns NoAntecedent if the background builder is not yet done preparing the type check context for the\n file (e.g. loading references and parsing/checking files in the project that this file depends upon).\n In this case, the caller can either retry, or wait for FileTypeCheckStateIsDirty to be raised for this file.\n \u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ClearCache","title":"FSharpChecker.ClearCache","content":"FSharpChecker.ClearCache \nClearCache \nClear the internal cache of the given projects."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients","title":"FSharpChecker.ClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients","content":"FSharpChecker.ClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients \nClearLanguageServiceRootCachesAndCollectAndFinalizeAllTransients \n\n Flush all caches and garbage collect\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#Compile","title":"FSharpChecker.Compile","content":"FSharpChecker.Compile \nCompile \n\n TypeCheck and compile provided AST\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#Compile","title":"FSharpChecker.Compile","content":"FSharpChecker.Compile \nCompile \n\n Compile using the given flags.  Source files names are resolved via the FileSystem API.\n The output file must be given by a -o flag.\n The first argument is ignored and can just be \u0022fsc.exe\u0022.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#CompileToDynamicAssembly","title":"FSharpChecker.CompileToDynamicAssembly","content":"FSharpChecker.CompileToDynamicAssembly \nCompileToDynamicAssembly \n\n TypeCheck and compile provided AST\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#CompileToDynamicAssembly","title":"FSharpChecker.CompileToDynamicAssembly","content":"FSharpChecker.CompileToDynamicAssembly \nCompileToDynamicAssembly \n\n Compiles to a dynamic assembly using the given flags.\n\n The first argument is ignored and can just be \u0022fsc.exe\u0022.\n\n Any source files names are resolved via the FileSystem API. An output file name must be given by a -o flag, but this will not\n be written - instead a dynamic assembly will be created and loaded.\n\n If the \u0027execute\u0027 parameter is given the entry points for the code are executed and\n the given TextWriters are used for the stdout and stderr streams respectively. In this\n case, a global setting is modified during the execution.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#FindBackgroundReferencesInFile","title":"FSharpChecker.FindBackgroundReferencesInFile","content":"FSharpChecker.FindBackgroundReferencesInFile \nFindBackgroundReferencesInFile \n\u003Cp class=\u0027fsdocs-para\u0027\u003EOptimized find references for a given symbol in a file of project.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API, including the file being checked.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003ECan cause a second type-check when \u0060enablePartialTypeChecking\u0060 is true on the FSharpChecker.\u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetBackgroundCheckResultsForFileInProject","title":"FSharpChecker.GetBackgroundCheckResultsForFileInProject","content":"FSharpChecker.GetBackgroundCheckResultsForFileInProject \nGetBackgroundCheckResultsForFileInProject \n\u003Cp class=\u0027fsdocs-para\u0027\u003ELike CheckFileInProject, but uses the existing results from the background builder.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API, including the file being checked.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003ECan cause a second type-check when \u0060enablePartialTypeChecking\u0060 is true on the FSharpChecker.\u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetBackgroundParseResultsForFileInProject","title":"FSharpChecker.GetBackgroundParseResultsForFileInProject","content":"FSharpChecker.GetBackgroundParseResultsForFileInProject \nGetBackgroundParseResultsForFileInProject \n\u003Cp class=\u0027fsdocs-para\u0027\u003ELike ParseFile, but uses results from the background builder.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API, including the file being checked.\u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetBackgroundSemanticClassificationForFile","title":"FSharpChecker.GetBackgroundSemanticClassificationForFile","content":"FSharpChecker.GetBackgroundSemanticClassificationForFile \nGetBackgroundSemanticClassificationForFile \n\u003Cp class=\u0027fsdocs-para\u0027\u003EGet semantic classification for a file.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API, including the file being checked.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003ECan cause a second type-check when \u0060enablePartialTypeChecking\u0060 is true on the FSharpChecker.\u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetParsingOptionsFromCommandLineArgs","title":"FSharpChecker.GetParsingOptionsFromCommandLineArgs","content":"FSharpChecker.GetParsingOptionsFromCommandLineArgs \nGetParsingOptionsFromCommandLineArgs \n\u003Cp class=\u0027fsdocs-para\u0027\u003EGet the FSharpParsingOptions implied by a set of command line arguments.\u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetParsingOptionsFromCommandLineArgs","title":"FSharpChecker.GetParsingOptionsFromCommandLineArgs","content":"FSharpChecker.GetParsingOptionsFromCommandLineArgs \nGetParsingOptionsFromCommandLineArgs \n\u003Cp class=\u0027fsdocs-para\u0027\u003EGet the FSharpParsingOptions implied by a set of command line arguments and list of source files.\u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetParsingOptionsFromProjectOptions","title":"FSharpChecker.GetParsingOptionsFromProjectOptions","content":"FSharpChecker.GetParsingOptionsFromProjectOptions \nGetParsingOptionsFromProjectOptions \n\u003Cp class=\u0027fsdocs-para\u0027\u003EGet the FSharpParsingOptions implied by a FSharpProjectOptions.\u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetProjectOptionsFromCommandLineArgs","title":"FSharpChecker.GetProjectOptionsFromCommandLineArgs","content":"FSharpChecker.GetProjectOptionsFromCommandLineArgs \nGetProjectOptionsFromCommandLineArgs \nGet the FSharpProjectOptions implied by a set of command line arguments."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#GetProjectOptionsFromScript","title":"FSharpChecker.GetProjectOptionsFromScript","content":"FSharpChecker.GetProjectOptionsFromScript \nGetProjectOptionsFromScript \n\u003Cp class=\u0027fsdocs-para\u0027\u003EFor a given script file, get the FSharpProjectOptions implied by the #load closure.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API, except the file being checked.\u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#InvalidateAll","title":"FSharpChecker.InvalidateAll","content":"FSharpChecker.InvalidateAll \nInvalidateAll \n\n This function is called when the entire environment is known to have changed for reasons not encoded in the ProjectOptions of any project/compilation.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#InvalidateConfiguration","title":"FSharpChecker.InvalidateConfiguration","content":"FSharpChecker.InvalidateConfiguration \nInvalidateConfiguration \n\n  This function is called when the configuration is known to have changed for reasons not encoded in the ProjectOptions.\n  For example, dependent references may have been deleted or created.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#MatchBraces","title":"FSharpChecker.MatchBraces","content":"FSharpChecker.MatchBraces \nMatchBraces \n\n   Parse a source code file, returning information about brace matching in the file.\n   Return an enumeration of the matching parenthetical tokens in the file.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#MatchBraces","title":"FSharpChecker.MatchBraces","content":"FSharpChecker.MatchBraces \nMatchBraces \n\n   Parse a source code file, returning information about brace matching in the file.\n   Return an enumeration of the matching parenthetical tokens in the file.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#NotifyProjectCleaned","title":"FSharpChecker.NotifyProjectCleaned","content":"FSharpChecker.NotifyProjectCleaned \nNotifyProjectCleaned \n\n This function is called when a project has been cleaned/rebuilt, and thus any live type providers should be refreshed.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseAndCheckFileInProject","title":"FSharpChecker.ParseAndCheckFileInProject","content":"FSharpChecker.ParseAndCheckFileInProject \nParseAndCheckFileInProject \n\u003Cp class=\u0027fsdocs-para\u0027\u003E\n   Parse and check a source code file, returning a handle to the results\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n    Note: all files except the one being checked are read from the FileSystem API\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\n   Return FSharpCheckFileAnswer.Aborted if a parse tree was not available.\n \u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseAndCheckProject","title":"FSharpChecker.ParseAndCheckProject","content":"FSharpChecker.ParseAndCheckProject \nParseAndCheckProject \n\u003Cp class=\u0027fsdocs-para\u0027\u003EParse and typecheck all files in a project.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EAll files are read from the FileSystem API\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003ECan cause a second type-check on the entire project when \u0060enablePartialTypeChecking\u0060 is true on the FSharpChecker.\u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseFile","title":"FSharpChecker.ParseFile","content":"FSharpChecker.ParseFile \nParseFile \n\n Parses a source code for a file and caches the results. Returns an AST that can be traversed for various features.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ParseFileInProject","title":"FSharpChecker.ParseFileInProject","content":"FSharpChecker.ParseFileInProject \nParseFileInProject \n\n Parses a source code for a file. Returns an AST that can be traversed for various features.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#TokenizeFile","title":"FSharpChecker.TokenizeFile","content":"FSharpChecker.TokenizeFile \nTokenizeFile \n\n Tokenize an entire file, line by line\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#TokenizeLine","title":"FSharpChecker.TokenizeLine","content":"FSharpChecker.TokenizeLine \nTokenizeLine \n\n Tokenize a single line, returning token information and a tokenization state represented by an integer\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#TryGetRecentCheckResultsForFile","title":"FSharpChecker.TryGetRecentCheckResultsForFile","content":"FSharpChecker.TryGetRecentCheckResultsForFile \nTryGetRecentCheckResultsForFile \n\n Try to get type check results for a file. This looks up the results of recent type checks of the\n same file, regardless of contents. The version tag specified in the original check of the file is returned.\n If the source of the file has changed the results returned by this function may be out of date, though may\n still be usable for generating intellisense menus and information.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#BeforeBackgroundFileCheck","title":"FSharpChecker.BeforeBackgroundFileCheck","content":"FSharpChecker.BeforeBackgroundFileCheck \nBeforeBackgroundFileCheck \n\n Notify the host that the logical type checking context for a file has now been updated internally\n and that the file has become eligible to be re-typechecked for errors.\n The event will be raised on a background thread.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ProjectChecked","title":"FSharpChecker.ProjectChecked","content":"FSharpChecker.ProjectChecked \nProjectChecked \n\n Notify the host that a project has been fully checked in the background (using file contents provided by the file system API)\n\n The event may be raised on a background thread.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#FileParsed","title":"FSharpChecker.FileParsed","content":"FSharpChecker.FileParsed \nFileParsed \n\n Raised after a parse of a file in the background analysis.\n\n The event will be raised on a background thread.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#FileChecked","title":"FSharpChecker.FileChecked","content":"FSharpChecker.FileChecked \nFileChecked \n\n Raised after a check of a file in the background analysis.\n\n The event will be raised on a background thread.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#Create","title":"FSharpChecker.Create","content":"FSharpChecker.Create \nCreate \n\n Create an instance of an FSharpChecker.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ActualCheckFileCount","title":"FSharpChecker.ActualCheckFileCount","content":"FSharpChecker.ActualCheckFileCount \nActualCheckFileCount \n\n Report a statistic for testability\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#ActualParseFileCount","title":"FSharpChecker.ActualParseFileCount","content":"FSharpChecker.ActualParseFileCount \nActualParseFileCount \n\n Report a statistic for testability\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpchecker.html#Instance","title":"FSharpChecker.Instance","content":"FSharpChecker.Instance \nInstance \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html","title":"FSharpParseFileResults","content":"FSharpParseFileResults \n\n Represents the results of parsing an F# file and a set of analysis operations based on the parse tree alone.\n \nFSharpParseFileResults.FindParameterLocations \nFindParameterLocations \nFSharpParseFileResults.GetAllArgumentsForFunctionApplicationAtPostion \nGetAllArgumentsForFunctionApplicationAtPostion \nFSharpParseFileResults.GetNavigationItems \nGetNavigationItems \nFSharpParseFileResults.IsBindingALambdaAtPosition \nIsBindingALambdaAtPosition \nFSharpParseFileResults.IsPosContainedInApplication \nIsPosContainedInApplication \nFSharpParseFileResults.IsPositionContainedInACurriedParameter \nIsPositionContainedInACurriedParameter \nFSharpParseFileResults.IsTypeAnnotationGivenAtPosition \nIsTypeAnnotationGivenAtPosition \nFSharpParseFileResults.TryIdentOfPipelineContainingPosAndNumArgsApplied \nTryIdentOfPipelineContainingPosAndNumArgsApplied \nFSharpParseFileResults.TryRangeOfExprInYieldOrReturn \nTryRangeOfExprInYieldOrReturn \nFSharpParseFileResults.TryRangeOfExpressionBeingDereferencedContainingPos \nTryRangeOfExpressionBeingDereferencedContainingPos \nFSharpParseFileResults.TryRangeOfFunctionOrMethodBeingApplied \nTryRangeOfFunctionOrMethodBeingApplied \nFSharpParseFileResults.TryRangeOfNameOfNearestOuterBindingContainingPos \nTryRangeOfNameOfNearestOuterBindingContainingPos \nFSharpParseFileResults.TryRangeOfParenEnclosingOpEqualsGreaterUsage \nTryRangeOfParenEnclosingOpEqualsGreaterUsage \nFSharpParseFileResults.TryRangeOfRecordExpressionContainingPos \nTryRangeOfRecordExpressionContainingPos \nFSharpParseFileResults.TryRangeOfRefCellDereferenceContainingPos \nTryRangeOfRefCellDereferenceContainingPos \nFSharpParseFileResults.ValidateBreakpointLocation \nValidateBreakpointLocation \nFSharpParseFileResults.DependencyFiles \nDependencyFiles \nFSharpParseFileResults.ParseHadErrors \nParseHadErrors \nFSharpParseFileResults.FileName \nFileName \nFSharpParseFileResults.Diagnostics \nDiagnostics \nFSharpParseFileResults.ParseTree \nParseTree"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#FindParameterLocations","title":"FSharpParseFileResults.FindParameterLocations","content":"FSharpParseFileResults.FindParameterLocations \nFindParameterLocations \n\n Notable parse info for ParameterInfo at a given location\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#GetAllArgumentsForFunctionApplicationAtPostion","title":"FSharpParseFileResults.GetAllArgumentsForFunctionApplicationAtPostion","content":"FSharpParseFileResults.GetAllArgumentsForFunctionApplicationAtPostion \nGetAllArgumentsForFunctionApplicationAtPostion \n\n Gets the ranges of all arguments, if they can be found, for a function application at the given position.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#GetNavigationItems","title":"FSharpParseFileResults.GetNavigationItems","content":"FSharpParseFileResults.GetNavigationItems \nGetNavigationItems \n\n Get declared items and the selected item at the specified location\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsBindingALambdaAtPosition","title":"FSharpParseFileResults.IsBindingALambdaAtPosition","content":"FSharpParseFileResults.IsBindingALambdaAtPosition \nIsBindingALambdaAtPosition \n\n Determines if the binding at the given position is bound to a lambda expression\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsPosContainedInApplication","title":"FSharpParseFileResults.IsPosContainedInApplication","content":"FSharpParseFileResults.IsPosContainedInApplication \nIsPosContainedInApplication \n\n Determines if the given position is inside a function or method application.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsPositionContainedInACurriedParameter","title":"FSharpParseFileResults.IsPositionContainedInACurriedParameter","content":"FSharpParseFileResults.IsPositionContainedInACurriedParameter \nIsPositionContainedInACurriedParameter \n\n Determines if the given position is contained within a curried parameter in a binding.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#IsTypeAnnotationGivenAtPosition","title":"FSharpParseFileResults.IsTypeAnnotationGivenAtPosition","content":"FSharpParseFileResults.IsTypeAnnotationGivenAtPosition \nIsTypeAnnotationGivenAtPosition \n\n Determines if the expression or pattern at the given position has a type annotation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryIdentOfPipelineContainingPosAndNumArgsApplied","title":"FSharpParseFileResults.TryIdentOfPipelineContainingPosAndNumArgsApplied","content":"FSharpParseFileResults.TryIdentOfPipelineContainingPosAndNumArgsApplied \nTryIdentOfPipelineContainingPosAndNumArgsApplied \n\n Attempts to find an Ident of a pipeline containing the given position, and the number of args already applied in that pipeline.\n For example, \u0027[1..10] |\u003E List.map \u0027 would give back the ident of \u0027|\u003E\u0027 and 1, because it applied 1 arg (the list) to \u0027List.map\u0027.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfExprInYieldOrReturn","title":"FSharpParseFileResults.TryRangeOfExprInYieldOrReturn","content":"FSharpParseFileResults.TryRangeOfExprInYieldOrReturn \nTryRangeOfExprInYieldOrReturn \n\n Attempts to find the range of an expression \u0060expr\u0060 contained in a \u0060yield expr\u0060  or \u0060return expr\u0060 expression (and bang-variants).\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfExpressionBeingDereferencedContainingPos","title":"FSharpParseFileResults.TryRangeOfExpressionBeingDereferencedContainingPos","content":"FSharpParseFileResults.TryRangeOfExpressionBeingDereferencedContainingPos \nTryRangeOfExpressionBeingDereferencedContainingPos \n\n Gets the range of an expression being dereferenced. For \u0060!expr\u0060, gives the range of \u0060expr\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfFunctionOrMethodBeingApplied","title":"FSharpParseFileResults.TryRangeOfFunctionOrMethodBeingApplied","content":"FSharpParseFileResults.TryRangeOfFunctionOrMethodBeingApplied \nTryRangeOfFunctionOrMethodBeingApplied \n\n Attempts to find the range of a function or method that is being applied. Also accounts for functions in pipelines.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfNameOfNearestOuterBindingContainingPos","title":"FSharpParseFileResults.TryRangeOfNameOfNearestOuterBindingContainingPos","content":"FSharpParseFileResults.TryRangeOfNameOfNearestOuterBindingContainingPos \nTryRangeOfNameOfNearestOuterBindingContainingPos \n\n Attempts to find the range of the name of the nearest outer binding that contains a given position.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfParenEnclosingOpEqualsGreaterUsage","title":"FSharpParseFileResults.TryRangeOfParenEnclosingOpEqualsGreaterUsage","content":"FSharpParseFileResults.TryRangeOfParenEnclosingOpEqualsGreaterUsage \nTryRangeOfParenEnclosingOpEqualsGreaterUsage \n\n Attempts to find the range of an attempted lambda expression or pattern, the argument range, and the expr range when writing a C#-style \u0022lambda\u0022 (which is actually an operator application)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfRecordExpressionContainingPos","title":"FSharpParseFileResults.TryRangeOfRecordExpressionContainingPos","content":"FSharpParseFileResults.TryRangeOfRecordExpressionContainingPos \nTryRangeOfRecordExpressionContainingPos \n\n Attempts to find the range of a record expression containing the given position.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#TryRangeOfRefCellDereferenceContainingPos","title":"FSharpParseFileResults.TryRangeOfRefCellDereferenceContainingPos","content":"FSharpParseFileResults.TryRangeOfRefCellDereferenceContainingPos \nTryRangeOfRefCellDereferenceContainingPos \n\n Given the position of an expression, attempts to find the range of the\n \u0027!\u0027 in a derefence operation of that expression, like:\n \u0027!expr\u0027, \u0027!(expr)\u0027, etc.\n "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#ValidateBreakpointLocation","title":"FSharpParseFileResults.ValidateBreakpointLocation","content":"FSharpParseFileResults.ValidateBreakpointLocation \nValidateBreakpointLocation \n\n Return the inner-most range associated with a possible breakpoint location\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#DependencyFiles","title":"FSharpParseFileResults.DependencyFiles","content":"FSharpParseFileResults.DependencyFiles \nDependencyFiles \n\n When these files change then the build is invalid\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#ParseHadErrors","title":"FSharpParseFileResults.ParseHadErrors","content":"FSharpParseFileResults.ParseHadErrors \nParseHadErrors \n\n Indicates if any errors occurred during the parse\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#FileName","title":"FSharpParseFileResults.FileName","content":"FSharpParseFileResults.FileName \nFileName \n\n Name of the file for which this information were created\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#Diagnostics","title":"FSharpParseFileResults.Diagnostics","content":"FSharpParseFileResults.Diagnostics \nDiagnostics \n\n Get the errors and warnings for the parse\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsefileresults.html#ParseTree","title":"FSharpParseFileResults.ParseTree","content":"FSharpParseFileResults.ParseTree \nParseTree \n\n The syntax tree resulting from the parse\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html","title":"FSharpParsingOptions","content":"FSharpParsingOptions \n\n Options used to determine active --define conditionals and other options relevant to parsing files in a project\n \nFSharpParsingOptions.Default \nDefault \nFSharpParsingOptions.SourceFiles \nSourceFiles \nFSharpParsingOptions.ConditionalCompilationDefines \nConditionalCompilationDefines \nFSharpParsingOptions.ErrorSeverityOptions \nErrorSeverityOptions \nFSharpParsingOptions.LangVersionText \nLangVersionText \nFSharpParsingOptions.IsInteractive \nIsInteractive \nFSharpParsingOptions.LightSyntax \nLightSyntax \nFSharpParsingOptions.CompilingFsLib \nCompilingFsLib \nFSharpParsingOptions.IsExe \nIsExe"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#Default","title":"FSharpParsingOptions.Default","content":"FSharpParsingOptions.Default \nDefault \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#SourceFiles","title":"FSharpParsingOptions.SourceFiles","content":"FSharpParsingOptions.SourceFiles \nSourceFiles \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#ConditionalCompilationDefines","title":"FSharpParsingOptions.ConditionalCompilationDefines","content":"FSharpParsingOptions.ConditionalCompilationDefines \nConditionalCompilationDefines \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#ErrorSeverityOptions","title":"FSharpParsingOptions.ErrorSeverityOptions","content":"FSharpParsingOptions.ErrorSeverityOptions \nErrorSeverityOptions \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#LangVersionText","title":"FSharpParsingOptions.LangVersionText","content":"FSharpParsingOptions.LangVersionText \nLangVersionText \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#IsInteractive","title":"FSharpParsingOptions.IsInteractive","content":"FSharpParsingOptions.IsInteractive \nIsInteractive \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#LightSyntax","title":"FSharpParsingOptions.LightSyntax","content":"FSharpParsingOptions.LightSyntax \nLightSyntax \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#CompilingFsLib","title":"FSharpParsingOptions.CompilingFsLib","content":"FSharpParsingOptions.CompilingFsLib \nCompilingFsLib \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpparsingoptions.html#IsExe","title":"FSharpParsingOptions.IsExe","content":"FSharpParsingOptions.IsExe \nIsExe \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectcontext.html","title":"FSharpProjectContext","content":"FSharpProjectContext \n\n Represents the checking context implied by the ProjectOptions \n \nFSharpProjectContext.GetReferencedAssemblies \nGetReferencedAssemblies \nFSharpProjectContext.ProjectOptions \nProjectOptions \nFSharpProjectContext.AccessibilityRights \nAccessibilityRights"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectcontext.html#GetReferencedAssemblies","title":"FSharpProjectContext.GetReferencedAssemblies","content":"FSharpProjectContext.GetReferencedAssemblies \nGetReferencedAssemblies \n\n Get the resolution and full contents of the assemblies referenced by the project options\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectcontext.html#ProjectOptions","title":"FSharpProjectContext.ProjectOptions","content":"FSharpProjectContext.ProjectOptions \nProjectOptions \n\n Get the project options\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectcontext.html#AccessibilityRights","title":"FSharpProjectContext.AccessibilityRights","content":"FSharpProjectContext.AccessibilityRights \nAccessibilityRights \n\n Get the accessibility rights for this project context w.r.t. InternalsVisibleTo attributes granting access to other assemblies\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html","title":"FSharpProjectOptions","content":"FSharpProjectOptions \nA set of information describing a project or script build configuration. \nFSharpProjectOptions.ProjectFileName \nProjectFileName \nFSharpProjectOptions.ProjectId \nProjectId \nFSharpProjectOptions.SourceFiles \nSourceFiles \nFSharpProjectOptions.OtherOptions \nOtherOptions \nFSharpProjectOptions.ReferencedProjects \nReferencedProjects \nFSharpProjectOptions.IsIncompleteTypeCheckEnvironment \nIsIncompleteTypeCheckEnvironment \nFSharpProjectOptions.UseScriptResolutionRules \nUseScriptResolutionRules \nFSharpProjectOptions.LoadTime \nLoadTime \nFSharpProjectOptions.UnresolvedReferences \nUnresolvedReferences \nFSharpProjectOptions.OriginalLoadReferences \nOriginalLoadReferences \nFSharpProjectOptions.Stamp \nStamp"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#ProjectFileName","title":"FSharpProjectOptions.ProjectFileName","content":"FSharpProjectOptions.ProjectFileName \nProjectFileName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#ProjectId","title":"FSharpProjectOptions.ProjectId","content":"FSharpProjectOptions.ProjectId \nProjectId \n\n This is the unique identifier for the project, it is case sensitive. If it\u0027s None, will key off of ProjectFileName in our caching.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#SourceFiles","title":"FSharpProjectOptions.SourceFiles","content":"FSharpProjectOptions.SourceFiles \nSourceFiles \n\n The files in the project\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#OtherOptions","title":"FSharpProjectOptions.OtherOptions","content":"FSharpProjectOptions.OtherOptions \nOtherOptions \n\n Additional command line argument options for the project. These can include additional files and references.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#ReferencedProjects","title":"FSharpProjectOptions.ReferencedProjects","content":"FSharpProjectOptions.ReferencedProjects \nReferencedProjects \n\n The command line arguments for the other projects referenced by this project, indexed by the\n exact text used in the \u0022-r:\u0022 reference in FSharpProjectOptions.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#IsIncompleteTypeCheckEnvironment","title":"FSharpProjectOptions.IsIncompleteTypeCheckEnvironment","content":"FSharpProjectOptions.IsIncompleteTypeCheckEnvironment \nIsIncompleteTypeCheckEnvironment \n\n When true, the typechecking environment is known a priori to be incomplete, for\n example when a .fs file is opened outside of a project. In this case, the number of error\n messages reported is reduced.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#UseScriptResolutionRules","title":"FSharpProjectOptions.UseScriptResolutionRules","content":"FSharpProjectOptions.UseScriptResolutionRules \nUseScriptResolutionRules \n\n When true, use the reference resolution rules for scripts rather than the rules for compiler.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#LoadTime","title":"FSharpProjectOptions.LoadTime","content":"FSharpProjectOptions.LoadTime \nLoadTime \n\n Timestamp of project/script load, used to differentiate between different instances of a project load.\n This ensures that a complete reload of the project or script type checking\n context occurs on project or script unload/reload.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#UnresolvedReferences","title":"FSharpProjectOptions.UnresolvedReferences","content":"FSharpProjectOptions.UnresolvedReferences \nUnresolvedReferences \n\n Unused in this API and should be \u0027None\u0027 when used as user-specified input\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#OriginalLoadReferences","title":"FSharpProjectOptions.OriginalLoadReferences","content":"FSharpProjectOptions.OriginalLoadReferences \nOriginalLoadReferences \n\n Unused in this API and should be \u0027[]\u0027 when used as user-specified input\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpprojectoptions.html#Stamp","title":"FSharpProjectOptions.Stamp","content":"FSharpProjectOptions.Stamp \nStamp \n\n An optional stamp to uniquely identify this set of options\n If two sets of options both have stamps, then they are considered equal\n if and only if the stamps are equal\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html","title":"FSharpReferencedProject","content":"FSharpReferencedProject \n \nFSharpReferencedProject.OutputFile \nOutputFile \nFSharpReferencedProject.CreateFSharp \nCreateFSharp \nFSharpReferencedProject.CreateFromILModuleReader \nCreateFromILModuleReader \nFSharpReferencedProject.CreatePortableExecutable \nCreatePortableExecutable"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#OutputFile","title":"FSharpReferencedProject.OutputFile","content":"FSharpReferencedProject.OutputFile \nOutputFile \n\n The fully qualified path to the output of the referenced project. This should be the same value as the \u003Cpre\u003E-r\u003C/pre\u003E\n reference in the project options for this referenced project.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#CreateFSharp","title":"FSharpReferencedProject.CreateFSharp","content":"FSharpReferencedProject.CreateFSharp \nCreateFSharp \n\n Creates a reference for an F# project. The physical data for it is stored/cached inside of the compiler service.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#CreateFromILModuleReader","title":"FSharpReferencedProject.CreateFromILModuleReader","content":"FSharpReferencedProject.CreateFromILModuleReader \nCreateFromILModuleReader \nCreates a reference from an ILModuleReader."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpreferencedproject.html#CreatePortableExecutable","title":"FSharpReferencedProject.CreatePortableExecutable","content":"FSharpReferencedProject.CreatePortableExecutable \nCreatePortableExecutable \n\n Creates a reference for any portable executable, including F#. The stream is owned by this reference.\n The stream will be automatically disposed when there are no references to FSharpReferencedProject and is GC collected.\n Once the stream is evaluated, the function that constructs the stream will no longer be referenced by anything.\n If the stream evaluation throws an exception, it will be automatically handled.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html","title":"FSharpSymbolUse","content":"FSharpSymbolUse \n\n Represents the use of an F# symbol from F# source code\n \nFSharpSymbolUse.IsFromAttribute \nIsFromAttribute \nFSharpSymbolUse.IsFromType \nIsFromType \nFSharpSymbolUse.IsFromPattern \nIsFromPattern \nFSharpSymbolUse.IsFromDefinition \nIsFromDefinition \nFSharpSymbolUse.IsFromOpenStatement \nIsFromOpenStatement \nFSharpSymbolUse.GenericArguments \nGenericArguments \nFSharpSymbolUse.IsFromComputationExpression \nIsFromComputationExpression \nFSharpSymbolUse.FileName \nFileName \nFSharpSymbolUse.IsFromDispatchSlotImplementation \nIsFromDispatchSlotImplementation \nFSharpSymbolUse.Symbol \nSymbol \nFSharpSymbolUse.DisplayContext \nDisplayContext \nFSharpSymbolUse.Range \nRange \nFSharpSymbolUse.IsPrivateToFile \nIsPrivateToFile"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromAttribute","title":"FSharpSymbolUse.IsFromAttribute","content":"FSharpSymbolUse.IsFromAttribute \nIsFromAttribute \n\n Indicates if the reference is in an attribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromType","title":"FSharpSymbolUse.IsFromType","content":"FSharpSymbolUse.IsFromType \nIsFromType \n\n Indicates if the reference is in a syntactic type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromPattern","title":"FSharpSymbolUse.IsFromPattern","content":"FSharpSymbolUse.IsFromPattern \nIsFromPattern \n\n Indicates if the reference is in a pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromDefinition","title":"FSharpSymbolUse.IsFromDefinition","content":"FSharpSymbolUse.IsFromDefinition \nIsFromDefinition \n\n Indicates if the reference is a definition for the symbol, either in a signature or implementation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromOpenStatement","title":"FSharpSymbolUse.IsFromOpenStatement","content":"FSharpSymbolUse.IsFromOpenStatement \nIsFromOpenStatement \n\n Indicates if the reference is in open statement\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#GenericArguments","title":"FSharpSymbolUse.GenericArguments","content":"FSharpSymbolUse.GenericArguments \nGenericArguments \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromComputationExpression","title":"FSharpSymbolUse.IsFromComputationExpression","content":"FSharpSymbolUse.IsFromComputationExpression \nIsFromComputationExpression \n\n Indicates if the reference is either a builder or a custom operation in a computation expression\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#FileName","title":"FSharpSymbolUse.FileName","content":"FSharpSymbolUse.FileName \nFileName \n\n The file name the reference occurs in \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsFromDispatchSlotImplementation","title":"FSharpSymbolUse.IsFromDispatchSlotImplementation","content":"FSharpSymbolUse.IsFromDispatchSlotImplementation \nIsFromDispatchSlotImplementation \n\n Indicates if the reference is via the member being implemented in a class or object expression\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#Symbol","title":"FSharpSymbolUse.Symbol","content":"FSharpSymbolUse.Symbol \nSymbol \n\n The symbol referenced\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#DisplayContext","title":"FSharpSymbolUse.DisplayContext","content":"FSharpSymbolUse.DisplayContext \nDisplayContext \n\n The display context active at the point where the symbol is used. Can be passed to FSharpType.Format\n and other methods to format items in a way that is suitable for a specific source code location.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#Range","title":"FSharpSymbolUse.Range","content":"FSharpSymbolUse.Range \nRange \n\n The range of text representing the reference to the symbol\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpsymboluse.html#IsPrivateToFile","title":"FSharpSymbolUse.IsPrivateToFile","content":"FSharpSymbolUse.IsPrivateToFile \nIsPrivateToFile \n\n Indicates if the FSharpSymbolUse is declared as private\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-fsharpunresolvedreferencesset.html","title":"FSharpUnresolvedReferencesSet","content":"FSharpUnresolvedReferencesSet \nUnused in this API"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-codeanalysis-legacyreferenceresolver.html","title":"LegacyReferenceResolver","content":"LegacyReferenceResolver \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-assemblyresolutionprobe.html","title":"AssemblyResolutionProbe","content":"AssemblyResolutionProbe \n\n Signature for ResolutionProbe callback\n host implements this, it\u0027s job is to return a list of assembly paths to probe.\n \nAssemblyResolutionProbe.Invoke \nInvoke"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-assemblyresolutionprobe.html#Invoke","title":"AssemblyResolutionProbe.Invoke","content":"AssemblyResolutionProbe.Invoke \nInvoke \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-assemblyresolvehandler.html","title":"AssemblyResolveHandler","content":"AssemblyResolveHandler \n\n Handle Assembly resolution\n \nAssemblyResolveHandler.( .ctor ) \n( .ctor )"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-assemblyresolvehandler.html#( .ctor )","title":"AssemblyResolveHandler.( .ctor )","content":"AssemblyResolveHandler.( .ctor ) \n( .ctor ) \n\n Construct a new DependencyProvider\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html","title":"DependencyProvider","content":"DependencyProvider \n\n Provides DependencyManagement functions.\n\n The class incrementally collects IDependencyManagerProvider, indexed by key, and \n queries them.  These are found and instantiated with respect to the compilerTools and outputDir\n provided each time the TryFindDependencyManagerByKey and TryFindDependencyManagerInPath are\n executed, which are assumed to be invariant over the lifetime of the DependencyProvider.\n \nDependencyProvider.( .ctor ) \n( .ctor ) \nDependencyProvider.( .ctor ) \n( .ctor ) \nDependencyProvider.( .ctor ) \n( .ctor ) \nDependencyProvider.CreatePackageManagerUnknownError \nCreatePackageManagerUnknownError \nDependencyProvider.GetRegisteredDependencyManagerHelpText \nGetRegisteredDependencyManagerHelpText \nDependencyProvider.Resolve \nResolve \nDependencyProvider.TryFindDependencyManagerByKey \nTryFindDependencyManagerByKey \nDependencyProvider.TryFindDependencyManagerInPath \nTryFindDependencyManagerInPath"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#( .ctor )","title":"DependencyProvider.( .ctor )","content":"DependencyProvider.( .ctor ) \n( .ctor ) \n\n Construct a new DependencyProvider with managed and native resolution\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#( .ctor )","title":"DependencyProvider.( .ctor )","content":"DependencyProvider.( .ctor ) \n( .ctor ) \n\n Construct a new DependencyProvider with only native resolution\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#( .ctor )","title":"DependencyProvider.( .ctor )","content":"DependencyProvider.( .ctor ) \n( .ctor ) \n\n Construct a new DependencyProvider with no dynamic load handlers (only for compilation/analysis)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#CreatePackageManagerUnknownError","title":"DependencyProvider.CreatePackageManagerUnknownError","content":"DependencyProvider.CreatePackageManagerUnknownError \nCreatePackageManagerUnknownError \n\n Returns a formatted error message for the host to present\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#GetRegisteredDependencyManagerHelpText","title":"DependencyProvider.GetRegisteredDependencyManagerHelpText","content":"DependencyProvider.GetRegisteredDependencyManagerHelpText \nGetRegisteredDependencyManagerHelpText \n\n Returns a formatted help messages for registered dependencymanagers for the host to present\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#Resolve","title":"DependencyProvider.Resolve","content":"DependencyProvider.Resolve \nResolve \n\n Resolve reference for a list of package manager lines\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#TryFindDependencyManagerByKey","title":"DependencyProvider.TryFindDependencyManagerByKey","content":"DependencyProvider.TryFindDependencyManagerByKey \nTryFindDependencyManagerByKey \n\n Fetch a dependencymanager that supports a specific key\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-dependencyprovider.html#TryFindDependencyManagerInPath","title":"DependencyProvider.TryFindDependencyManagerInPath","content":"DependencyProvider.TryFindDependencyManagerInPath \nTryFindDependencyManagerInPath \n\n TryFindDependencyManagerInPath - given a #r \u0022key:sometext\u0022 go and find a DependencyManager that satisfies the key\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-errorreporttype.html","title":"ErrorReportType","content":"ErrorReportType \n\n Todo describe this API\n \nErrorReportType.Warning \nWarning \nErrorReportType.Error \nError"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-errorreporttype.html#Warning","title":"ErrorReportType.Warning","content":"ErrorReportType.Warning \nWarning \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-errorreporttype.html#Error","title":"ErrorReportType.Error","content":"ErrorReportType.Error \nError \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html","title":"IDependencyManagerProvider","content":"IDependencyManagerProvider \n\n Wraps access to a DependencyManager implementation\n \nIDependencyManagerProvider.ResolveDependencies \nResolveDependencies \nIDependencyManagerProvider.HelpMessages \nHelpMessages \nIDependencyManagerProvider.Key \nKey \nIDependencyManagerProvider.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html#ResolveDependencies","title":"IDependencyManagerProvider.ResolveDependencies","content":"IDependencyManagerProvider.ResolveDependencies \nResolveDependencies \n\n Resolve the dependencies, for the given set of arguments, go find the .dll references, scripts and additional include values.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html#HelpMessages","title":"IDependencyManagerProvider.HelpMessages","content":"IDependencyManagerProvider.HelpMessages \nHelpMessages \n\n The help messages for this dependency manager inster\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html#Key","title":"IDependencyManagerProvider.Key","content":"IDependencyManagerProvider.Key \nKey \n\n Key that identifies the types of dependencies that this DependencyManager operates on\n E.g\n     nuget: indicates that this DM is for nuget packages\n     paket: indicates that this DM is for paket scripts, which manage nuget packages, github source dependencies etc ...\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-idependencymanagerprovider.html#Name","title":"IDependencyManagerProvider.Name","content":"IDependencyManagerProvider.Name \nName \n\n Name of the dependency manager\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html","title":"IResolveDependenciesResult","content":"IResolveDependenciesResult \n\n The results of ResolveDependencies\n \nIResolveDependenciesResult.Resolutions \nResolutions \nIResolveDependenciesResult.StdOut \nStdOut \nIResolveDependenciesResult.StdError \nStdError \nIResolveDependenciesResult.Roots \nRoots \nIResolveDependenciesResult.Success \nSuccess \nIResolveDependenciesResult.SourceFiles \nSourceFiles"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#Resolutions","title":"IResolveDependenciesResult.Resolutions","content":"IResolveDependenciesResult.Resolutions \nResolutions \n\n The resolution paths - the full paths to selected resolved dll\u0027s.\n In scripts this is equivalent to #r @\u0022c:\\somepath\\to\\packages\\ResolvedPackage\\1.1.1\\lib\\netstandard2.0\\ResolvedAssembly.dll\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#StdOut","title":"IResolveDependenciesResult.StdOut","content":"IResolveDependenciesResult.StdOut \nStdOut \n\n The resolution output log\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#StdError","title":"IResolveDependenciesResult.StdError","content":"IResolveDependenciesResult.StdError \nStdError \n\n The resolution error log (process stderr)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#Roots","title":"IResolveDependenciesResult.Roots","content":"IResolveDependenciesResult.Roots \nRoots \n\n The roots to package directories\n     This points to the root of each located package.\n     The layout of the package manager will be package manager specific.\n     however, the dependency manager dll understands the nuget package layout\n     and so if the package contains folders similar to the nuget layout then\n     the dependency manager will be able to probe and resolve any native dependencies\n     required by the nuget package.\n\n This path is also equivalent to\n     #I @\u0022c:\\somepath\\to\\packages\\1.1.1\\ResolvedPackage\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#Success","title":"IResolveDependenciesResult.Success","content":"IResolveDependenciesResult.Success \nSuccess \n\n Succeded?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-iresolvedependenciesresult.html#SourceFiles","title":"IResolveDependenciesResult.SourceFiles","content":"IResolveDependenciesResult.SourceFiles \nSourceFiles \n\n The source code file paths\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-nativedllresolvehandler.html","title":"NativeDllResolveHandler","content":"NativeDllResolveHandler \n \nNativeDllResolveHandler.( .ctor ) \n( .ctor )"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-nativedllresolvehandler.html#( .ctor )","title":"NativeDllResolveHandler.( .ctor )","content":"NativeDllResolveHandler.( .ctor ) \n( .ctor ) \n\n Construct a new NativeDllResolveHandler\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-nativeresolutionprobe.html","title":"NativeResolutionProbe","content":"NativeResolutionProbe \n\n Signature for Native library resolution probe callback\n host implements this, it\u0027s job is to return a list of package roots to probe.\n \nNativeResolutionProbe.Invoke \nInvoke"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-nativeresolutionprobe.html#Invoke","title":"NativeResolutionProbe.Invoke","content":"NativeResolutionProbe.Invoke \nInvoke \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-resolvingerrorreport.html","title":"ResolvingErrorReport","content":"ResolvingErrorReport \n \nResolvingErrorReport.Invoke \nInvoke"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-dependencymanager-resolvingerrorreport.html#Invoke","title":"ResolvingErrorReport.Invoke","content":"ResolvingErrorReport.Invoke \nInvoke \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-compilerdiagnostics.html","title":"CompilerDiagnostics","content":"CompilerDiagnostics \n\n Exposes compiler diagnostic error messages.\n \nCompilerDiagnostics.GetErrorMessage \nGetErrorMessage \nCompilerDiagnostics.GetSuggestedNames \nGetSuggestedNames"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-compilerdiagnostics.html#GetErrorMessage","title":"CompilerDiagnostics.GetErrorMessage","content":"CompilerDiagnostics.GetErrorMessage \nGetErrorMessage \n\n Given a DiagnosticKind, returns the string representing the error message for that diagnostic.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-compilerdiagnostics.html#GetSuggestedNames","title":"CompilerDiagnostics.GetSuggestedNames","content":"CompilerDiagnostics.GetSuggestedNames \nGetSuggestedNames \n\n Given a set of names, uses and a string representing an unresolved identifier,\n returns a list of suggested names if there are any feasible candidates.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html","title":"FSharpDiagnostic","content":"FSharpDiagnostic \n\n Represents a diagnostic produced by the F# compiler\n \nFSharpDiagnostic.Subcategory \nSubcategory \nFSharpDiagnostic.Start \nStart \nFSharpDiagnostic.StartColumn \nStartColumn \nFSharpDiagnostic.EndLine \nEndLine \nFSharpDiagnostic.ErrorNumberText \nErrorNumberText \nFSharpDiagnostic.StartLine \nStartLine \nFSharpDiagnostic.FileName \nFileName \nFSharpDiagnostic.Message \nMessage \nFSharpDiagnostic.EndColumn \nEndColumn \nFSharpDiagnostic.ErrorNumberPrefix \nErrorNumberPrefix \nFSharpDiagnostic.End \nEnd \nFSharpDiagnostic.Severity \nSeverity \nFSharpDiagnostic.Range \nRange \nFSharpDiagnostic.ErrorNumber \nErrorNumber \nFSharpDiagnostic.Create \nCreate \nFSharpDiagnostic.NewlineifyErrorString \nNewlineifyErrorString \nFSharpDiagnostic.NormalizeErrorString \nNormalizeErrorString"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Subcategory","title":"FSharpDiagnostic.Subcategory","content":"FSharpDiagnostic.Subcategory \nSubcategory \n\n Gets the sub-category for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Start","title":"FSharpDiagnostic.Start","content":"FSharpDiagnostic.Start \nStart \n\n Gets the start position for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#StartColumn","title":"FSharpDiagnostic.StartColumn","content":"FSharpDiagnostic.StartColumn \nStartColumn \n\n Gets the start column for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#EndLine","title":"FSharpDiagnostic.EndLine","content":"FSharpDiagnostic.EndLine \nEndLine \n\n Gets the end line for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#ErrorNumberText","title":"FSharpDiagnostic.ErrorNumberText","content":"FSharpDiagnostic.ErrorNumberText \nErrorNumberText \n\n Gets the full error number text e.g \u0022FS0031\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#StartLine","title":"FSharpDiagnostic.StartLine","content":"FSharpDiagnostic.StartLine \nStartLine \n\n Gets the start line for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#FileName","title":"FSharpDiagnostic.FileName","content":"FSharpDiagnostic.FileName \nFileName \n\n Gets the file name for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Message","title":"FSharpDiagnostic.Message","content":"FSharpDiagnostic.Message \nMessage \n\n Gets the message for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#EndColumn","title":"FSharpDiagnostic.EndColumn","content":"FSharpDiagnostic.EndColumn \nEndColumn \n\n Gets the end column for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#ErrorNumberPrefix","title":"FSharpDiagnostic.ErrorNumberPrefix","content":"FSharpDiagnostic.ErrorNumberPrefix \nErrorNumberPrefix \n\n Gets the number prefix for the diagnostic, usually \u0022FS\u0022 but may differ for analyzers\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#End","title":"FSharpDiagnostic.End","content":"FSharpDiagnostic.End \nEnd \n\n Gets the end position for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Severity","title":"FSharpDiagnostic.Severity","content":"FSharpDiagnostic.Severity \nSeverity \n\n Gets the severity for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Range","title":"FSharpDiagnostic.Range","content":"FSharpDiagnostic.Range \nRange \n\n Gets the range for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#ErrorNumber","title":"FSharpDiagnostic.ErrorNumber","content":"FSharpDiagnostic.ErrorNumber \nErrorNumber \n\n Gets the number for the diagnostic\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#Create","title":"FSharpDiagnostic.Create","content":"FSharpDiagnostic.Create \nCreate \n\n Creates a diagnostic, e.g. for reporting from an analyzer\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#NewlineifyErrorString","title":"FSharpDiagnostic.NewlineifyErrorString","content":"FSharpDiagnostic.NewlineifyErrorString \nNewlineifyErrorString \n\n Newlines are recognized and replaced with (ASCII 29, the \u0027group separator\u0027), \n which is decoded by the IDE with \u0027NewlineifyErrorString\u0027 back into newlines, so that multi-line errors can be displayed in QuickInfo\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostic.html#NormalizeErrorString","title":"FSharpDiagnostic.NormalizeErrorString","content":"FSharpDiagnostic.NormalizeErrorString \nNormalizeErrorString \n\n Newlines are recognized and replaced with (ASCII 29, the \u0027group separator\u0027), \n which is decoded by the IDE with \u0027NewlineifyErrorString\u0027 back into newlines, so that multi-line errors can be displayed in QuickInfo\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostickind.html","title":"FSharpDiagnosticKind","content":"FSharpDiagnosticKind \n\n Supported kinds of diagnostics by this service.\n \nFSharpDiagnosticKind.AddIndexerDot \nAddIndexerDot \nFSharpDiagnosticKind.ReplaceWithSuggestion \nReplaceWithSuggestion"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostickind.html#AddIndexerDot","title":"FSharpDiagnosticKind.AddIndexerDot","content":"FSharpDiagnosticKind.AddIndexerDot \nAddIndexerDot \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnostickind.html#ReplaceWithSuggestion","title":"FSharpDiagnosticKind.ReplaceWithSuggestion","content":"FSharpDiagnosticKind.ReplaceWithSuggestion \nReplaceWithSuggestion \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html","title":"FSharpDiagnosticOptions","content":"FSharpDiagnosticOptions \n \nFSharpDiagnosticOptions.Default \nDefault \nFSharpDiagnosticOptions.WarnLevel \nWarnLevel \nFSharpDiagnosticOptions.GlobalWarnAsError \nGlobalWarnAsError \nFSharpDiagnosticOptions.WarnOff \nWarnOff \nFSharpDiagnosticOptions.WarnOn \nWarnOn \nFSharpDiagnosticOptions.WarnAsError \nWarnAsError \nFSharpDiagnosticOptions.WarnAsWarn \nWarnAsWarn"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#Default","title":"FSharpDiagnosticOptions.Default","content":"FSharpDiagnosticOptions.Default \nDefault \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnLevel","title":"FSharpDiagnosticOptions.WarnLevel","content":"FSharpDiagnosticOptions.WarnLevel \nWarnLevel \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#GlobalWarnAsError","title":"FSharpDiagnosticOptions.GlobalWarnAsError","content":"FSharpDiagnosticOptions.GlobalWarnAsError \nGlobalWarnAsError \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnOff","title":"FSharpDiagnosticOptions.WarnOff","content":"FSharpDiagnosticOptions.WarnOff \nWarnOff \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnOn","title":"FSharpDiagnosticOptions.WarnOn","content":"FSharpDiagnosticOptions.WarnOn \nWarnOn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnAsError","title":"FSharpDiagnosticOptions.WarnAsError","content":"FSharpDiagnosticOptions.WarnAsError \nWarnAsError \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticoptions.html#WarnAsWarn","title":"FSharpDiagnosticOptions.WarnAsWarn","content":"FSharpDiagnosticOptions.WarnAsWarn \nWarnAsWarn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html","title":"FSharpDiagnosticSeverity","content":"FSharpDiagnosticSeverity \n \nFSharpDiagnosticSeverity.Hidden \nHidden \nFSharpDiagnosticSeverity.Info \nInfo \nFSharpDiagnosticSeverity.Warning \nWarning \nFSharpDiagnosticSeverity.Error \nError"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Hidden","title":"FSharpDiagnosticSeverity.Hidden","content":"FSharpDiagnosticSeverity.Hidden \nHidden \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Info","title":"FSharpDiagnosticSeverity.Info","content":"FSharpDiagnosticSeverity.Info \nInfo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Warning","title":"FSharpDiagnosticSeverity.Warning","content":"FSharpDiagnosticSeverity.Warning \nWarning \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-diagnostics-fsharpdiagnosticseverity.html#Error","title":"FSharpDiagnosticSeverity.Error","content":"FSharpDiagnosticSeverity.Error \nError \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontent.html","title":"AssemblyContent","content":"AssemblyContent \n\n Provides assembly content.\n \nAssemblyContent.GetAssemblySignatureContent \nGetAssemblySignatureContent \nAssemblyContent.GetAssemblyContent \nGetAssemblyContent"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontent.html#GetAssemblySignatureContent","title":"AssemblyContent.GetAssemblySignatureContent","content":"AssemblyContent.GetAssemblySignatureContent \nGetAssemblySignatureContent \n\n Given a \u0060FSharpAssemblySignature\u0060, returns assembly content.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontent.html#GetAssemblyContent","title":"AssemblyContent.GetAssemblyContent","content":"AssemblyContent.GetAssemblyContent \nGetAssemblyContent \n\n Returns (possibly cached) assembly content.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html","title":"InterfaceStubGenerator","content":"InterfaceStubGenerator \n \nInterfaceStubGenerator.GetInterfaceMembers \nGetInterfaceMembers \nInterfaceStubGenerator.HasNoInterfaceMember \nHasNoInterfaceMember \nInterfaceStubGenerator.GetMemberNameAndRanges \nGetMemberNameAndRanges \nInterfaceStubGenerator.GetImplementedMemberSignatures \nGetImplementedMemberSignatures \nInterfaceStubGenerator.IsInterface \nIsInterface \nInterfaceStubGenerator.FormatInterface \nFormatInterface \nInterfaceStubGenerator.TryFindInterfaceDeclaration \nTryFindInterfaceDeclaration"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#GetInterfaceMembers","title":"InterfaceStubGenerator.GetInterfaceMembers","content":"InterfaceStubGenerator.GetInterfaceMembers \nGetInterfaceMembers \n\n Get members in the decreasing order of inheritance chain\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#HasNoInterfaceMember","title":"InterfaceStubGenerator.HasNoInterfaceMember","content":"InterfaceStubGenerator.HasNoInterfaceMember \nHasNoInterfaceMember \n\n Check whether an interface is empty\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#GetMemberNameAndRanges","title":"InterfaceStubGenerator.GetMemberNameAndRanges","content":"InterfaceStubGenerator.GetMemberNameAndRanges \nGetMemberNameAndRanges \n\n Get associated member names and ranges.\n In case of properties, intrinsic ranges might not be correct for the purpose of getting\n positions of \u0027member\u0027, which indicate the indentation for generating new members\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#GetImplementedMemberSignatures","title":"InterfaceStubGenerator.GetImplementedMemberSignatures","content":"InterfaceStubGenerator.GetImplementedMemberSignatures \nGetImplementedMemberSignatures \n\n Get interface member signatures \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#IsInterface","title":"InterfaceStubGenerator.IsInterface","content":"InterfaceStubGenerator.IsInterface \nIsInterface \n\n Check whether an entity is an interface or type abbreviation of an interface\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#FormatInterface","title":"InterfaceStubGenerator.FormatInterface","content":"InterfaceStubGenerator.FormatInterface \nFormatInterface \n\n Generate stub implementation of an interface at a start column\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacestubgenerator.html#TryFindInterfaceDeclaration","title":"InterfaceStubGenerator.TryFindInterfaceDeclaration","content":"InterfaceStubGenerator.TryFindInterfaceDeclaration \nTryFindInterfaceDeclaration \n\n Find corresponding interface declaration at a given position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigateto.html","title":"NavigateTo","content":"NavigateTo \n \nNavigateTo.GetNavigableItems \nGetNavigableItems"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigateto.html#GetNavigableItems","title":"NavigateTo.GetNavigableItems","content":"NavigateTo.GetNavigableItems \nGetNavigableItems \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigation.html","title":"Navigation","content":"Navigation \n \nNavigation.getNavigation \ngetNavigation"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigation.html#getNavigation","title":"Navigation.getNavigation","content":"Navigation.getNavigation \ngetNavigation \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html","title":"ParsedInput","content":"ParsedInput \n\n Operations querying the entire syntax tree\n \nParsedInput.TryFindExpressionASTLeftOfDotLeftOfCursor \nTryFindExpressionASTLeftOfDotLeftOfCursor \nParsedInput.GetRangeOfExprLeftOfDot \nGetRangeOfExprLeftOfDot \nParsedInput.TryFindExpressionIslandInPosition \nTryFindExpressionIslandInPosition \nParsedInput.TryGetCompletionContext \nTryGetCompletionContext \nParsedInput.GetEntityKind \nGetEntityKind \nParsedInput.GetFullNameOfSmallestModuleOrNamespaceAtPoint \nGetFullNameOfSmallestModuleOrNamespaceAtPoint \nParsedInput.TryFindInsertionContext \nTryFindInsertionContext \nParsedInput.FindNearestPointToInsertOpenDeclaration \nFindNearestPointToInsertOpenDeclaration \nParsedInput.GetLongIdentAt \nGetLongIdentAt \nParsedInput.AdjustInsertionPoint \nAdjustInsertionPoint"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#TryFindExpressionASTLeftOfDotLeftOfCursor","title":"ParsedInput.TryFindExpressionASTLeftOfDotLeftOfCursor","content":"ParsedInput.TryFindExpressionASTLeftOfDotLeftOfCursor \nTryFindExpressionASTLeftOfDotLeftOfCursor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#GetRangeOfExprLeftOfDot","title":"ParsedInput.GetRangeOfExprLeftOfDot","content":"ParsedInput.GetRangeOfExprLeftOfDot \nGetRangeOfExprLeftOfDot \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#TryFindExpressionIslandInPosition","title":"ParsedInput.TryFindExpressionIslandInPosition","content":"ParsedInput.TryFindExpressionIslandInPosition \nTryFindExpressionIslandInPosition \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#TryGetCompletionContext","title":"ParsedInput.TryGetCompletionContext","content":"ParsedInput.TryGetCompletionContext \nTryGetCompletionContext \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#GetEntityKind","title":"ParsedInput.GetEntityKind","content":"ParsedInput.GetEntityKind \nGetEntityKind \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#GetFullNameOfSmallestModuleOrNamespaceAtPoint","title":"ParsedInput.GetFullNameOfSmallestModuleOrNamespaceAtPoint","content":"ParsedInput.GetFullNameOfSmallestModuleOrNamespaceAtPoint \nGetFullNameOfSmallestModuleOrNamespaceAtPoint \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#TryFindInsertionContext","title":"ParsedInput.TryFindInsertionContext","content":"ParsedInput.TryFindInsertionContext \nTryFindInsertionContext \n\n Returns \u0060InsertContext\u0060 based on current position and symbol idents.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#FindNearestPointToInsertOpenDeclaration","title":"ParsedInput.FindNearestPointToInsertOpenDeclaration","content":"ParsedInput.FindNearestPointToInsertOpenDeclaration \nFindNearestPointToInsertOpenDeclaration \n\n Returns \u0060InsertContext\u0060 based on current position and symbol idents.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#GetLongIdentAt","title":"ParsedInput.GetLongIdentAt","content":"ParsedInput.GetLongIdentAt \nGetLongIdentAt \n\n Returns long identifier at position.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parsedinput.html#AdjustInsertionPoint","title":"ParsedInput.AdjustInsertionPoint","content":"ParsedInput.AdjustInsertionPoint \nAdjustInsertionPoint \n\n Corrects insertion line number based on kind of scope and text surrounding the insertion point.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html","title":"QuickParse","content":"QuickParse \n\n Methods for cheaply and inaccurately parsing F#.\n\n These methods are very old and are mostly to do with extracting \u0022long identifier islands\u0022 \n     A.B.C\n from F# source code, an approach taken from pre-F# VS samples for implementing intelliense.\n\n This code should really no longer be needed since the language service has access to \n parsed F# source code ASTs.  However, the long identifiers are still passed back to GetDeclarations and friends in the \n F# Compiler Service and it\u0027s annoyingly hard to remove their use completely.\n\n In general it is unlikely much progress will be made by fixing this code - it will be better to \n extract more information from the F# ASTs.\n\n It\u0027s also surprising how hard even the job of getting long identifier islands can be. For example the code \n below is inaccurate for long identifier chains involving \u0060\u0060...\u0060\u0060 identifiers.  And there are special cases\n for active pattern names and so on.\n \nQuickParse.MagicalAdjustmentConstant \nMagicalAdjustmentConstant \nQuickParse.CorrectIdentifierToken \nCorrectIdentifierToken \nQuickParse.GetCompleteIdentifierIsland \nGetCompleteIdentifierIsland \nQuickParse.GetPartialLongName \nGetPartialLongName \nQuickParse.GetPartialLongNameEx \nGetPartialLongNameEx \nQuickParse.TestMemberOrOverrideDeclaration \nTestMemberOrOverrideDeclaration"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#MagicalAdjustmentConstant","title":"QuickParse.MagicalAdjustmentConstant","content":"QuickParse.MagicalAdjustmentConstant \nMagicalAdjustmentConstant \n\n Puts us after the last character.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#CorrectIdentifierToken","title":"QuickParse.CorrectIdentifierToken","content":"QuickParse.CorrectIdentifierToken \nCorrectIdentifierToken \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#GetCompleteIdentifierIsland","title":"QuickParse.GetCompleteIdentifierIsland","content":"QuickParse.GetCompleteIdentifierIsland \nGetCompleteIdentifierIsland \n\n Given a string and a position in that string, find an identifier as\n expected by \u0060GotoDefinition\u0060. This will work when the cursor is\n immediately before the identifier, within the identifier, or immediately\n after the identifier.\n\n \u0027tolerateJustAfter\u0027 indicates that we tolerate being one character after the identifier, used\n for goto-definition\n\n In general, only identifiers composed from upper/lower letters and \u0027.\u0027 are supported, but there\n are a couple of explicitly handled exceptions to allow some common scenarios:\n - When the name contains only letters and \u0027|\u0027 symbol, it may be an active pattern, so we \n   treat it as a valid identifier - e.g. let ( |Identity| ) a = a\n   (but other identifiers that include \u0027|\u0027 are not allowed - e.g. \u0027||\u0027 operator)\n - It searches for double tick (\u0060\u0060) to see if the identifier could be something like \u0060\u0060a b\u0060\u0060\n\n REVIEW: Also support, e.g., operators, performing the necessary mangling.\n (i.e., I would like that the name returned here can be passed as-is\n (post \u0060.\u0060-chopping) to \u0060GetDeclarationLocation.)\n \n In addition, return the position where a \u0060.\u0060 would go if we were making\n a call to \u0060DeclItemsForNamesAtPosition\u0060 for intellisense. This will\n allow us to use find the correct qualified items rather than resorting\n to the more expensive and less accurate environment lookup.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#GetPartialLongName","title":"QuickParse.GetPartialLongName","content":"QuickParse.GetPartialLongName \nGetPartialLongName \n\n Get the partial long name of the identifier to the left of index.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#GetPartialLongNameEx","title":"QuickParse.GetPartialLongNameEx","content":"QuickParse.GetPartialLongNameEx \nGetPartialLongNameEx \n\n Get the partial long name of the identifier to the left of index.\n For example, for \u0060System.DateTime.Now\u0060 it returns PartialLongName ([|\u0022System\u0022; \u0022DateTime\u0022|], \u0022Now\u0022, Some 32), where \u002232\u0022 pos of the last dot.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-quickparse.html#TestMemberOrOverrideDeclaration","title":"QuickParse.TestMemberOrOverrideDeclaration","content":"QuickParse.TestMemberOrOverrideDeclaration \nTestMemberOrOverrideDeclaration \n\n Tests whether the user is typing something like \u0022member x.\u0022 or \u0022override (*comment*) x.\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-simplifynames.html","title":"SimplifyNames","content":"SimplifyNames \n \nSimplifyNames.SimplifiableRange \nSimplifiableRange \nSimplifyNames.getSimplifiableNames \ngetSimplifiableNames"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-simplifynames.html#getSimplifiableNames","title":"SimplifyNames.getSimplifiableNames","content":"SimplifyNames.getSimplifiableNames \ngetSimplifiableNames \n\n Get all ranges that can be simplified in a file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-simplifynames-simplifiablerange.html","title":"SimplifiableRange","content":"SimplifiableRange \n\n Data for use in finding unnecessarily-qualified names and generating diagnostics to simplify them\n \nSimplifiableRange.Range \nRange \nSimplifiableRange.RelativeName \nRelativeName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-simplifynames-simplifiablerange.html#Range","title":"SimplifiableRange.Range","content":"SimplifiableRange.Range \nRange \n\n The range of a name that can be simplified\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-simplifynames-simplifiablerange.html#RelativeName","title":"SimplifiableRange.RelativeName","content":"SimplifiableRange.RelativeName \nRelativeName \n\n The relative name that can be applied to a simplifiable name\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure.html","title":"Structure","content":"Structure \n \nStructure.Collapse \nCollapse \nStructure.Scope \nScope \nStructure.ScopeRange \nScopeRange \nStructure.getOutliningRanges \ngetOutliningRanges"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure.html#getOutliningRanges","title":"Structure.getOutliningRanges","content":"Structure.getOutliningRanges \ngetOutliningRanges \n\n Returns outlining ranges for given parsed input.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-collapse.html","title":"Collapse","content":"Collapse \n\n Collapse indicates the way a range/snapshot should be collapsed. \u0060Same\u0060 is for a scope inside\n some kind of scope delimiter, e.g. \u0060[| ... |]\u0060, \u0060[ ... ]\u0060, \u0060{ ... }\u0060, etc.  \u0060Below\u0060 is for expressions\n following a binding or the right hand side of a pattern, e.g. \u0060let x = ...\u0060\n \nCollapse.Below \nBelow \nCollapse.Same \nSame"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-collapse.html#Below","title":"Collapse.Below","content":"Collapse.Below \nBelow \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-collapse.html#Same","title":"Collapse.Same","content":"Collapse.Same \nSame \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html","title":"Scope","content":"Scope \n\n Tag to identify the construct that can be stored alongside its associated ranges\n \nScope.Open \nOpen \nScope.Namespace \nNamespace \nScope.Module \nModule \nScope.Type \nType \nScope.Member \nMember \nScope.LetOrUse \nLetOrUse \nScope.Val \nVal \nScope.ComputationExpr \nComputationExpr \nScope.IfThenElse \nIfThenElse \nScope.ThenInIfThenElse \nThenInIfThenElse \nScope.ElseInIfThenElse \nElseInIfThenElse \nScope.TryWith \nTryWith \nScope.TryInTryWith \nTryInTryWith \nScope.WithInTryWith \nWithInTryWith \nScope.TryFinally \nTryFinally \nScope.TryInTryFinally \nTryInTryFinally \nScope.FinallyInTryFinally \nFinallyInTryFinally \nScope.ArrayOrList \nArrayOrList \nScope.ObjExpr \nObjExpr \nScope.For \nFor \nScope.While \nWhile \nScope.Match \nMatch \nScope.MatchBang \nMatchBang \nScope.MatchLambda \nMatchLambda \nScope.MatchClause \nMatchClause \nScope.Lambda \nLambda \nScope.Quote \nQuote \nScope.Record \nRecord \nScope.SpecialFunc \nSpecialFunc \nScope.Do \nDo \nScope.New \nNew \nScope.Attribute \nAttribute \nScope.Interface \nInterface \nScope.HashDirective \nHashDirective \nScope.LetOrUseBang \nLetOrUseBang \nScope.TypeExtension \nTypeExtension \nScope.YieldOrReturn \nYieldOrReturn \nScope.YieldOrReturnBang \nYieldOrReturnBang \nScope.Tuple \nTuple \nScope.UnionCase \nUnionCase \nScope.EnumCase \nEnumCase \nScope.RecordField \nRecordField \nScope.RecordDefn \nRecordDefn \nScope.UnionDefn \nUnionDefn \nScope.Comment \nComment \nScope.XmlDocComment \nXmlDocComment"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Open","title":"Scope.Open","content":"Scope.Open \nOpen \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Namespace","title":"Scope.Namespace","content":"Scope.Namespace \nNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Module","title":"Scope.Module","content":"Scope.Module \nModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Type","title":"Scope.Type","content":"Scope.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Member","title":"Scope.Member","content":"Scope.Member \nMember \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#LetOrUse","title":"Scope.LetOrUse","content":"Scope.LetOrUse \nLetOrUse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Val","title":"Scope.Val","content":"Scope.Val \nVal \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#ComputationExpr","title":"Scope.ComputationExpr","content":"Scope.ComputationExpr \nComputationExpr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#IfThenElse","title":"Scope.IfThenElse","content":"Scope.IfThenElse \nIfThenElse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#ThenInIfThenElse","title":"Scope.ThenInIfThenElse","content":"Scope.ThenInIfThenElse \nThenInIfThenElse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#ElseInIfThenElse","title":"Scope.ElseInIfThenElse","content":"Scope.ElseInIfThenElse \nElseInIfThenElse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#TryWith","title":"Scope.TryWith","content":"Scope.TryWith \nTryWith \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#TryInTryWith","title":"Scope.TryInTryWith","content":"Scope.TryInTryWith \nTryInTryWith \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#WithInTryWith","title":"Scope.WithInTryWith","content":"Scope.WithInTryWith \nWithInTryWith \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#TryFinally","title":"Scope.TryFinally","content":"Scope.TryFinally \nTryFinally \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#TryInTryFinally","title":"Scope.TryInTryFinally","content":"Scope.TryInTryFinally \nTryInTryFinally \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#FinallyInTryFinally","title":"Scope.FinallyInTryFinally","content":"Scope.FinallyInTryFinally \nFinallyInTryFinally \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#ArrayOrList","title":"Scope.ArrayOrList","content":"Scope.ArrayOrList \nArrayOrList \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#ObjExpr","title":"Scope.ObjExpr","content":"Scope.ObjExpr \nObjExpr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#For","title":"Scope.For","content":"Scope.For \nFor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#While","title":"Scope.While","content":"Scope.While \nWhile \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Match","title":"Scope.Match","content":"Scope.Match \nMatch \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#MatchBang","title":"Scope.MatchBang","content":"Scope.MatchBang \nMatchBang \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#MatchLambda","title":"Scope.MatchLambda","content":"Scope.MatchLambda \nMatchLambda \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#MatchClause","title":"Scope.MatchClause","content":"Scope.MatchClause \nMatchClause \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Lambda","title":"Scope.Lambda","content":"Scope.Lambda \nLambda \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Quote","title":"Scope.Quote","content":"Scope.Quote \nQuote \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Record","title":"Scope.Record","content":"Scope.Record \nRecord \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#SpecialFunc","title":"Scope.SpecialFunc","content":"Scope.SpecialFunc \nSpecialFunc \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Do","title":"Scope.Do","content":"Scope.Do \nDo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#New","title":"Scope.New","content":"Scope.New \nNew \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Attribute","title":"Scope.Attribute","content":"Scope.Attribute \nAttribute \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Interface","title":"Scope.Interface","content":"Scope.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#HashDirective","title":"Scope.HashDirective","content":"Scope.HashDirective \nHashDirective \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#LetOrUseBang","title":"Scope.LetOrUseBang","content":"Scope.LetOrUseBang \nLetOrUseBang \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#TypeExtension","title":"Scope.TypeExtension","content":"Scope.TypeExtension \nTypeExtension \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#YieldOrReturn","title":"Scope.YieldOrReturn","content":"Scope.YieldOrReturn \nYieldOrReturn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#YieldOrReturnBang","title":"Scope.YieldOrReturnBang","content":"Scope.YieldOrReturnBang \nYieldOrReturnBang \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Tuple","title":"Scope.Tuple","content":"Scope.Tuple \nTuple \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#UnionCase","title":"Scope.UnionCase","content":"Scope.UnionCase \nUnionCase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#EnumCase","title":"Scope.EnumCase","content":"Scope.EnumCase \nEnumCase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#RecordField","title":"Scope.RecordField","content":"Scope.RecordField \nRecordField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#RecordDefn","title":"Scope.RecordDefn","content":"Scope.RecordDefn \nRecordDefn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#UnionDefn","title":"Scope.UnionDefn","content":"Scope.UnionDefn \nUnionDefn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#Comment","title":"Scope.Comment","content":"Scope.Comment \nComment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scope.html#XmlDocComment","title":"Scope.XmlDocComment","content":"Scope.XmlDocComment \nXmlDocComment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scoperange.html","title":"ScopeRange","content":"ScopeRange \n\n Stores the range for a construct, the sub-range that should be collapsed for outlinging,\n a tag for the construct type, and a tag for the collapse style\n \nScopeRange.Scope \nScope \nScopeRange.Collapse \nCollapse \nScopeRange.Range \nRange \nScopeRange.CollapseRange \nCollapseRange"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scoperange.html#Scope","title":"ScopeRange.Scope","content":"ScopeRange.Scope \nScope \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scoperange.html#Collapse","title":"ScopeRange.Collapse","content":"ScopeRange.Collapse \nCollapse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scoperange.html#Range","title":"ScopeRange.Range","content":"ScopeRange.Range \nRange \n\n HintSpan in BlockSpan\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-structure-scoperange.html#CollapseRange","title":"ScopeRange.CollapseRange","content":"ScopeRange.CollapseRange \nCollapseRange \n\n TextSpan in BlockSpan\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unuseddeclarations.html","title":"UnusedDeclarations","content":"UnusedDeclarations \n \nUnusedDeclarations.getUnusedDeclarations \ngetUnusedDeclarations"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unuseddeclarations.html#getUnusedDeclarations","title":"UnusedDeclarations.getUnusedDeclarations","content":"UnusedDeclarations.getUnusedDeclarations \ngetUnusedDeclarations \n\n Get all unused declarations in a file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unusedopens.html","title":"UnusedOpens","content":"UnusedOpens \n \nUnusedOpens.getUnusedOpens \ngetUnusedOpens"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unusedopens.html#getUnusedOpens","title":"UnusedOpens.getUnusedOpens","content":"UnusedOpens.getUnusedOpens \ngetUnusedOpens \n\n Get all unused open declarations in a file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldoccomment.html","title":"XmlDocComment","content":"XmlDocComment \n \nXmlDocComment.IsBlank \nIsBlank"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldoccomment.html#IsBlank","title":"XmlDocComment.IsBlank","content":"XmlDocComment.IsBlank \nIsBlank \n\n if it\u0027s a blank XML comment with trailing \u0022\u003C\u0022, returns Some (index of the \u0022\u003C\u0022), otherwise returns None\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldocparser.html","title":"XmlDocParser","content":"XmlDocParser \n \nXmlDocParser.GetXmlDocables \nGetXmlDocables"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldocparser.html#GetXmlDocables","title":"XmlDocParser.GetXmlDocables","content":"XmlDocParser.GetXmlDocables \nGetXmlDocables \n\n Get the list of Xml documentation from current source code\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontenttype.html","title":"AssemblyContentType","content":"AssemblyContentType \n\n Assembly content type.\n \nAssemblyContentType.Public \nPublic \nAssemblyContentType.Full \nFull"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontenttype.html#Public","title":"AssemblyContentType.Public","content":"AssemblyContentType.Public \nPublic \n\n Public assembly content only.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblycontenttype.html#Full","title":"AssemblyContentType.Full","content":"AssemblyContentType.Full \nFull \n\n All assembly content.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html","title":"AssemblySymbol","content":"AssemblySymbol \n\n Represents type, module, member, function or value in a compiled assembly.\n \nAssemblySymbol.FullName \nFullName \nAssemblySymbol.CleanedIdents \nCleanedIdents \nAssemblySymbol.Namespace \nNamespace \nAssemblySymbol.NearestRequireQualifiedAccessParent \nNearestRequireQualifiedAccessParent \nAssemblySymbol.TopRequireQualifiedAccessParent \nTopRequireQualifiedAccessParent \nAssemblySymbol.AutoOpenParent \nAutoOpenParent \nAssemblySymbol.Symbol \nSymbol \nAssemblySymbol.Kind \nKind \nAssemblySymbol.UnresolvedSymbol \nUnresolvedSymbol"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#FullName","title":"AssemblySymbol.FullName","content":"AssemblySymbol.FullName \nFullName \n\n Full entity name as it\u0027s seen in compiled code (raw FSharpEntity.FullName, FSharpValueOrFunction.FullName). \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#CleanedIdents","title":"AssemblySymbol.CleanedIdents","content":"AssemblySymbol.CleanedIdents \nCleanedIdents \n\n Entity name parts with removed module suffixes (Ns.M1Module.M2Module.M3.entity -\u003E Ns.M1.M2.M3.entity)\n and replaced compiled names with display names (FSharpEntity.DisplayName, FSharpValueOrFunction.DisplayName).\n Note: *all* parts are cleaned, not the last one. \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#Namespace","title":"AssemblySymbol.Namespace","content":"AssemblySymbol.Namespace \nNamespace \n\n \u0060FSharpEntity.Namespace\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#NearestRequireQualifiedAccessParent","title":"AssemblySymbol.NearestRequireQualifiedAccessParent","content":"AssemblySymbol.NearestRequireQualifiedAccessParent \nNearestRequireQualifiedAccessParent \n\n The most narrative parent module that has \u0060RequireQualifiedAccess\u0060 attribute.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#TopRequireQualifiedAccessParent","title":"AssemblySymbol.TopRequireQualifiedAccessParent","content":"AssemblySymbol.TopRequireQualifiedAccessParent \nTopRequireQualifiedAccessParent \n\n Parent module that has the largest scope and has \u0060RequireQualifiedAccess\u0060 attribute.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#AutoOpenParent","title":"AssemblySymbol.AutoOpenParent","content":"AssemblySymbol.AutoOpenParent \nAutoOpenParent \n\n Parent module that has \u0060AutoOpen\u0060 attribute.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#Symbol","title":"AssemblySymbol.Symbol","content":"AssemblySymbol.Symbol \nSymbol \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#Kind","title":"AssemblySymbol.Kind","content":"AssemblySymbol.Kind \nKind \n\n Function that returns \u0060EntityKind\u0060 based of given \u0060LookupKind\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-assemblysymbol.html#UnresolvedSymbol","title":"AssemblySymbol.UnresolvedSymbol","content":"AssemblySymbol.UnresolvedSymbol \nUnresolvedSymbol \n\n Cache display name and namespace, used for completion.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html","title":"CompletionContext","content":"CompletionContext \n \nCompletionContext.Invalid \nInvalid \nCompletionContext.Inherit \nInherit \nCompletionContext.RecordField \nRecordField \nCompletionContext.RangeOperator \nRangeOperator \nCompletionContext.ParameterList \nParameterList \nCompletionContext.AttributeApplication \nAttributeApplication \nCompletionContext.OpenDeclaration \nOpenDeclaration \nCompletionContext.PatternType \nPatternType \nCompletionContext.UnionCaseFieldsDeclaration \nUnionCaseFieldsDeclaration \nCompletionContext.TypeAbbreviationOrSingleCaseUnion \nTypeAbbreviationOrSingleCaseUnion"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#Invalid","title":"CompletionContext.Invalid","content":"CompletionContext.Invalid \nInvalid \n\n Completion context cannot be determined due to errors\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#Inherit","title":"CompletionContext.Inherit","content":"CompletionContext.Inherit \nInherit \n\n Completing something after the inherit keyword\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#RecordField","title":"CompletionContext.RecordField","content":"CompletionContext.RecordField \nRecordField \n\n Completing records field\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#RangeOperator","title":"CompletionContext.RangeOperator","content":"CompletionContext.RangeOperator \nRangeOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#ParameterList","title":"CompletionContext.ParameterList","content":"CompletionContext.ParameterList \nParameterList \n\n Completing named parameters\\setters in parameter list of constructor\\method calls\n end of name ast node * list of properties\\parameters that were already set\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#AttributeApplication","title":"CompletionContext.AttributeApplication","content":"CompletionContext.AttributeApplication \nAttributeApplication \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#OpenDeclaration","title":"CompletionContext.OpenDeclaration","content":"CompletionContext.OpenDeclaration \nOpenDeclaration \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#PatternType","title":"CompletionContext.PatternType","content":"CompletionContext.PatternType \nPatternType \n\n Completing pattern type (e.g. foo (x: |))\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#UnionCaseFieldsDeclaration","title":"CompletionContext.UnionCaseFieldsDeclaration","content":"CompletionContext.UnionCaseFieldsDeclaration \nUnionCaseFieldsDeclaration \n\n Completing union case fields declaration (e.g. \u0027A of stri|\u0027 but not \u0027B of tex|: string\u0027)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completioncontext.html#TypeAbbreviationOrSingleCaseUnion","title":"CompletionContext.TypeAbbreviationOrSingleCaseUnion","content":"CompletionContext.TypeAbbreviationOrSingleCaseUnion \nTypeAbbreviationOrSingleCaseUnion \n\n Completing a type abbreviation (e.g. type Long = int6|)\n or a single case union without a bar (type SomeUnion = Abc|)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html","title":"CompletionItemKind","content":"CompletionItemKind \n \nCompletionItemKind.Field \nField \nCompletionItemKind.Property \nProperty \nCompletionItemKind.Method \nMethod \nCompletionItemKind.Event \nEvent \nCompletionItemKind.Argument \nArgument \nCompletionItemKind.CustomOperation \nCustomOperation \nCompletionItemKind.Other \nOther"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Field","title":"CompletionItemKind.Field","content":"CompletionItemKind.Field \nField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Property","title":"CompletionItemKind.Property","content":"CompletionItemKind.Property \nProperty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Method","title":"CompletionItemKind.Method","content":"CompletionItemKind.Method \nMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Event","title":"CompletionItemKind.Event","content":"CompletionItemKind.Event \nEvent \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Argument","title":"CompletionItemKind.Argument","content":"CompletionItemKind.Argument \nArgument \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#CustomOperation","title":"CompletionItemKind.CustomOperation","content":"CompletionItemKind.CustomOperation \nCustomOperation \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-completionitemkind.html#Other","title":"CompletionItemKind.Other","content":"CompletionItemKind.Other \nOther \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistinfo.html","title":"DeclarationListInfo","content":"DeclarationListInfo \n\n Represents a set of declarations in F# source code, with information attached ready for display by an editor.\n Returned by GetDeclarations.\n \nDeclarationListInfo.IsForType \nIsForType \nDeclarationListInfo.IsError \nIsError \nDeclarationListInfo.Items \nItems \nDeclarationListInfo.Empty \nEmpty"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistinfo.html#IsForType","title":"DeclarationListInfo.IsForType","content":"DeclarationListInfo.IsForType \nIsForType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistinfo.html#IsError","title":"DeclarationListInfo.IsError","content":"DeclarationListInfo.IsError \nIsError \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistinfo.html#Items","title":"DeclarationListInfo.Items","content":"DeclarationListInfo.Items \nItems \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistinfo.html#Empty","title":"DeclarationListInfo.Empty","content":"DeclarationListInfo.Empty \nEmpty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html","title":"DeclarationListItem","content":"DeclarationListItem \n\n Represents a declaration in F# source code, with information attached ready for display by an editor.\n Returned by GetDeclarations.\n \nDeclarationListItem.Glyph \nGlyph \nDeclarationListItem.IsResolved \nIsResolved \nDeclarationListItem.Accessibility \nAccessibility \nDeclarationListItem.FullName \nFullName \nDeclarationListItem.Description \nDescription \nDeclarationListItem.IsOwnMember \nIsOwnMember \nDeclarationListItem.NameInCode \nNameInCode \nDeclarationListItem.NamespaceToOpen \nNamespaceToOpen \nDeclarationListItem.Kind \nKind \nDeclarationListItem.MinorPriority \nMinorPriority \nDeclarationListItem.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#Glyph","title":"DeclarationListItem.Glyph","content":"DeclarationListItem.Glyph \nGlyph \n\n Get the glyph to use\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#IsResolved","title":"DeclarationListItem.IsResolved","content":"DeclarationListItem.IsResolved \nIsResolved \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#Accessibility","title":"DeclarationListItem.Accessibility","content":"DeclarationListItem.Accessibility \nAccessibility \n\n Get the accessibility of the item\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#FullName","title":"DeclarationListItem.FullName","content":"DeclarationListItem.FullName \nFullName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#Description","title":"DeclarationListItem.Description","content":"DeclarationListItem.Description \nDescription \n\n Get the description\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#IsOwnMember","title":"DeclarationListItem.IsOwnMember","content":"DeclarationListItem.IsOwnMember \nIsOwnMember \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#NameInCode","title":"DeclarationListItem.NameInCode","content":"DeclarationListItem.NameInCode \nNameInCode \n\n Get the text for the declaration as it\u0027s to be inserted into source code.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#NamespaceToOpen","title":"DeclarationListItem.NamespaceToOpen","content":"DeclarationListItem.NamespaceToOpen \nNamespaceToOpen \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#Kind","title":"DeclarationListItem.Kind","content":"DeclarationListItem.Kind \nKind \n\n Get the completion kind of the item\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#MinorPriority","title":"DeclarationListItem.MinorPriority","content":"DeclarationListItem.MinorPriority \nMinorPriority \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-declarationlistitem.html#Name","title":"DeclarationListItem.Name","content":"DeclarationListItem.Name \nName \n\n Get the text to display in the declaration list for the declaration.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitycache.html","title":"EntityCache","content":"EntityCache \n\n Thread safe wrapper over \u0060IAssemblyContentCache\u0060.\n \nEntityCache.( .ctor ) \n( .ctor ) \nEntityCache.Clear \nClear \nEntityCache.Locking \nLocking"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitycache.html#( .ctor )","title":"EntityCache.( .ctor )","content":"EntityCache.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitycache.html#Clear","title":"EntityCache.Clear","content":"EntityCache.Clear \nClear \n\n Clears the cache.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitycache.html#Locking","title":"EntityCache.Locking","content":"EntityCache.Locking \nLocking \n\n Performs an operation on the cache in thread safe manner.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html","title":"EntityKind","content":"EntityKind \n \nEntityKind.Attribute \nAttribute \nEntityKind.Type \nType \nEntityKind.FunctionOrValue \nFunctionOrValue \nEntityKind.Module \nModule"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#Attribute","title":"EntityKind.Attribute","content":"EntityKind.Attribute \nAttribute \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#Type","title":"EntityKind.Type","content":"EntityKind.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#FunctionOrValue","title":"EntityKind.FunctionOrValue","content":"EntityKind.FunctionOrValue \nFunctionOrValue \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-entitykind.html#Module","title":"EntityKind.Module","content":"EntityKind.Module \nModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html","title":"FSharpGlyph","content":"FSharpGlyph \n \nFSharpGlyph.Class \nClass \nFSharpGlyph.Constant \nConstant \nFSharpGlyph.Delegate \nDelegate \nFSharpGlyph.Enum \nEnum \nFSharpGlyph.EnumMember \nEnumMember \nFSharpGlyph.Event \nEvent \nFSharpGlyph.Exception \nException \nFSharpGlyph.Field \nField \nFSharpGlyph.Interface \nInterface \nFSharpGlyph.Method \nMethod \nFSharpGlyph.OverridenMethod \nOverridenMethod \nFSharpGlyph.Module \nModule \nFSharpGlyph.NameSpace \nNameSpace \nFSharpGlyph.Property \nProperty \nFSharpGlyph.Struct \nStruct \nFSharpGlyph.Typedef \nTypedef \nFSharpGlyph.Type \nType \nFSharpGlyph.Union \nUnion \nFSharpGlyph.Variable \nVariable \nFSharpGlyph.ExtensionMethod \nExtensionMethod \nFSharpGlyph.Error \nError"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Class","title":"FSharpGlyph.Class","content":"FSharpGlyph.Class \nClass \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Constant","title":"FSharpGlyph.Constant","content":"FSharpGlyph.Constant \nConstant \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Delegate","title":"FSharpGlyph.Delegate","content":"FSharpGlyph.Delegate \nDelegate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Enum","title":"FSharpGlyph.Enum","content":"FSharpGlyph.Enum \nEnum \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#EnumMember","title":"FSharpGlyph.EnumMember","content":"FSharpGlyph.EnumMember \nEnumMember \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Event","title":"FSharpGlyph.Event","content":"FSharpGlyph.Event \nEvent \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Exception","title":"FSharpGlyph.Exception","content":"FSharpGlyph.Exception \nException \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Field","title":"FSharpGlyph.Field","content":"FSharpGlyph.Field \nField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Interface","title":"FSharpGlyph.Interface","content":"FSharpGlyph.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Method","title":"FSharpGlyph.Method","content":"FSharpGlyph.Method \nMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#OverridenMethod","title":"FSharpGlyph.OverridenMethod","content":"FSharpGlyph.OverridenMethod \nOverridenMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Module","title":"FSharpGlyph.Module","content":"FSharpGlyph.Module \nModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#NameSpace","title":"FSharpGlyph.NameSpace","content":"FSharpGlyph.NameSpace \nNameSpace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Property","title":"FSharpGlyph.Property","content":"FSharpGlyph.Property \nProperty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Struct","title":"FSharpGlyph.Struct","content":"FSharpGlyph.Struct \nStruct \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Typedef","title":"FSharpGlyph.Typedef","content":"FSharpGlyph.Typedef \nTypedef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Type","title":"FSharpGlyph.Type","content":"FSharpGlyph.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Union","title":"FSharpGlyph.Union","content":"FSharpGlyph.Union \nUnion \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Variable","title":"FSharpGlyph.Variable","content":"FSharpGlyph.Variable \nVariable \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#ExtensionMethod","title":"FSharpGlyph.ExtensionMethod","content":"FSharpGlyph.ExtensionMethod \nExtensionMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-fsharpglyph.html#Error","title":"FSharpGlyph.Error","content":"FSharpGlyph.Error \nError \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalparam.html","title":"FindDeclExternalParam","content":"FindDeclExternalParam \n\n Represents the type of a single method parameter\n \nFindDeclExternalParam.ParameterType \nParameterType \nFindDeclExternalParam.IsByRef \nIsByRef \nFindDeclExternalParam.Create \nCreate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalparam.html#ParameterType","title":"FindDeclExternalParam.ParameterType","content":"FindDeclExternalParam.ParameterType \nParameterType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalparam.html#IsByRef","title":"FindDeclExternalParam.IsByRef","content":"FindDeclExternalParam.IsByRef \nIsByRef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalparam.html#Create","title":"FindDeclExternalParam.Create","content":"FindDeclExternalParam.Create \nCreate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html","title":"FindDeclExternalSymbol","content":"FindDeclExternalSymbol \n\n Represents a symbol in an external (non F#) assembly\n \nFindDeclExternalSymbol.Type \nType \nFindDeclExternalSymbol.Constructor \nConstructor \nFindDeclExternalSymbol.Method \nMethod \nFindDeclExternalSymbol.Field \nField \nFindDeclExternalSymbol.Event \nEvent \nFindDeclExternalSymbol.Property \nProperty"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Type","title":"FindDeclExternalSymbol.Type","content":"FindDeclExternalSymbol.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Constructor","title":"FindDeclExternalSymbol.Constructor","content":"FindDeclExternalSymbol.Constructor \nConstructor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Method","title":"FindDeclExternalSymbol.Method","content":"FindDeclExternalSymbol.Method \nMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Field","title":"FindDeclExternalSymbol.Field","content":"FindDeclExternalSymbol.Field \nField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Event","title":"FindDeclExternalSymbol.Event","content":"FindDeclExternalSymbol.Event \nEvent \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternalsymbol.html#Property","title":"FindDeclExternalSymbol.Property","content":"FindDeclExternalSymbol.Property \nProperty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html","title":"FindDeclExternalType","content":"FindDeclExternalType \n\n Represents a type in an external (non F#) assembly.\n \nFindDeclExternalType.Type \nType \nFindDeclExternalType.Array \nArray \nFindDeclExternalType.Pointer \nPointer \nFindDeclExternalType.TypeVar \nTypeVar"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#Type","title":"FindDeclExternalType.Type","content":"FindDeclExternalType.Type \nType \n\n Type defined in non-F# assembly.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#Array","title":"FindDeclExternalType.Array","content":"FindDeclExternalType.Array \nArray \n\n Array of type that is defined in non-F# assembly.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#Pointer","title":"FindDeclExternalType.Pointer","content":"FindDeclExternalType.Pointer \nPointer \n\n Pointer defined in non-F# assembly.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclexternaltype.html#TypeVar","title":"FindDeclExternalType.TypeVar","content":"FindDeclExternalType.TypeVar \nTypeVar \n\n Type variable defined in non-F# assembly.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html","title":"FindDeclFailureReason","content":"FindDeclFailureReason \n\n Represents the reason why the GetDeclarationLocation operation failed.\n \nFindDeclFailureReason.Unknown \nUnknown \nFindDeclFailureReason.NoSourceCode \nNoSourceCode \nFindDeclFailureReason.ProvidedType \nProvidedType \nFindDeclFailureReason.ProvidedMember \nProvidedMember"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#Unknown","title":"FindDeclFailureReason.Unknown","content":"FindDeclFailureReason.Unknown \nUnknown \n\n Generic reason: no particular information about error apart from a message\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#NoSourceCode","title":"FindDeclFailureReason.NoSourceCode","content":"FindDeclFailureReason.NoSourceCode \nNoSourceCode \n\n Source code file is not available\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#ProvidedType","title":"FindDeclFailureReason.ProvidedType","content":"FindDeclFailureReason.ProvidedType \nProvidedType \n\n Trying to find declaration of ProvidedType without TypeProviderDefinitionLocationAttribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclfailurereason.html#ProvidedMember","title":"FindDeclFailureReason.ProvidedMember","content":"FindDeclFailureReason.ProvidedMember \nProvidedMember \n\n Trying to find declaration of ProvidedMember without TypeProviderDefinitionLocationAttribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html","title":"FindDeclResult","content":"FindDeclResult \n\n Represents the result of the GetDeclarationLocation operation.\n \nFindDeclResult.DeclNotFound \nDeclNotFound \nFindDeclResult.DeclFound \nDeclFound \nFindDeclResult.ExternalDecl \nExternalDecl"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html#DeclNotFound","title":"FindDeclResult.DeclNotFound","content":"FindDeclResult.DeclNotFound \nDeclNotFound \n\n Indicates a declaration location was not found, with an additional reason\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html#DeclFound","title":"FindDeclResult.DeclFound","content":"FindDeclResult.DeclFound \nDeclFound \n\n Indicates a declaration location was found\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-finddeclresult.html#ExternalDecl","title":"FindDeclResult.ExternalDecl","content":"FindDeclResult.ExternalDecl \nExternalDecl \n\n Indicates an external declaration was found\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-iassemblycontentcache.html","title":"IAssemblyContentCache","content":"IAssemblyContentCache \n\n Assembly content cache.\n \nIAssemblyContentCache.Set \nSet \nIAssemblyContentCache.TryGet \nTryGet"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-iassemblycontentcache.html#Set","title":"IAssemblyContentCache.Set","content":"IAssemblyContentCache.Set \nSet \n\n Store an assembly content.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-iassemblycontentcache.html#TryGet","title":"IAssemblyContentCache.TryGet","content":"IAssemblyContentCache.TryGet \nTryGet \n\n Try get an assembly cached content.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html","title":"InheritanceContext","content":"InheritanceContext \n \nInheritanceContext.Class \nClass \nInheritanceContext.Interface \nInterface \nInheritanceContext.Unknown \nUnknown"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html#Class","title":"InheritanceContext.Class","content":"InheritanceContext.Class \nClass \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html#Interface","title":"InheritanceContext.Interface","content":"InheritanceContext.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-inheritancecontext.html#Unknown","title":"InheritanceContext.Unknown","content":"InheritanceContext.Unknown \nUnknown \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontext.html","title":"InsertionContext","content":"InsertionContext \n\n Insert open namespace context.\n \nInsertionContext.ScopeKind \nScopeKind \nInsertionContext.Pos \nPos"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontext.html#ScopeKind","title":"InsertionContext.ScopeKind","content":"InsertionContext.ScopeKind \nScopeKind \n\n Current scope kind.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontext.html#Pos","title":"InsertionContext.Pos","content":"InsertionContext.Pos \nPos \n\n Current position (F# compiler line number).\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html","title":"InsertionContextEntity","content":"InsertionContextEntity \n\n Helper data structure representing a symbol, suitable for implementing unresolved identifiers resolution code fixes.\n \nInsertionContextEntity.FullRelativeName \nFullRelativeName \nInsertionContextEntity.Qualifier \nQualifier \nInsertionContextEntity.Namespace \nNamespace \nInsertionContextEntity.FullDisplayName \nFullDisplayName \nInsertionContextEntity.LastIdent \nLastIdent"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html#FullRelativeName","title":"InsertionContextEntity.FullRelativeName","content":"InsertionContextEntity.FullRelativeName \nFullRelativeName \n\n Full name, relative to the current scope.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html#Qualifier","title":"InsertionContextEntity.Qualifier","content":"InsertionContextEntity.Qualifier \nQualifier \n\n Ident parts needed to append to the current ident to make it resolvable in current scope.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html#Namespace","title":"InsertionContextEntity.Namespace","content":"InsertionContextEntity.Namespace \nNamespace \n\n Namespace that is needed to open to make the entity resolvable in the current scope.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html#FullDisplayName","title":"InsertionContextEntity.FullDisplayName","content":"InsertionContextEntity.FullDisplayName \nFullDisplayName \n\n Full display name (i.e. last ident plus modules with \u0060RequireQualifiedAccess\u0060 attribute prefixed).\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-insertioncontextentity.html#LastIdent","title":"InsertionContextEntity.LastIdent","content":"InsertionContextEntity.LastIdent \nLastIdent \n\n Last part of the entity\u0027s full name.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html","title":"InterfaceData","content":"InterfaceData \n\n Capture information about an interface in ASTs\n \nInterfaceData.Range \nRange \nInterfaceData.TypeParameters \nTypeParameters \nInterfaceData.Interface \nInterface \nInterfaceData.ObjExpr \nObjExpr"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html#Range","title":"InterfaceData.Range","content":"InterfaceData.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html#TypeParameters","title":"InterfaceData.TypeParameters","content":"InterfaceData.TypeParameters \nTypeParameters \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html#Interface","title":"InterfaceData.Interface","content":"InterfaceData.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-interfacedata.html#ObjExpr","title":"InterfaceData.ObjExpr","content":"InterfaceData.ObjExpr \nObjExpr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-lookuptype.html","title":"LookupType","content":"LookupType \n\n Entity lookup type.\n \nLookupType.Fuzzy \nFuzzy \nLookupType.Precise \nPrecise"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-lookuptype.html#Fuzzy","title":"LookupType.Fuzzy","content":"LookupType.Fuzzy \nFuzzy \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-lookuptype.html#Precise","title":"LookupType.Precise","content":"LookupType.Precise \nPrecise \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-maybeunresolvedident.html","title":"MaybeUnresolvedIdent","content":"MaybeUnresolvedIdent \n\n \u0060ShortIdent\u0060 with a flag indicating if it\u0027s resolved in some scope.\n \nMaybeUnresolvedIdent.Ident \nIdent \nMaybeUnresolvedIdent.Resolved \nResolved"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-maybeunresolvedident.html#Ident","title":"MaybeUnresolvedIdent.Ident","content":"MaybeUnresolvedIdent.Ident \nIdent \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-maybeunresolvedident.html#Resolved","title":"MaybeUnresolvedIdent.Resolved","content":"MaybeUnresolvedIdent.Resolved \nResolved \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroup.html","title":"MethodGroup","content":"MethodGroup \n\n Represents a group of methods (or other items) returned by GetMethods.  \n \nMethodGroup.Methods \nMethods \nMethodGroup.MethodName \nMethodName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroup.html#Methods","title":"MethodGroup.Methods","content":"MethodGroup.Methods \nMethods \n\n The methods (or other items) in the group\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroup.html#MethodName","title":"MethodGroup.MethodName","content":"MethodGroup.MethodName \nMethodName \n\n The shared name of the methods (or other items) in the group\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html","title":"MethodGroupItem","content":"MethodGroupItem \n\n Represents one method (or other item) in a method group. The item may represent either a method or \n a single, non-overloaded item such as union case or a named function value.\n \nMethodGroupItem.Parameters \nParameters \nMethodGroupItem.ReturnTypeText \nReturnTypeText \nMethodGroupItem.Description \nDescription \nMethodGroupItem.StaticParameters \nStaticParameters \nMethodGroupItem.HasParameters \nHasParameters \nMethodGroupItem.HasParamArrayArg \nHasParamArrayArg \nMethodGroupItem.XmlDoc \nXmlDoc"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#Parameters","title":"MethodGroupItem.Parameters","content":"MethodGroupItem.Parameters \nParameters \n\n The parameters of the method in the overload set\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#ReturnTypeText","title":"MethodGroupItem.ReturnTypeText","content":"MethodGroupItem.ReturnTypeText \nReturnTypeText \n\n The tagged text for the return type for the method (or other item)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#Description","title":"MethodGroupItem.Description","content":"MethodGroupItem.Description \nDescription \n\n The description representation for the method (or other item)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#StaticParameters","title":"MethodGroupItem.StaticParameters","content":"MethodGroupItem.StaticParameters \nStaticParameters \n\n Does the type name or method support a static arguments list, like TP\u003C42,\u0022foo\u0022\u003E or conn.CreateCommand\u003C42, \u0022foo\u0022\u003E(arg1, arg2)?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#HasParameters","title":"MethodGroupItem.HasParameters","content":"MethodGroupItem.HasParameters \nHasParameters \n\n Does the method support an arguments list?  This is always true except for static type instantiations like TP\u003C42,\u0022foo\u0022\u003E.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#HasParamArrayArg","title":"MethodGroupItem.HasParamArrayArg","content":"MethodGroupItem.HasParamArrayArg \nHasParamArrayArg \n\n Does the method support a params list arg?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitem.html#XmlDoc","title":"MethodGroupItem.XmlDoc","content":"MethodGroupItem.XmlDoc \nXmlDoc \n\n The documentation for the item\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitemparameter.html","title":"MethodGroupItemParameter","content":"MethodGroupItemParameter \n\n Represents one parameter for one method (or other item) in a group. \n \nMethodGroupItemParameter.IsOptional \nIsOptional \nMethodGroupItemParameter.Display \nDisplay \nMethodGroupItemParameter.ParameterName \nParameterName \nMethodGroupItemParameter.CanonicalTypeTextForSorting \nCanonicalTypeTextForSorting"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitemparameter.html#IsOptional","title":"MethodGroupItemParameter.IsOptional","content":"MethodGroupItemParameter.IsOptional \nIsOptional \n\n Is the parameter optional\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitemparameter.html#Display","title":"MethodGroupItemParameter.Display","content":"MethodGroupItemParameter.Display \nDisplay \n\n The representation for the parameter including its name, its type and visual indicators of other\n information such as whether it is optional.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitemparameter.html#ParameterName","title":"MethodGroupItemParameter.ParameterName","content":"MethodGroupItemParameter.ParameterName \nParameterName \n\n The name of the parameter.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-methodgroupitemparameter.html#CanonicalTypeTextForSorting","title":"MethodGroupItemParameter.CanonicalTypeTextForSorting","content":"MethodGroupItemParameter.CanonicalTypeTextForSorting \nCanonicalTypeTextForSorting \n\n A key that can be used for sorting the parameters, used to help sort overloads.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-modulekind.html","title":"ModuleKind","content":"ModuleKind \n \nModuleKind.IsAutoOpen \nIsAutoOpen \nModuleKind.HasModuleSuffix \nHasModuleSuffix"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-modulekind.html#IsAutoOpen","title":"ModuleKind.IsAutoOpen","content":"ModuleKind.IsAutoOpen \nIsAutoOpen \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-modulekind.html#HasModuleSuffix","title":"ModuleKind.HasModuleSuffix","content":"ModuleKind.HasModuleSuffix \nHasModuleSuffix \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainer.html","title":"NavigableContainer","content":"NavigableContainer \n \nNavigableContainer.Type \nType \nNavigableContainer.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainer.html#Type","title":"NavigableContainer.Type","content":"NavigableContainer.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainer.html#Name","title":"NavigableContainer.Name","content":"NavigableContainer.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html","title":"NavigableContainerType","content":"NavigableContainerType \n \nNavigableContainerType.File \nFile \nNavigableContainerType.Namespace \nNamespace \nNavigableContainerType.Module \nModule \nNavigableContainerType.Type \nType \nNavigableContainerType.Exception \nException"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#File","title":"NavigableContainerType.File","content":"NavigableContainerType.File \nFile \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#Namespace","title":"NavigableContainerType.Namespace","content":"NavigableContainerType.Namespace \nNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#Module","title":"NavigableContainerType.Module","content":"NavigableContainerType.Module \nModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#Type","title":"NavigableContainerType.Type","content":"NavigableContainerType.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigablecontainertype.html#Exception","title":"NavigableContainerType.Exception","content":"NavigableContainerType.Exception \nException \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html","title":"NavigableItem","content":"NavigableItem \n \nNavigableItem.Name \nName \nNavigableItem.Range \nRange \nNavigableItem.IsSignature \nIsSignature \nNavigableItem.Kind \nKind \nNavigableItem.Container \nContainer"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#Name","title":"NavigableItem.Name","content":"NavigableItem.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#Range","title":"NavigableItem.Range","content":"NavigableItem.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#IsSignature","title":"NavigableItem.IsSignature","content":"NavigableItem.IsSignature \nIsSignature \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#Kind","title":"NavigableItem.Kind","content":"NavigableItem.Kind \nKind \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitem.html#Container","title":"NavigableItem.Container","content":"NavigableItem.Container \nContainer \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html","title":"NavigableItemKind","content":"NavigableItemKind \n \nNavigableItemKind.Module \nModule \nNavigableItemKind.ModuleAbbreviation \nModuleAbbreviation \nNavigableItemKind.Exception \nException \nNavigableItemKind.Type \nType \nNavigableItemKind.ModuleValue \nModuleValue \nNavigableItemKind.Field \nField \nNavigableItemKind.Property \nProperty \nNavigableItemKind.Constructor \nConstructor \nNavigableItemKind.Member \nMember \nNavigableItemKind.EnumCase \nEnumCase \nNavigableItemKind.UnionCase \nUnionCase"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Module","title":"NavigableItemKind.Module","content":"NavigableItemKind.Module \nModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#ModuleAbbreviation","title":"NavigableItemKind.ModuleAbbreviation","content":"NavigableItemKind.ModuleAbbreviation \nModuleAbbreviation \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Exception","title":"NavigableItemKind.Exception","content":"NavigableItemKind.Exception \nException \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Type","title":"NavigableItemKind.Type","content":"NavigableItemKind.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#ModuleValue","title":"NavigableItemKind.ModuleValue","content":"NavigableItemKind.ModuleValue \nModuleValue \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Field","title":"NavigableItemKind.Field","content":"NavigableItemKind.Field \nField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Property","title":"NavigableItemKind.Property","content":"NavigableItemKind.Property \nProperty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Constructor","title":"NavigableItemKind.Constructor","content":"NavigableItemKind.Constructor \nConstructor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#Member","title":"NavigableItemKind.Member","content":"NavigableItemKind.Member \nMember \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#EnumCase","title":"NavigableItemKind.EnumCase","content":"NavigableItemKind.EnumCase \nEnumCase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigableitemkind.html#UnionCase","title":"NavigableItemKind.UnionCase","content":"NavigableItemKind.UnionCase \nUnionCase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html","title":"NavigationEntityKind","content":"NavigationEntityKind \n \nNavigationEntityKind.Namespace \nNamespace \nNavigationEntityKind.Module \nModule \nNavigationEntityKind.Class \nClass \nNavigationEntityKind.Exception \nException \nNavigationEntityKind.Interface \nInterface \nNavigationEntityKind.Record \nRecord \nNavigationEntityKind.Enum \nEnum \nNavigationEntityKind.Union \nUnion"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Namespace","title":"NavigationEntityKind.Namespace","content":"NavigationEntityKind.Namespace \nNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Module","title":"NavigationEntityKind.Module","content":"NavigationEntityKind.Module \nModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Class","title":"NavigationEntityKind.Class","content":"NavigationEntityKind.Class \nClass \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Exception","title":"NavigationEntityKind.Exception","content":"NavigationEntityKind.Exception \nException \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Interface","title":"NavigationEntityKind.Interface","content":"NavigationEntityKind.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Record","title":"NavigationEntityKind.Record","content":"NavigationEntityKind.Record \nRecord \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Enum","title":"NavigationEntityKind.Enum","content":"NavigationEntityKind.Enum \nEnum \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationentitykind.html#Union","title":"NavigationEntityKind.Union","content":"NavigationEntityKind.Union \nUnion \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html","title":"NavigationItem","content":"NavigationItem \n\n Represents an item to be displayed in the navigation bar\n \nNavigationItem.Glyph \nGlyph \nNavigationItem.UniqueName \nUniqueName \nNavigationItem.Access \nAccess \nNavigationItem.IsSingleTopLevel \nIsSingleTopLevel \nNavigationItem.Range \nRange \nNavigationItem.EnclosingEntityKind \nEnclosingEntityKind \nNavigationItem.Kind \nKind \nNavigationItem.BodyRange \nBodyRange \nNavigationItem.Name \nName \nNavigationItem.IsAbstract \nIsAbstract"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#Glyph","title":"NavigationItem.Glyph","content":"NavigationItem.Glyph \nGlyph \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#UniqueName","title":"NavigationItem.UniqueName","content":"NavigationItem.UniqueName \nUniqueName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#Access","title":"NavigationItem.Access","content":"NavigationItem.Access \nAccess \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#IsSingleTopLevel","title":"NavigationItem.IsSingleTopLevel","content":"NavigationItem.IsSingleTopLevel \nIsSingleTopLevel \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#Range","title":"NavigationItem.Range","content":"NavigationItem.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#EnclosingEntityKind","title":"NavigationItem.EnclosingEntityKind","content":"NavigationItem.EnclosingEntityKind \nEnclosingEntityKind \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#Kind","title":"NavigationItem.Kind","content":"NavigationItem.Kind \nKind \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#BodyRange","title":"NavigationItem.BodyRange","content":"NavigationItem.BodyRange \nBodyRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#Name","title":"NavigationItem.Name","content":"NavigationItem.Name \nName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitem.html#IsAbstract","title":"NavigationItem.IsAbstract","content":"NavigationItem.IsAbstract \nIsAbstract \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html","title":"NavigationItemKind","content":"NavigationItemKind \n\n Indicates a kind of item to show in an F# navigation bar\n \nNavigationItemKind.Namespace \nNamespace \nNavigationItemKind.ModuleFile \nModuleFile \nNavigationItemKind.Exception \nException \nNavigationItemKind.Module \nModule \nNavigationItemKind.Type \nType \nNavigationItemKind.Method \nMethod \nNavigationItemKind.Property \nProperty \nNavigationItemKind.Field \nField \nNavigationItemKind.Other \nOther"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Namespace","title":"NavigationItemKind.Namespace","content":"NavigationItemKind.Namespace \nNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#ModuleFile","title":"NavigationItemKind.ModuleFile","content":"NavigationItemKind.ModuleFile \nModuleFile \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Exception","title":"NavigationItemKind.Exception","content":"NavigationItemKind.Exception \nException \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Module","title":"NavigationItemKind.Module","content":"NavigationItemKind.Module \nModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Type","title":"NavigationItemKind.Type","content":"NavigationItemKind.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Method","title":"NavigationItemKind.Method","content":"NavigationItemKind.Method \nMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Property","title":"NavigationItemKind.Property","content":"NavigationItemKind.Property \nProperty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Field","title":"NavigationItemKind.Field","content":"NavigationItemKind.Field \nField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitemkind.html#Other","title":"NavigationItemKind.Other","content":"NavigationItemKind.Other \nOther \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitems.html","title":"NavigationItems","content":"NavigationItems \n\n Represents result of \u0027GetNavigationItems\u0027 operation - this contains\n all the members and currently selected indices. First level correspond to\n types \u0026 modules and second level are methods etc.\n \nNavigationItems.Declarations \nDeclarations"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationitems.html#Declarations","title":"NavigationItems.Declarations","content":"NavigationItems.Declarations \nDeclarations \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationtopleveldeclaration.html","title":"NavigationTopLevelDeclaration","content":"NavigationTopLevelDeclaration \n\n Represents top-level declarations (that should be in the type drop-down)\n with nested declarations (that can be shown in the member drop-down)\n \nNavigationTopLevelDeclaration.Declaration \nDeclaration \nNavigationTopLevelDeclaration.Nested \nNested"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationtopleveldeclaration.html#Declaration","title":"NavigationTopLevelDeclaration.Declaration","content":"NavigationTopLevelDeclaration.Declaration \nDeclaration \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-navigationtopleveldeclaration.html#Nested","title":"NavigationTopLevelDeclaration.Nested","content":"NavigationTopLevelDeclaration.Nested \nNested \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-openstatementinsertionpoint.html","title":"OpenStatementInsertionPoint","content":"OpenStatementInsertionPoint \n\n Where open statements should be added.\n \nOpenStatementInsertionPoint.TopLevel \nTopLevel \nOpenStatementInsertionPoint.Nearest \nNearest"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-openstatementinsertionpoint.html#TopLevel","title":"OpenStatementInsertionPoint.TopLevel","content":"OpenStatementInsertionPoint.TopLevel \nTopLevel \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-openstatementinsertionpoint.html#Nearest","title":"OpenStatementInsertionPoint.Nearest","content":"OpenStatementInsertionPoint.Nearest \nNearest \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html","title":"ParameterLocations","content":"ParameterLocations \n\n Represents the locations relevant to activating parameter info in an IDE\n \nParameterLocations.OpenParenLocation \nOpenParenLocation \nParameterLocations.IsThereACloseParen \nIsThereACloseParen \nParameterLocations.LongId \nLongId \nParameterLocations.LongIdEndLocation \nLongIdEndLocation \nParameterLocations.LongIdStartLocation \nLongIdStartLocation \nParameterLocations.NamedParamNames \nNamedParamNames \nParameterLocations.TupleEndLocations \nTupleEndLocations \nParameterLocations.Find \nFind"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#OpenParenLocation","title":"ParameterLocations.OpenParenLocation","content":"ParameterLocations.OpenParenLocation \nOpenParenLocation \n\n The location of the open-parentheses\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#IsThereACloseParen","title":"ParameterLocations.IsThereACloseParen","content":"ParameterLocations.IsThereACloseParen \nIsThereACloseParen \n\n Is false if either this is a call without parens \u0022f x\u0022 or the parser recovered as in \u0022f(x,y\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#LongId","title":"ParameterLocations.LongId","content":"ParameterLocations.LongId \nLongId \n\n The text of the long identifier prior to the open-parentheses\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#LongIdEndLocation","title":"ParameterLocations.LongIdEndLocation","content":"ParameterLocations.LongIdEndLocation \nLongIdEndLocation \n\n The end location of long identifier prior to the open-parentheses\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#LongIdStartLocation","title":"ParameterLocations.LongIdStartLocation","content":"ParameterLocations.LongIdStartLocation \nLongIdStartLocation \n\n The start location of long identifier prior to the open-parentheses\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#NamedParamNames","title":"ParameterLocations.NamedParamNames","content":"ParameterLocations.NamedParamNames \nNamedParamNames \n\n Either empty or a name if an actual named parameter; f(0,a=4,?b=None) would be [|None; Some \u0022a\u0022; Some \u0022b\u0022|]\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#TupleEndLocations","title":"ParameterLocations.TupleEndLocations","content":"ParameterLocations.TupleEndLocations \nTupleEndLocations \n\n The locations of commas and close parenthesis (or, last char of last arg, if no final close parenthesis)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-parameterlocations.html#Find","title":"ParameterLocations.Find","content":"ParameterLocations.Find \nFind \n\n Find the information about parameter info locations at a particular source location\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html","title":"PartialLongName","content":"PartialLongName \n\n Qualified long name.\n \nPartialLongName.Empty \nEmpty \nPartialLongName.QualifyingIdents \nQualifyingIdents \nPartialLongName.PartialIdent \nPartialIdent \nPartialLongName.EndColumn \nEndColumn \nPartialLongName.LastDotPos \nLastDotPos"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html#Empty","title":"PartialLongName.Empty","content":"PartialLongName.Empty \nEmpty \n\n Empty partial long name.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html#QualifyingIdents","title":"PartialLongName.QualifyingIdents","content":"PartialLongName.QualifyingIdents \nQualifyingIdents \n\n Qualifying idents, prior to the last dot, not including the last part.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html#PartialIdent","title":"PartialLongName.PartialIdent","content":"PartialLongName.PartialIdent \nPartialIdent \n\n Last part of long ident.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html#EndColumn","title":"PartialLongName.EndColumn","content":"PartialLongName.EndColumn \nEndColumn \n\n The column number at the end of full partial name.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-partiallongname.html#LastDotPos","title":"PartialLongName.LastDotPos","content":"PartialLongName.LastDotPos \nLastDotPos \n\n Position of the last dot.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html","title":"RecordContext","content":"RecordContext \n \nRecordContext.CopyOnUpdate \nCopyOnUpdate \nRecordContext.Constructor \nConstructor \nRecordContext.New \nNew \nRecordContext.Declaration \nDeclaration"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#CopyOnUpdate","title":"RecordContext.CopyOnUpdate","content":"RecordContext.CopyOnUpdate \nCopyOnUpdate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#Constructor","title":"RecordContext.Constructor","content":"RecordContext.Constructor \nConstructor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#New","title":"RecordContext.New","content":"RecordContext.New \nNew \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-recordcontext.html#Declaration","title":"RecordContext.Declaration","content":"RecordContext.Declaration \nDeclaration \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html","title":"ScopeKind","content":"ScopeKind \n\n Kind of lexical scope.\n \nScopeKind.Namespace \nNamespace \nScopeKind.TopModule \nTopModule \nScopeKind.NestedModule \nNestedModule \nScopeKind.OpenDeclaration \nOpenDeclaration \nScopeKind.HashDirective \nHashDirective"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#Namespace","title":"ScopeKind.Namespace","content":"ScopeKind.Namespace \nNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#TopModule","title":"ScopeKind.TopModule","content":"ScopeKind.TopModule \nTopModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#NestedModule","title":"ScopeKind.NestedModule","content":"ScopeKind.NestedModule \nNestedModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#OpenDeclaration","title":"ScopeKind.OpenDeclaration","content":"ScopeKind.OpenDeclaration \nOpenDeclaration \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-scopekind.html#HashDirective","title":"ScopeKind.HashDirective","content":"ScopeKind.HashDirective \nHashDirective \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationitem.html","title":"SemanticClassificationItem","content":"SemanticClassificationItem \n \nSemanticClassificationItem.( .ctor ) \n( .ctor ) \nSemanticClassificationItem.Range \nRange \nSemanticClassificationItem.Type \nType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationitem.html#( .ctor )","title":"SemanticClassificationItem.( .ctor )","content":"SemanticClassificationItem.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationitem.html#Range","title":"SemanticClassificationItem.Range","content":"SemanticClassificationItem.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationitem.html#Type","title":"SemanticClassificationItem.Type","content":"SemanticClassificationItem.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html","title":"SemanticClassificationType","content":"SemanticClassificationType \n\n A kind that determines what range in a source\u0027s text is semantically classified as after type-checking.\n \nSemanticClassificationType.ReferenceType \nReferenceType \nSemanticClassificationType.ValueType \nValueType \nSemanticClassificationType.UnionCase \nUnionCase \nSemanticClassificationType.UnionCaseField \nUnionCaseField \nSemanticClassificationType.Function \nFunction \nSemanticClassificationType.Property \nProperty \nSemanticClassificationType.MutableVar \nMutableVar \nSemanticClassificationType.Module \nModule \nSemanticClassificationType.Namespace \nNamespace \nSemanticClassificationType.Printf \nPrintf \nSemanticClassificationType.ComputationExpression \nComputationExpression \nSemanticClassificationType.IntrinsicFunction \nIntrinsicFunction \nSemanticClassificationType.Enumeration \nEnumeration \nSemanticClassificationType.Interface \nInterface \nSemanticClassificationType.TypeArgument \nTypeArgument \nSemanticClassificationType.Operator \nOperator \nSemanticClassificationType.DisposableType \nDisposableType \nSemanticClassificationType.DisposableTopLevelValue \nDisposableTopLevelValue \nSemanticClassificationType.DisposableLocalValue \nDisposableLocalValue \nSemanticClassificationType.Method \nMethod \nSemanticClassificationType.ExtensionMethod \nExtensionMethod \nSemanticClassificationType.ConstructorForReferenceType \nConstructorForReferenceType \nSemanticClassificationType.ConstructorForValueType \nConstructorForValueType \nSemanticClassificationType.Literal \nLiteral \nSemanticClassificationType.RecordField \nRecordField \nSemanticClassificationType.MutableRecordField \nMutableRecordField \nSemanticClassificationType.RecordFieldAsFunction \nRecordFieldAsFunction \nSemanticClassificationType.Exception \nException \nSemanticClassificationType.Field \nField \nSemanticClassificationType.Event \nEvent \nSemanticClassificationType.Delegate \nDelegate \nSemanticClassificationType.NamedArgument \nNamedArgument \nSemanticClassificationType.Value \nValue \nSemanticClassificationType.LocalValue \nLocalValue \nSemanticClassificationType.Type \nType \nSemanticClassificationType.TypeDef \nTypeDef \nSemanticClassificationType.Plaintext \nPlaintext"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ReferenceType","title":"SemanticClassificationType.ReferenceType","content":"SemanticClassificationType.ReferenceType \nReferenceType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ValueType","title":"SemanticClassificationType.ValueType","content":"SemanticClassificationType.ValueType \nValueType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#UnionCase","title":"SemanticClassificationType.UnionCase","content":"SemanticClassificationType.UnionCase \nUnionCase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#UnionCaseField","title":"SemanticClassificationType.UnionCaseField","content":"SemanticClassificationType.UnionCaseField \nUnionCaseField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Function","title":"SemanticClassificationType.Function","content":"SemanticClassificationType.Function \nFunction \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Property","title":"SemanticClassificationType.Property","content":"SemanticClassificationType.Property \nProperty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#MutableVar","title":"SemanticClassificationType.MutableVar","content":"SemanticClassificationType.MutableVar \nMutableVar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Module","title":"SemanticClassificationType.Module","content":"SemanticClassificationType.Module \nModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Namespace","title":"SemanticClassificationType.Namespace","content":"SemanticClassificationType.Namespace \nNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Printf","title":"SemanticClassificationType.Printf","content":"SemanticClassificationType.Printf \nPrintf \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ComputationExpression","title":"SemanticClassificationType.ComputationExpression","content":"SemanticClassificationType.ComputationExpression \nComputationExpression \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#IntrinsicFunction","title":"SemanticClassificationType.IntrinsicFunction","content":"SemanticClassificationType.IntrinsicFunction \nIntrinsicFunction \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Enumeration","title":"SemanticClassificationType.Enumeration","content":"SemanticClassificationType.Enumeration \nEnumeration \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Interface","title":"SemanticClassificationType.Interface","content":"SemanticClassificationType.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#TypeArgument","title":"SemanticClassificationType.TypeArgument","content":"SemanticClassificationType.TypeArgument \nTypeArgument \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Operator","title":"SemanticClassificationType.Operator","content":"SemanticClassificationType.Operator \nOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#DisposableType","title":"SemanticClassificationType.DisposableType","content":"SemanticClassificationType.DisposableType \nDisposableType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#DisposableTopLevelValue","title":"SemanticClassificationType.DisposableTopLevelValue","content":"SemanticClassificationType.DisposableTopLevelValue \nDisposableTopLevelValue \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#DisposableLocalValue","title":"SemanticClassificationType.DisposableLocalValue","content":"SemanticClassificationType.DisposableLocalValue \nDisposableLocalValue \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Method","title":"SemanticClassificationType.Method","content":"SemanticClassificationType.Method \nMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ExtensionMethod","title":"SemanticClassificationType.ExtensionMethod","content":"SemanticClassificationType.ExtensionMethod \nExtensionMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ConstructorForReferenceType","title":"SemanticClassificationType.ConstructorForReferenceType","content":"SemanticClassificationType.ConstructorForReferenceType \nConstructorForReferenceType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#ConstructorForValueType","title":"SemanticClassificationType.ConstructorForValueType","content":"SemanticClassificationType.ConstructorForValueType \nConstructorForValueType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Literal","title":"SemanticClassificationType.Literal","content":"SemanticClassificationType.Literal \nLiteral \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#RecordField","title":"SemanticClassificationType.RecordField","content":"SemanticClassificationType.RecordField \nRecordField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#MutableRecordField","title":"SemanticClassificationType.MutableRecordField","content":"SemanticClassificationType.MutableRecordField \nMutableRecordField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#RecordFieldAsFunction","title":"SemanticClassificationType.RecordFieldAsFunction","content":"SemanticClassificationType.RecordFieldAsFunction \nRecordFieldAsFunction \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Exception","title":"SemanticClassificationType.Exception","content":"SemanticClassificationType.Exception \nException \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Field","title":"SemanticClassificationType.Field","content":"SemanticClassificationType.Field \nField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Event","title":"SemanticClassificationType.Event","content":"SemanticClassificationType.Event \nEvent \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Delegate","title":"SemanticClassificationType.Delegate","content":"SemanticClassificationType.Delegate \nDelegate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#NamedArgument","title":"SemanticClassificationType.NamedArgument","content":"SemanticClassificationType.NamedArgument \nNamedArgument \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Value","title":"SemanticClassificationType.Value","content":"SemanticClassificationType.Value \nValue \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#LocalValue","title":"SemanticClassificationType.LocalValue","content":"SemanticClassificationType.LocalValue \nLocalValue \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Type","title":"SemanticClassificationType.Type","content":"SemanticClassificationType.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#TypeDef","title":"SemanticClassificationType.TypeDef","content":"SemanticClassificationType.TypeDef \nTypeDef \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationtype.html#Plaintext","title":"SemanticClassificationType.Plaintext","content":"SemanticClassificationType.Plaintext \nPlaintext \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationview.html","title":"SemanticClassificationView","content":"SemanticClassificationView \n\n Provides a read only view to iterate over the semantic classification contents.\n \nSemanticClassificationView.ForEach \nForEach"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-semanticclassificationview.html#ForEach","title":"SemanticClassificationView.ForEach","content":"SemanticClassificationView.ForEach \nForEach \n\n Iterate through the stored SemanticClassificationItem entries from the store and apply the passed function on each entry.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-shortidents.html","title":"ShortIdents","content":"ShortIdents \n\n An array of \u0060ShortIdent\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html","title":"ToolTipElement","content":"ToolTipElement \n\n A single tool tip display element\n \nToolTipElement.Single \nSingle \nToolTipElement.None \nNone \nToolTipElement.Group \nGroup \nToolTipElement.CompositionError \nCompositionError"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#Single","title":"ToolTipElement.Single","content":"ToolTipElement.Single \nSingle \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#None","title":"ToolTipElement.None","content":"ToolTipElement.None \nNone \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#Group","title":"ToolTipElement.Group","content":"ToolTipElement.Group \nGroup \n\n A single type, method, etc with comment. May represent a method overload group.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelement.html#CompositionError","title":"ToolTipElement.CompositionError","content":"ToolTipElement.CompositionError \nCompositionError \n\n An error occurred formatting this element\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html","title":"ToolTipElementData","content":"ToolTipElementData \n\n A single data tip display element\n \nToolTipElementData.MainDescription \nMainDescription \nToolTipElementData.XmlDoc \nXmlDoc \nToolTipElementData.TypeMapping \nTypeMapping \nToolTipElementData.Remarks \nRemarks \nToolTipElementData.ParamName \nParamName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#MainDescription","title":"ToolTipElementData.MainDescription","content":"ToolTipElementData.MainDescription \nMainDescription \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#XmlDoc","title":"ToolTipElementData.XmlDoc","content":"ToolTipElementData.XmlDoc \nXmlDoc \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#TypeMapping","title":"ToolTipElementData.TypeMapping","content":"ToolTipElementData.TypeMapping \nTypeMapping \n\n typar instantiation text, to go after xml\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#Remarks","title":"ToolTipElementData.Remarks","content":"ToolTipElementData.Remarks \nRemarks \n\n Extra text, goes at the end\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltipelementdata.html#ParamName","title":"ToolTipElementData.ParamName","content":"ToolTipElementData.ParamName \nParamName \n\n Parameter name\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltiptext.html","title":"ToolTipText","content":"ToolTipText \n\n Information for building a tool tip box.\n \nToolTipText.ToolTipText \nToolTipText"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-tooltiptext.html#ToolTipText","title":"ToolTipText.ToolTipText","content":"ToolTipText.ToolTipText \nToolTipText \n\n A list of data tip elements to display.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unresolvedsymbol.html","title":"UnresolvedSymbol","content":"UnresolvedSymbol \n \nUnresolvedSymbol.FullName \nFullName \nUnresolvedSymbol.DisplayName \nDisplayName \nUnresolvedSymbol.Namespace \nNamespace"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unresolvedsymbol.html#FullName","title":"UnresolvedSymbol.FullName","content":"UnresolvedSymbol.FullName \nFullName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unresolvedsymbol.html#DisplayName","title":"UnresolvedSymbol.DisplayName","content":"UnresolvedSymbol.DisplayName \nDisplayName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-unresolvedsymbol.html#Namespace","title":"UnresolvedSymbol.Namespace","content":"UnresolvedSymbol.Namespace \nNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldocable.html","title":"XmlDocable","content":"XmlDocable \n\n Represent an Xml documentation block in source code\n \nXmlDocable.XmlDocable \nXmlDocable"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-editorservices-xmldocable.html#XmlDocable","title":"XmlDocable.XmlDocable","content":"XmlDocable.XmlDocable \nXmlDocable \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-filesystemautoopens.html","title":"FileSystemAutoOpens","content":"FileSystemAutoOpens \n \nFileSystemAutoOpens.FileSystem \nFileSystem"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-filesystemautoopens.html#FileSystem","title":"FileSystemAutoOpens.FileSystem","content":"FileSystemAutoOpens.FileSystem \nFileSystem \n\n The global hook into the file system\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html","title":"StreamExtensions","content":"StreamExtensions \n \nStreamExtensions.GetWriter \nGetWriter \nStreamExtensions.WriteAllLines \nWriteAllLines \nStreamExtensions.Write \nWrite \nStreamExtensions.GetReader \nGetReader \nStreamExtensions.ReadBytes \nReadBytes \nStreamExtensions.ReadAllBytes \nReadAllBytes \nStreamExtensions.ReadAllText \nReadAllText \nStreamExtensions.ReadLines \nReadLines \nStreamExtensions.ReadAllLines \nReadAllLines \nStreamExtensions.WriteAllText \nWriteAllText \nStreamExtensions.AsByteMemory \nAsByteMemory"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#GetWriter","title":"StreamExtensions.GetWriter","content":"StreamExtensions.GetWriter \nGetWriter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#WriteAllLines","title":"StreamExtensions.WriteAllLines","content":"StreamExtensions.WriteAllLines \nWriteAllLines \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#Write","title":"StreamExtensions.Write","content":"StreamExtensions.Write \nWrite \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#GetReader","title":"StreamExtensions.GetReader","content":"StreamExtensions.GetReader \nGetReader \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#ReadBytes","title":"StreamExtensions.ReadBytes","content":"StreamExtensions.ReadBytes \nReadBytes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#ReadAllBytes","title":"StreamExtensions.ReadAllBytes","content":"StreamExtensions.ReadAllBytes \nReadAllBytes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#ReadAllText","title":"StreamExtensions.ReadAllText","content":"StreamExtensions.ReadAllText \nReadAllText \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#ReadLines","title":"StreamExtensions.ReadLines","content":"StreamExtensions.ReadLines \nReadLines \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#ReadAllLines","title":"StreamExtensions.ReadAllLines","content":"StreamExtensions.ReadAllLines \nReadAllLines \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#WriteAllText","title":"StreamExtensions.WriteAllText","content":"StreamExtensions.WriteAllText \nWriteAllText \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-streamextensions.html#AsByteMemory","title":"StreamExtensions.AsByteMemory","content":"StreamExtensions.AsByteMemory \nAsByteMemory \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html","title":"ByteMemory","content":"ByteMemory \n\n A view over bytes.\n May be backed by managed or unmanaged memory, or memory mapped file.\n \nByteMemory.AsReadOnly \nAsReadOnly \nByteMemory.AsReadOnlyStream \nAsReadOnlyStream \nByteMemory.AsStream \nAsStream \nByteMemory.Copy \nCopy \nByteMemory.CopyTo \nCopyTo \nByteMemory.ReadAllBytes \nReadAllBytes \nByteMemory.ReadBytes \nReadBytes \nByteMemory.ReadInt32 \nReadInt32 \nByteMemory.ReadUInt16 \nReadUInt16 \nByteMemory.ReadUtf8String \nReadUtf8String \nByteMemory.Slice \nSlice \nByteMemory.ToArray \nToArray \nByteMemory.Item \nItem \nByteMemory.Length \nLength \nByteMemory.FromArray \nFromArray \nByteMemory.FromArray \nFromArray \nByteMemory.FromMemoryMappedFile \nFromMemoryMappedFile \nByteMemory.FromUnsafePointer \nFromUnsafePointer \nByteMemory.Empty \nEmpty"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#AsReadOnly","title":"ByteMemory.AsReadOnly","content":"ByteMemory.AsReadOnly \nAsReadOnly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#AsReadOnlyStream","title":"ByteMemory.AsReadOnlyStream","content":"ByteMemory.AsReadOnlyStream \nAsReadOnlyStream \n\n Get a stream representation of the backing memory.\n Disposing this will not free up any of the backing memory.\n Stream cannot be written to.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#AsStream","title":"ByteMemory.AsStream","content":"ByteMemory.AsStream \nAsStream \n\n Get a stream representation of the backing memory.\n Disposing this will not free up any of the backing memory.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#Copy","title":"ByteMemory.Copy","content":"ByteMemory.Copy \nCopy \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#CopyTo","title":"ByteMemory.CopyTo","content":"ByteMemory.CopyTo \nCopyTo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ReadAllBytes","title":"ByteMemory.ReadAllBytes","content":"ByteMemory.ReadAllBytes \nReadAllBytes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ReadBytes","title":"ByteMemory.ReadBytes","content":"ByteMemory.ReadBytes \nReadBytes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ReadInt32","title":"ByteMemory.ReadInt32","content":"ByteMemory.ReadInt32 \nReadInt32 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ReadUInt16","title":"ByteMemory.ReadUInt16","content":"ByteMemory.ReadUInt16 \nReadUInt16 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ReadUtf8String","title":"ByteMemory.ReadUtf8String","content":"ByteMemory.ReadUtf8String \nReadUtf8String \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#Slice","title":"ByteMemory.Slice","content":"ByteMemory.Slice \nSlice \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#ToArray","title":"ByteMemory.ToArray","content":"ByteMemory.ToArray \nToArray \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#Item","title":"ByteMemory.Item","content":"ByteMemory.Item \nItem \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#Length","title":"ByteMemory.Length","content":"ByteMemory.Length \nLength \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#FromArray","title":"ByteMemory.FromArray","content":"ByteMemory.FromArray \nFromArray \n\n Creates a ByteMemory object that is backed by a byte array.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#FromArray","title":"ByteMemory.FromArray","content":"ByteMemory.FromArray \nFromArray \n\n Creates a ByteMemory object that is backed by a byte array with the specified offset and length.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#FromMemoryMappedFile","title":"ByteMemory.FromMemoryMappedFile","content":"ByteMemory.FromMemoryMappedFile \nFromMemoryMappedFile \n\n Create a ByteMemory object that has a backing memory mapped file.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#FromUnsafePointer","title":"ByteMemory.FromUnsafePointer","content":"ByteMemory.FromUnsafePointer \nFromUnsafePointer \n\n Creates a ByteMemory object that is backed by a raw pointer.\n Use with care.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-bytememory.html#Empty","title":"ByteMemory.Empty","content":"ByteMemory.Empty \nEmpty \n\n Empty byte memory.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultassemblyloader.html","title":"DefaultAssemblyLoader","content":"DefaultAssemblyLoader \n\n Default implementation for IAssemblyLoader\n \nDefaultAssemblyLoader.( .ctor ) \n( .ctor )"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultassemblyloader.html#( .ctor )","title":"DefaultAssemblyLoader.( .ctor )","content":"DefaultAssemblyLoader.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html","title":"DefaultFileSystem","content":"DefaultFileSystem \n\n Represents a default (memory-mapped) implementation of the file system\n \nDefaultFileSystem.( .ctor ) \n( .ctor ) \nDefaultFileSystem.CopyShim \nCopyShim \nDefaultFileSystem.DirectoryCreateShim \nDirectoryCreateShim \nDefaultFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \nDefaultFileSystem.DirectoryExistsShim \nDirectoryExistsShim \nDefaultFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \nDefaultFileSystem.EnumerateFilesShim \nEnumerateFilesShim \nDefaultFileSystem.FileDeleteShim \nFileDeleteShim \nDefaultFileSystem.FileExistsShim \nFileExistsShim \nDefaultFileSystem.GetCreationTimeShim \nGetCreationTimeShim \nDefaultFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \nDefaultFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \nDefaultFileSystem.GetFullPathShim \nGetFullPathShim \nDefaultFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \nDefaultFileSystem.GetTempPathShim \nGetTempPathShim \nDefaultFileSystem.IsInvalidPathShim \nIsInvalidPathShim \nDefaultFileSystem.IsPathRootedShim \nIsPathRootedShim \nDefaultFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \nDefaultFileSystem.NormalizePathShim \nNormalizePathShim \nDefaultFileSystem.OpenFileForReadShim \nOpenFileForReadShim \nDefaultFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \nDefaultFileSystem.AssemblyLoader \nAssemblyLoader"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#( .ctor )","title":"DefaultFileSystem.( .ctor )","content":"DefaultFileSystem.( .ctor ) \n( .ctor ) \n\n Create a default implementation of the file system\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#CopyShim","title":"DefaultFileSystem.CopyShim","content":"DefaultFileSystem.CopyShim \nCopyShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#DirectoryCreateShim","title":"DefaultFileSystem.DirectoryCreateShim","content":"DefaultFileSystem.DirectoryCreateShim \nDirectoryCreateShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#DirectoryDeleteShim","title":"DefaultFileSystem.DirectoryDeleteShim","content":"DefaultFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#DirectoryExistsShim","title":"DefaultFileSystem.DirectoryExistsShim","content":"DefaultFileSystem.DirectoryExistsShim \nDirectoryExistsShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#EnumerateDirectoriesShim","title":"DefaultFileSystem.EnumerateDirectoriesShim","content":"DefaultFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#EnumerateFilesShim","title":"DefaultFileSystem.EnumerateFilesShim","content":"DefaultFileSystem.EnumerateFilesShim \nEnumerateFilesShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#FileDeleteShim","title":"DefaultFileSystem.FileDeleteShim","content":"DefaultFileSystem.FileDeleteShim \nFileDeleteShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#FileExistsShim","title":"DefaultFileSystem.FileExistsShim","content":"DefaultFileSystem.FileExistsShim \nFileExistsShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetCreationTimeShim","title":"DefaultFileSystem.GetCreationTimeShim","content":"DefaultFileSystem.GetCreationTimeShim \nGetCreationTimeShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetDirectoryNameShim","title":"DefaultFileSystem.GetDirectoryNameShim","content":"DefaultFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetFullFilePathInDirectoryShim","title":"DefaultFileSystem.GetFullFilePathInDirectoryShim","content":"DefaultFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetFullPathShim","title":"DefaultFileSystem.GetFullPathShim","content":"DefaultFileSystem.GetFullPathShim \nGetFullPathShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetLastWriteTimeShim","title":"DefaultFileSystem.GetLastWriteTimeShim","content":"DefaultFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#GetTempPathShim","title":"DefaultFileSystem.GetTempPathShim","content":"DefaultFileSystem.GetTempPathShim \nGetTempPathShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#IsInvalidPathShim","title":"DefaultFileSystem.IsInvalidPathShim","content":"DefaultFileSystem.IsInvalidPathShim \nIsInvalidPathShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#IsPathRootedShim","title":"DefaultFileSystem.IsPathRootedShim","content":"DefaultFileSystem.IsPathRootedShim \nIsPathRootedShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#IsStableFileHeuristic","title":"DefaultFileSystem.IsStableFileHeuristic","content":"DefaultFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#NormalizePathShim","title":"DefaultFileSystem.NormalizePathShim","content":"DefaultFileSystem.NormalizePathShim \nNormalizePathShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#OpenFileForReadShim","title":"DefaultFileSystem.OpenFileForReadShim","content":"DefaultFileSystem.OpenFileForReadShim \nOpenFileForReadShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#OpenFileForWriteShim","title":"DefaultFileSystem.OpenFileForWriteShim","content":"DefaultFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-defaultfilesystem.html#AssemblyLoader","title":"DefaultFileSystem.AssemblyLoader","content":"DefaultFileSystem.AssemblyLoader \nAssemblyLoader \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-iassemblyloader.html","title":"IAssemblyLoader","content":"IAssemblyLoader \n\n Type which we use to load assemblies.\n \nIAssemblyLoader.AssemblyLoad \nAssemblyLoad \nIAssemblyLoader.AssemblyLoadFrom \nAssemblyLoadFrom"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-iassemblyloader.html#AssemblyLoad","title":"IAssemblyLoader.AssemblyLoad","content":"IAssemblyLoader.AssemblyLoad \nAssemblyLoad \n\n Used to load a dependency for F# Interactive and in an unused corner-case of type provider loading\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-iassemblyloader.html#AssemblyLoadFrom","title":"IAssemblyLoader.AssemblyLoadFrom","content":"IAssemblyLoader.AssemblyLoadFrom \nAssemblyLoadFrom \n\n Used to load type providers and located assemblies in F# Interactive\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html","title":"IFileSystem","content":"IFileSystem \n\n Represents a shim for the file system\n \nIFileSystem.CopyShim \nCopyShim \nIFileSystem.DirectoryCreateShim \nDirectoryCreateShim \nIFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \nIFileSystem.DirectoryExistsShim \nDirectoryExistsShim \nIFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \nIFileSystem.EnumerateFilesShim \nEnumerateFilesShim \nIFileSystem.FileDeleteShim \nFileDeleteShim \nIFileSystem.FileExistsShim \nFileExistsShim \nIFileSystem.GetCreationTimeShim \nGetCreationTimeShim \nIFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \nIFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \nIFileSystem.GetFullPathShim \nGetFullPathShim \nIFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \nIFileSystem.GetTempPathShim \nGetTempPathShim \nIFileSystem.IsInvalidPathShim \nIsInvalidPathShim \nIFileSystem.IsPathRootedShim \nIsPathRootedShim \nIFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \nIFileSystem.NormalizePathShim \nNormalizePathShim \nIFileSystem.OpenFileForReadShim \nOpenFileForReadShim \nIFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \nIFileSystem.AssemblyLoader \nAssemblyLoader"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#CopyShim","title":"IFileSystem.CopyShim","content":"IFileSystem.CopyShim \nCopyShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#DirectoryCreateShim","title":"IFileSystem.DirectoryCreateShim","content":"IFileSystem.DirectoryCreateShim \nDirectoryCreateShim \n\n A shim over Directory.Exists, but returns a string, the FullName of the resulting\n DirectoryInfo.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#DirectoryDeleteShim","title":"IFileSystem.DirectoryDeleteShim","content":"IFileSystem.DirectoryDeleteShim \nDirectoryDeleteShim \n\n A shim over Directory.Delete\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#DirectoryExistsShim","title":"IFileSystem.DirectoryExistsShim","content":"IFileSystem.DirectoryExistsShim \nDirectoryExistsShim \n\n A shim over Directory.Exists\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#EnumerateDirectoriesShim","title":"IFileSystem.EnumerateDirectoriesShim","content":"IFileSystem.EnumerateDirectoriesShim \nEnumerateDirectoriesShim \n\n A shim over Directory.EnumerateDirectories\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#EnumerateFilesShim","title":"IFileSystem.EnumerateFilesShim","content":"IFileSystem.EnumerateFilesShim \nEnumerateFilesShim \n\n A shim over Directory.EnumerateFiles\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#FileDeleteShim","title":"IFileSystem.FileDeleteShim","content":"IFileSystem.FileDeleteShim \nFileDeleteShim \n\n A shim over File.Delete\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#FileExistsShim","title":"IFileSystem.FileExistsShim","content":"IFileSystem.FileExistsShim \nFileExistsShim \n\n A shim over File.Exists\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetCreationTimeShim","title":"IFileSystem.GetCreationTimeShim","content":"IFileSystem.GetCreationTimeShim \nGetCreationTimeShim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetDirectoryNameShim","title":"IFileSystem.GetDirectoryNameShim","content":"IFileSystem.GetDirectoryNameShim \nGetDirectoryNameShim \n\n A shim for getting directory name from path\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetFullFilePathInDirectoryShim","title":"IFileSystem.GetFullFilePathInDirectoryShim","content":"IFileSystem.GetFullFilePathInDirectoryShim \nGetFullFilePathInDirectoryShim \n\n Take in a directory, filename, and return canonicalized path to the filename in directory.\n If filename path is rooted, ignores directory and returns filename path.\n Otherwise, combines directory with filename and gets full path via GetFullPathShim(string).\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetFullPathShim","title":"IFileSystem.GetFullPathShim","content":"IFileSystem.GetFullPathShim \nGetFullPathShim \n\n Take in a filename with an absolute path, and return the same filename\n but canonicalized with respect to extra path separators (e.g. C:\\\\\\\\foo.txt)\n and \u0027..\u0027 portions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetLastWriteTimeShim","title":"IFileSystem.GetLastWriteTimeShim","content":"IFileSystem.GetLastWriteTimeShim \nGetLastWriteTimeShim \n\n Utc time of the last modification\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#GetTempPathShim","title":"IFileSystem.GetTempPathShim","content":"IFileSystem.GetTempPathShim \nGetTempPathShim \n\n A shim over Path.GetTempPath\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#IsInvalidPathShim","title":"IFileSystem.IsInvalidPathShim","content":"IFileSystem.IsInvalidPathShim \nIsInvalidPathShim \n\n A shim over Path.IsInvalidPath\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#IsPathRootedShim","title":"IFileSystem.IsPathRootedShim","content":"IFileSystem.IsPathRootedShim \nIsPathRootedShim \n\n A shim over Path.IsPathRooted\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#IsStableFileHeuristic","title":"IFileSystem.IsStableFileHeuristic","content":"IFileSystem.IsStableFileHeuristic \nIsStableFileHeuristic \n\n Used to determine if a file will not be subject to deletion during the lifetime of a typical client process.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#NormalizePathShim","title":"IFileSystem.NormalizePathShim","content":"IFileSystem.NormalizePathShim \nNormalizePathShim \n\n Removes relative parts from any full paths\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#OpenFileForReadShim","title":"IFileSystem.OpenFileForReadShim","content":"IFileSystem.OpenFileForReadShim \nOpenFileForReadShim \n\n Open the file for read, returns ByteMemory, uses either FileStream (for smaller files) or MemoryMappedFile (for potentially big files, such as dlls).\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#OpenFileForWriteShim","title":"IFileSystem.OpenFileForWriteShim","content":"IFileSystem.OpenFileForWriteShim \nOpenFileForWriteShim \n\n Open the file for writing. Returns a Stream.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-ifilesystem.html#AssemblyLoader","title":"IFileSystem.AssemblyLoader","content":"IFileSystem.AssemblyLoader \nAssemblyLoader \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-illegalfilenamechar.html","title":"IllegalFileNameChar","content":"IllegalFileNameChar \n \nIllegalFileNameChar.Data0 \nData0 \nIllegalFileNameChar.Data1 \nData1"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-illegalfilenamechar.html#Data0","title":"IllegalFileNameChar.Data0","content":"IllegalFileNameChar.Data0 \nData0 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-io-illegalfilenamechar.html#Data1","title":"IllegalFileNameChar.Data1","content":"IllegalFileNameChar.Data1 \nData1 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell.html","title":"Shell","content":"Shell \n \nShell.Settings \nSettings \nShell.CompilerInputStream \nCompilerInputStream \nShell.CompilerOutputStream \nCompilerOutputStream \nShell.EvaluationEventArgs \nEvaluationEventArgs \nShell.FsiBoundValue \nFsiBoundValue \nShell.FsiCompilationException \nFsiCompilationException \nShell.FsiEvaluationSession \nFsiEvaluationSession \nShell.FsiEvaluationSessionHostConfig \nFsiEvaluationSessionHostConfig \nShell.FsiValue \nFsiValue"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings.html","title":"Settings","content":"Settings \n\n A default implementation of the \u0027fsi\u0027 object, used by GetDefaultConfiguration()\n \nSettings.IEventLoop \nIEventLoop \nSettings.InteractiveSettings \nInteractiveSettings \nSettings.fsi \nfsi"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings.html#fsi","title":"Settings.fsi","content":"Settings.fsi \nfsi \n\n A default implementation of the \u0027fsi\u0027 object, used by GetDefaultConfiguration().  Note this\n is a different object to FSharp.Compiler.Interactive.Settings.fsi in FSharp.Compiler.Interactive.Settings.dll,\n which can be used as an alternative implementation of the interactive settings if passed as a parameter\n to GetDefaultConfiguration(fsiObj).\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-ieventloop.html","title":"IEventLoop","content":"IEventLoop \nAn event loop used by the currently executing F# Interactive session to execute code\n in the context of a GUI or another event-based system. \nIEventLoop.Invoke \nInvoke \nIEventLoop.Run \nRun \nIEventLoop.ScheduleRestart \nScheduleRestart"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-ieventloop.html#Invoke","title":"IEventLoop.Invoke","content":"IEventLoop.Invoke \nInvoke \nRequest that the given operation be run synchronously on the event loop."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-ieventloop.html#Run","title":"IEventLoop.Run","content":"IEventLoop.Run \nRun \nRun the event loop."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-ieventloop.html#ScheduleRestart","title":"IEventLoop.ScheduleRestart","content":"IEventLoop.ScheduleRestart \nScheduleRestart \nSchedule a restart for the event loop."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html","title":"InteractiveSettings","content":"InteractiveSettings \nOperations supported by the currently executing F# Interactive session. \nInteractiveSettings.AddPrintTransformer \nAddPrintTransformer \nInteractiveSettings.AddPrinter \nAddPrinter \nInteractiveSettings.FormatProvider \nFormatProvider \nInteractiveSettings.PrintLength \nPrintLength \nInteractiveSettings.PrintWidth \nPrintWidth \nInteractiveSettings.ShowProperties \nShowProperties \nInteractiveSettings.PrintSize \nPrintSize \nInteractiveSettings.ShowDeclarationValues \nShowDeclarationValues \nInteractiveSettings.FloatingPointFormat \nFloatingPointFormat \nInteractiveSettings.ShowIEnumerable \nShowIEnumerable \nInteractiveSettings.PrintDepth \nPrintDepth \nInteractiveSettings.CommandLineArgs \nCommandLineArgs \nInteractiveSettings.EventLoop \nEventLoop"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#AddPrintTransformer","title":"InteractiveSettings.AddPrintTransformer","content":"InteractiveSettings.AddPrintTransformer \nAddPrintTransformer \nRegister a print transformer that controls the output of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#AddPrinter","title":"InteractiveSettings.AddPrinter","content":"InteractiveSettings.AddPrinter \nAddPrinter \nRegister a printer that controls the output of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#FormatProvider","title":"InteractiveSettings.FormatProvider","content":"InteractiveSettings.FormatProvider \nFormatProvider \nGet or set the format provider used in the output of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#PrintLength","title":"InteractiveSettings.PrintLength","content":"InteractiveSettings.PrintLength \nPrintLength \nGet or set the total print length of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#PrintWidth","title":"InteractiveSettings.PrintWidth","content":"InteractiveSettings.PrintWidth \nPrintWidth \nGet or set the print width of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#ShowProperties","title":"InteractiveSettings.ShowProperties","content":"InteractiveSettings.ShowProperties \nShowProperties \nWhen set to \u0027false\u0027, disables the display of properties of evaluated objects in the output of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#PrintSize","title":"InteractiveSettings.PrintSize","content":"InteractiveSettings.PrintSize \nPrintSize \nGet or set the total print size of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#ShowDeclarationValues","title":"InteractiveSettings.ShowDeclarationValues","content":"InteractiveSettings.ShowDeclarationValues \nShowDeclarationValues \nWhen set to \u0027false\u0027, disables the display of declaration values in the output of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#FloatingPointFormat","title":"InteractiveSettings.FloatingPointFormat","content":"InteractiveSettings.FloatingPointFormat \nFloatingPointFormat \nGet or set the floating point format used in the output of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#ShowIEnumerable","title":"InteractiveSettings.ShowIEnumerable","content":"InteractiveSettings.ShowIEnumerable \nShowIEnumerable \nWhen set to \u0027false\u0027, disables the display of sequences in the output of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#PrintDepth","title":"InteractiveSettings.PrintDepth","content":"InteractiveSettings.PrintDepth \nPrintDepth \nGet or set the print depth of the interactive session."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#CommandLineArgs","title":"InteractiveSettings.CommandLineArgs","content":"InteractiveSettings.CommandLineArgs \nCommandLineArgs \nThe command line arguments after ignoring the arguments relevant to the interactive\n environment and replacing the first argument with the name of the last script file,\n if any. Thus \u0027fsi.exe test1.fs test2.fs -- hello goodbye\u0027 will give arguments\n \u0027test2.fs\u0027, \u0027hello\u0027, \u0027goodbye\u0027.  This value will normally be different to those\n returned by System.Environment.GetCommandLineArgs."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-settings-interactivesettings.html#EventLoop","title":"InteractiveSettings.EventLoop","content":"InteractiveSettings.EventLoop \nEventLoop \nGets or sets a the current event loop being used to process interactions."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compilerinputstream.html","title":"CompilerInputStream","content":"CompilerInputStream \n\n Defines a read-only input stream used to feed content to the hosted F# Interactive dynamic compiler.\n \nCompilerInputStream.( .ctor ) \n( .ctor ) \nCompilerInputStream.Add \nAdd"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compilerinputstream.html#( .ctor )","title":"CompilerInputStream.( .ctor )","content":"CompilerInputStream.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compilerinputstream.html#Add","title":"CompilerInputStream.Add","content":"CompilerInputStream.Add \nAdd \n\n Feeds content into the stream.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compileroutputstream.html","title":"CompilerOutputStream","content":"CompilerOutputStream \n\n Defines a write-only stream used to capture output of the hosted F# Interactive dynamic compiler.\n \nCompilerOutputStream.( .ctor ) \n( .ctor ) \nCompilerOutputStream.Read \nRead"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compileroutputstream.html#( .ctor )","title":"CompilerOutputStream.( .ctor )","content":"CompilerOutputStream.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-compileroutputstream.html#Read","title":"CompilerOutputStream.Read","content":"CompilerOutputStream.Read \nRead \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html","title":"EvaluationEventArgs","content":"EvaluationEventArgs \n \nEvaluationEventArgs.ImplementationDeclaration \nImplementationDeclaration \nEvaluationEventArgs.Symbol \nSymbol \nEvaluationEventArgs.FsiValue \nFsiValue \nEvaluationEventArgs.SymbolUse \nSymbolUse \nEvaluationEventArgs.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html#ImplementationDeclaration","title":"EvaluationEventArgs.ImplementationDeclaration","content":"EvaluationEventArgs.ImplementationDeclaration \nImplementationDeclaration \n\n The details of the expression defined\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html#Symbol","title":"EvaluationEventArgs.Symbol","content":"EvaluationEventArgs.Symbol \nSymbol \n\n The symbol defined\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html#FsiValue","title":"EvaluationEventArgs.FsiValue","content":"EvaluationEventArgs.FsiValue \nFsiValue \n\n The value of the symbol defined, if any\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html#SymbolUse","title":"EvaluationEventArgs.SymbolUse","content":"EvaluationEventArgs.SymbolUse \nSymbolUse \n\n The FSharpSymbolUse for the symbol defined\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-evaluationeventargs.html#Name","title":"EvaluationEventArgs.Name","content":"EvaluationEventArgs.Name \nName \n\n The display name of the symbol defined\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsiboundvalue.html","title":"FsiBoundValue","content":"FsiBoundValue \n\n Represents an evaluated F# value that is bound to an identifier\n \nFsiBoundValue.Value \nValue \nFsiBoundValue.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsiboundvalue.html#Value","title":"FsiBoundValue.Value","content":"FsiBoundValue.Value \nValue \n\n The evaluated F# value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsiboundvalue.html#Name","title":"FsiBoundValue.Name","content":"FsiBoundValue.Name \nName \n\n The identifier of the value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsicompilationexception.html","title":"FsiCompilationException","content":"FsiCompilationException \n\n Thrown when there was an error compiling the given code in FSI.\n \nFsiCompilationException.( .ctor ) \n( .ctor ) \nFsiCompilationException.ErrorInfos \nErrorInfos"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsicompilationexception.html#( .ctor )","title":"FsiCompilationException.( .ctor )","content":"FsiCompilationException.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsicompilationexception.html#ErrorInfos","title":"FsiCompilationException.ErrorInfos","content":"FsiCompilationException.ErrorInfos \nErrorInfos \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html","title":"FsiEvaluationSession","content":"FsiEvaluationSession \n\n Represents an F# Interactive evaluation session.\n \nFsiEvaluationSession.AddBoundValue \nAddBoundValue \nFsiEvaluationSession.EvalExpression \nEvalExpression \nFsiEvaluationSession.EvalExpressionNonThrowing \nEvalExpressionNonThrowing \nFsiEvaluationSession.EvalInteraction \nEvalInteraction \nFsiEvaluationSession.EvalInteractionNonThrowing \nEvalInteractionNonThrowing \nFsiEvaluationSession.EvalScript \nEvalScript \nFsiEvaluationSession.EvalScriptNonThrowing \nEvalScriptNonThrowing \nFsiEvaluationSession.FormatValue \nFormatValue \nFsiEvaluationSession.GetBoundValues \nGetBoundValues \nFsiEvaluationSession.GetCompletions \nGetCompletions \nFsiEvaluationSession.Interrupt \nInterrupt \nFsiEvaluationSession.ParseAndCheckInteraction \nParseAndCheckInteraction \nFsiEvaluationSession.ReportUnhandledException \nReportUnhandledException \nFsiEvaluationSession.Run \nRun \nFsiEvaluationSession.TryFindBoundValue \nTryFindBoundValue \nFsiEvaluationSession.InteractiveChecker \nInteractiveChecker \nFsiEvaluationSession.IsGui \nIsGui \nFsiEvaluationSession.CurrentPartialAssemblySignature \nCurrentPartialAssemblySignature \nFsiEvaluationSession.PartialAssemblySignatureUpdated \nPartialAssemblySignatureUpdated \nFsiEvaluationSession.LCID \nLCID \nFsiEvaluationSession.ValueBound \nValueBound \nFsiEvaluationSession.DynamicAssembly \nDynamicAssembly \nFsiEvaluationSession.Create \nCreate \nFsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration \nFsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration \nFsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#AddBoundValue","title":"FsiEvaluationSession.AddBoundValue","content":"FsiEvaluationSession.AddBoundValue \nAddBoundValue \n\n Creates a root-level value with the given name and .NET object.\n If the .NET object contains types from assemblies that are not referenced in the interactive session, it will try to implicitly resolve them by default configuration.\n Name must be a valid identifier.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalExpression","title":"FsiEvaluationSession.EvalExpression","content":"FsiEvaluationSession.EvalExpression \nEvalExpression \n\n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors are sent to the output writer. Parsing is performed on the current thread, and execution is performed \n synchronously on the \u0027main\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalExpressionNonThrowing","title":"FsiEvaluationSession.EvalExpressionNonThrowing","content":"FsiEvaluationSession.EvalExpressionNonThrowing \nEvalExpressionNonThrowing \n\n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors and warnings are collected apart from any exception arising from execution\n which is returned via a Choice. Parsing is performed on the current thread, and execution is performed \n synchronously on the \u0027main\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalInteraction","title":"FsiEvaluationSession.EvalInteraction","content":"FsiEvaluationSession.EvalInteraction \nEvalInteraction \n\n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors are sent to the output writer, a \u0027true\u0027 return value indicates there\n were no errors overall. Execution is performed on the \u0027Run()\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalInteractionNonThrowing","title":"FsiEvaluationSession.EvalInteractionNonThrowing","content":"FsiEvaluationSession.EvalInteractionNonThrowing \nEvalInteractionNonThrowing \n\n Execute the code as if it had been entered as one or more interactions, with an\n implicit termination at the end of the input. Stop on first error, discarding the rest\n of the input. Errors and warnings are collected apart from any exception arising from execution\n which is returned via a Choice. Execution is performed on the \u0027Run()\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalScript","title":"FsiEvaluationSession.EvalScript","content":"FsiEvaluationSession.EvalScript \nEvalScript \n\n Execute the given script. Stop on first error, discarding the rest\n of the script. Errors are sent to the output writer, a \u0027true\u0027 return value indicates there\n were no errors overall. Execution is performed on the \u0027Run()\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#EvalScriptNonThrowing","title":"FsiEvaluationSession.EvalScriptNonThrowing","content":"FsiEvaluationSession.EvalScriptNonThrowing \nEvalScriptNonThrowing \n\n Execute the given script. Stop on first error, discarding the rest\n of the script. Errors and warnings are collected apart from any exception arising from execution\n which is returned via a Choice. Execution is performed on the \u0027Run()\u0027 thread.\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#FormatValue","title":"FsiEvaluationSession.FormatValue","content":"FsiEvaluationSession.FormatValue \nFormatValue \n\n Format a value to a string using the current PrintDepth, PrintLength etc settings provided by the active fsi configuration object\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#GetBoundValues","title":"FsiEvaluationSession.GetBoundValues","content":"FsiEvaluationSession.GetBoundValues \nGetBoundValues \n\n Gets the root-level values that are bound to an identifier\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#GetCompletions","title":"FsiEvaluationSession.GetCompletions","content":"FsiEvaluationSession.GetCompletions \nGetCompletions \n\n A host calls this to get the completions for a long identifier, e.g. in the console\n\n Due to a current limitation, it is not fully thread-safe to run this operation concurrently with evaluation triggered\n by input from \u0027stdin\u0027.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#Interrupt","title":"FsiEvaluationSession.Interrupt","content":"FsiEvaluationSession.Interrupt \nInterrupt \n\n A host calls this to request an interrupt on the evaluation thread.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#ParseAndCheckInteraction","title":"FsiEvaluationSession.ParseAndCheckInteraction","content":"FsiEvaluationSession.ParseAndCheckInteraction \nParseAndCheckInteraction \n\n Typecheck the given script fragment in the type checking context implied by the current state\n of F# Interactive. The results can be used to access intellisense, perform resolutions,\n check brace matching and other information.\n\n Operations may be run concurrently with other requests to the InteractiveChecker.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#ReportUnhandledException","title":"FsiEvaluationSession.ReportUnhandledException","content":"FsiEvaluationSession.ReportUnhandledException \nReportUnhandledException \n\n A host calls this to report an unhandled exception in a standard way, e.g. an exception on the GUI thread gets printed to stderr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#Run","title":"FsiEvaluationSession.Run","content":"FsiEvaluationSession.Run \nRun \n\n Load the dummy interaction, load the initial files, and,\n if interacting, start the background thread to read the standard input.\n\n Performs these steps:\n    - Load the dummy interaction, if any\n    - Set up exception handling, if any\n    - Load the initial files, if any\n    - Start the background thread to read the standard input, if any\n    - Sit in the GUI event loop indefinitely, if needed\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#TryFindBoundValue","title":"FsiEvaluationSession.TryFindBoundValue","content":"FsiEvaluationSession.TryFindBoundValue \nTryFindBoundValue \n\n Tries to find a root-level value that is bound to the given identifier\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#InteractiveChecker","title":"FsiEvaluationSession.InteractiveChecker","content":"FsiEvaluationSession.InteractiveChecker \nInteractiveChecker \n\n The single, global interactive checker to use in conjunction with other operations\n on the FsiEvaluationSession.  \n\n If you are using an FsiEvaluationSession in this process, you should only use this InteractiveChecker \n for additional checking operations.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#IsGui","title":"FsiEvaluationSession.IsGui","content":"FsiEvaluationSession.IsGui \nIsGui \n\n A host calls this to determine if the --gui parameter is active\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#CurrentPartialAssemblySignature","title":"FsiEvaluationSession.CurrentPartialAssemblySignature","content":"FsiEvaluationSession.CurrentPartialAssemblySignature \nCurrentPartialAssemblySignature \n\n Get a handle to the resolved view of the current signature of the incrementally generated assembly.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#PartialAssemblySignatureUpdated","title":"FsiEvaluationSession.PartialAssemblySignatureUpdated","content":"FsiEvaluationSession.PartialAssemblySignatureUpdated \nPartialAssemblySignatureUpdated \n\n Raised when an interaction is successfully typechecked and executed, resulting in an update to the\n type checking state.  \n\n This event is triggered after parsing and checking, either via input from \u0027stdin\u0027, or via a call to EvalInteraction.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#LCID","title":"FsiEvaluationSession.LCID","content":"FsiEvaluationSession.LCID \nLCID \n\n A host calls this to get the active language ID if provided by fsi-server-lcid\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#ValueBound","title":"FsiEvaluationSession.ValueBound","content":"FsiEvaluationSession.ValueBound \nValueBound \n\n Event fires when a root-level value is bound to an identifier, e.g., via \u0060let x = ...\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#DynamicAssembly","title":"FsiEvaluationSession.DynamicAssembly","content":"FsiEvaluationSession.DynamicAssembly \nDynamicAssembly \n\n Get a handle to the dynamically generated assembly\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#Create","title":"FsiEvaluationSession.Create","content":"FsiEvaluationSession.Create \nCreate \nCreate an FsiEvaluationSession, reading from the given text input, writing to the given text output and error writers"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#GetDefaultConfiguration","title":"FsiEvaluationSession.GetDefaultConfiguration","content":"FsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration \n\n Get a configuration that uses a private inbuilt implementation of the \u0027fsi\u0027 object and does not\n implicitly reference FSharp.Compiler.Interactive.Settings.dll. \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#GetDefaultConfiguration","title":"FsiEvaluationSession.GetDefaultConfiguration","content":"FsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration \n\n Get a configuration that uses the \u0027fsi\u0027 object (normally from FSharp.Compiler.Interactive.Settings.dll,\n an object from another DLL with identical characteristics) to provide an implementation of the configuration.\n FSharp.Compiler.Interactive.Settings.dll  is referenced by default.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsession.html#GetDefaultConfiguration","title":"FsiEvaluationSession.GetDefaultConfiguration","content":"FsiEvaluationSession.GetDefaultConfiguration \nGetDefaultConfiguration \n\n Get a configuration that uses the \u0027fsi\u0027 object (normally from FSharp.Compiler.Interactive.Settings.dll,\n an object from another DLL with identical characteristics) to provide an implementation of the configuration.\n The flag indicates if FSharp.Compiler.Interactive.Settings.dll  is referenced by default.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html","title":"FsiEvaluationSessionHostConfig","content":"FsiEvaluationSessionHostConfig \n \nFsiEvaluationSessionHostConfig.( .ctor ) \n( .ctor ) \nFsiEvaluationSessionHostConfig.EventLoopInvoke \nEventLoopInvoke \nFsiEvaluationSessionHostConfig.EventLoopRun \nEventLoopRun \nFsiEvaluationSessionHostConfig.EventLoopScheduleRestart \nEventLoopScheduleRestart \nFsiEvaluationSessionHostConfig.GetOptionalConsoleReadLine \nGetOptionalConsoleReadLine \nFsiEvaluationSessionHostConfig.ReportUserCommandLineArgs \nReportUserCommandLineArgs \nFsiEvaluationSessionHostConfig.StartServer \nStartServer \nFsiEvaluationSessionHostConfig.OnEvaluation \nOnEvaluation \nFsiEvaluationSessionHostConfig.FormatProvider \nFormatProvider \nFsiEvaluationSessionHostConfig.PrintLength \nPrintLength \nFsiEvaluationSessionHostConfig.PrintWidth \nPrintWidth \nFsiEvaluationSessionHostConfig.ShowProperties \nShowProperties \nFsiEvaluationSessionHostConfig.AddedPrinters \nAddedPrinters \nFsiEvaluationSessionHostConfig.PrintSize \nPrintSize \nFsiEvaluationSessionHostConfig.ShowDeclarationValues \nShowDeclarationValues \nFsiEvaluationSessionHostConfig.UseFsiAuxLib \nUseFsiAuxLib \nFsiEvaluationSessionHostConfig.FloatingPointFormat \nFloatingPointFormat \nFsiEvaluationSessionHostConfig.ShowIEnumerable \nShowIEnumerable \nFsiEvaluationSessionHostConfig.PrintDepth \nPrintDepth"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#( .ctor )","title":"FsiEvaluationSessionHostConfig.( .ctor )","content":"FsiEvaluationSessionHostConfig.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#EventLoopInvoke","title":"FsiEvaluationSessionHostConfig.EventLoopInvoke","content":"FsiEvaluationSessionHostConfig.EventLoopInvoke \nEventLoopInvoke \n\n Request that the given operation be run synchronously on the event loop.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#EventLoopRun","title":"FsiEvaluationSessionHostConfig.EventLoopRun","content":"FsiEvaluationSessionHostConfig.EventLoopRun \nEventLoopRun \n\n Called by the evaluation session to ask the host to enter a dispatch loop like Application.Run().\n Only called if --gui option is used (which is the default).\n Gets called towards the end of startup and every time a ThreadAbort escaped to the backup driver loop.\n Return true if a \u0027restart\u0027 is required, which is a bit meaningless.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#EventLoopScheduleRestart","title":"FsiEvaluationSessionHostConfig.EventLoopScheduleRestart","content":"FsiEvaluationSessionHostConfig.EventLoopScheduleRestart \nEventLoopScheduleRestart \n\n Schedule a restart for the event loop.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#GetOptionalConsoleReadLine","title":"FsiEvaluationSessionHostConfig.GetOptionalConsoleReadLine","content":"FsiEvaluationSessionHostConfig.GetOptionalConsoleReadLine \nGetOptionalConsoleReadLine \n\u003Cp class=\u0027fsdocs-para\u0027\u003EIndicate a special console \u0022readline\u0022 reader for the evaluation session, if any.\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EA \u0022console\u0022 gets used if --readline is specified (the default on Windows \u002B .NET); and --fsi-server is  not\n given (always combine with --readline-), and OptionalConsoleReadLine is given.\n When a console is used, special rules apply to \u0022peekahead\u0022, which allows early typing on the console.\n Peekahead happens if --peekahead- is not specified (the default).\n In this case, a prompt is printed early, a background thread is created and \n the OptionalConsoleReadLine is used to read the first line.\n If a console is not used, then inReader.Peek() is called early instead.\n \u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003EFurther lines are read using OptionalConsoleReadLine().\n If not provided, lines are read using inReader.ReadLine().\u003C/p\u003E\u003Cp class=\u0027fsdocs-para\u0027\u003E\u00A0\u003C/p\u003E"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#ReportUserCommandLineArgs","title":"FsiEvaluationSessionHostConfig.ReportUserCommandLineArgs","content":"FsiEvaluationSessionHostConfig.ReportUserCommandLineArgs \nReportUserCommandLineArgs \n\n The evaluation session calls this to report the preferred view of the command line arguments after \n stripping things like \u0022/use:file.fsx\u0022, \u0022-r:Foo.dll\u0022 etc.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#StartServer","title":"FsiEvaluationSessionHostConfig.StartServer","content":"FsiEvaluationSessionHostConfig.StartServer \nStartServer \n\n The evaluation session calls this at an appropriate point in the startup phase if the --fsi-server parameter was given\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#OnEvaluation","title":"FsiEvaluationSessionHostConfig.OnEvaluation","content":"FsiEvaluationSessionHostConfig.OnEvaluation \nOnEvaluation \n\n Hook for listening for evaluation bindings\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#FormatProvider","title":"FsiEvaluationSessionHostConfig.FormatProvider","content":"FsiEvaluationSessionHostConfig.FormatProvider \nFormatProvider \n\n Called by the evaluation session to ask the host for parameters to format text for output\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#PrintLength","title":"FsiEvaluationSessionHostConfig.PrintLength","content":"FsiEvaluationSessionHostConfig.PrintLength \nPrintLength \n\n Called by the evaluation session to ask the host for parameters to format text for output\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#PrintWidth","title":"FsiEvaluationSessionHostConfig.PrintWidth","content":"FsiEvaluationSessionHostConfig.PrintWidth \nPrintWidth \n\n Called by the evaluation session to ask the host for parameters to format text for output\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#ShowProperties","title":"FsiEvaluationSessionHostConfig.ShowProperties","content":"FsiEvaluationSessionHostConfig.ShowProperties \nShowProperties \n\n Called by the evaluation session to ask the host for parameters to format text for output\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#AddedPrinters","title":"FsiEvaluationSessionHostConfig.AddedPrinters","content":"FsiEvaluationSessionHostConfig.AddedPrinters \nAddedPrinters \n\n Called by the evaluation session to ask the host for parameters to format text for output\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#PrintSize","title":"FsiEvaluationSessionHostConfig.PrintSize","content":"FsiEvaluationSessionHostConfig.PrintSize \nPrintSize \n\n Called by the evaluation session to ask the host for parameters to format text for output\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#ShowDeclarationValues","title":"FsiEvaluationSessionHostConfig.ShowDeclarationValues","content":"FsiEvaluationSessionHostConfig.ShowDeclarationValues \nShowDeclarationValues \n\n Called by the evaluation session to ask the host for parameters to format text for output\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#UseFsiAuxLib","title":"FsiEvaluationSessionHostConfig.UseFsiAuxLib","content":"FsiEvaluationSessionHostConfig.UseFsiAuxLib \nUseFsiAuxLib \n\n Implicitly reference FSharp.Compiler.Interactive.Settings.dll\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#FloatingPointFormat","title":"FsiEvaluationSessionHostConfig.FloatingPointFormat","content":"FsiEvaluationSessionHostConfig.FloatingPointFormat \nFloatingPointFormat \n\n Called by the evaluation session to ask the host for parameters to format text for output\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#ShowIEnumerable","title":"FsiEvaluationSessionHostConfig.ShowIEnumerable","content":"FsiEvaluationSessionHostConfig.ShowIEnumerable \nShowIEnumerable \n\n Called by the evaluation session to ask the host for parameters to format text for output\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsievaluationsessionhostconfig.html#PrintDepth","title":"FsiEvaluationSessionHostConfig.PrintDepth","content":"FsiEvaluationSessionHostConfig.PrintDepth \nPrintDepth \n\n Called by the evaluation session to ask the host for parameters to format text for output\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsivalue.html","title":"FsiValue","content":"FsiValue \n\n Represents an evaluated F# value\n \nFsiValue.ReflectionType \nReflectionType \nFsiValue.FSharpType \nFSharpType \nFsiValue.ReflectionValue \nReflectionValue"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsivalue.html#ReflectionType","title":"FsiValue.ReflectionType","content":"FsiValue.ReflectionType \nReflectionType \n\n The type of the value, from the point of view of the .NET type system\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsivalue.html#FSharpType","title":"FsiValue.FSharpType","content":"FsiValue.FSharpType \nFSharpType \n\n The type of the value, from the point of view of the F# type system\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-interactive-shell-fsivalue.html#ReflectionValue","title":"FsiValue.ReflectionValue","content":"FsiValue.ReflectionValue \nReflectionValue \n\n The value, as an object\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html","title":"FSharpExprPatterns","content":"FSharpExprPatterns \n\n A collection of active patterns to analyze expressions\n \nFSharpExprPatterns.( |Value|_| ) \n( |Value|_| ) \nFSharpExprPatterns.( |Application|_| ) \n( |Application|_| ) \nFSharpExprPatterns.( |TypeLambda|_| ) \n( |TypeLambda|_| ) \nFSharpExprPatterns.( |DecisionTree|_| ) \n( |DecisionTree|_| ) \nFSharpExprPatterns.( |DecisionTreeSuccess|_| ) \n( |DecisionTreeSuccess|_| ) \nFSharpExprPatterns.( |Lambda|_| ) \n( |Lambda|_| ) \nFSharpExprPatterns.( |IfThenElse|_| ) \n( |IfThenElse|_| ) \nFSharpExprPatterns.( |Let|_| ) \n( |Let|_| ) \nFSharpExprPatterns.( |Call|_| ) \n( |Call|_| ) \nFSharpExprPatterns.( |CallWithWitnesses|_| ) \n( |CallWithWitnesses|_| ) \nFSharpExprPatterns.( |NewObject|_| ) \n( |NewObject|_| ) \nFSharpExprPatterns.( |ThisValue|_| ) \n( |ThisValue|_| ) \nFSharpExprPatterns.( |BaseValue|_| ) \n( |BaseValue|_| ) \nFSharpExprPatterns.( |Quote|_| ) \n( |Quote|_| ) \nFSharpExprPatterns.( |LetRec|_| ) \n( |LetRec|_| ) \nFSharpExprPatterns.( |NewRecord|_| ) \n( |NewRecord|_| ) \nFSharpExprPatterns.( |NewAnonRecord|_| ) \n( |NewAnonRecord|_| ) \nFSharpExprPatterns.( |AnonRecordGet|_| ) \n( |AnonRecordGet|_| ) \nFSharpExprPatterns.( |FSharpFieldGet|_| ) \n( |FSharpFieldGet|_| ) \nFSharpExprPatterns.( |FSharpFieldSet|_| ) \n( |FSharpFieldSet|_| ) \nFSharpExprPatterns.( |NewUnionCase|_| ) \n( |NewUnionCase|_| ) \nFSharpExprPatterns.( |UnionCaseGet|_| ) \n( |UnionCaseGet|_| ) \nFSharpExprPatterns.( |UnionCaseSet|_| ) \n( |UnionCaseSet|_| ) \nFSharpExprPatterns.( |UnionCaseTag|_| ) \n( |UnionCaseTag|_| ) \nFSharpExprPatterns.( |UnionCaseTest|_| ) \n( |UnionCaseTest|_| ) \nFSharpExprPatterns.( |NewTuple|_| ) \n( |NewTuple|_| ) \nFSharpExprPatterns.( |TupleGet|_| ) \n( |TupleGet|_| ) \nFSharpExprPatterns.( |Coerce|_| ) \n( |Coerce|_| ) \nFSharpExprPatterns.( |NewArray|_| ) \n( |NewArray|_| ) \nFSharpExprPatterns.( |TypeTest|_| ) \n( |TypeTest|_| ) \nFSharpExprPatterns.( |AddressSet|_| ) \n( |AddressSet|_| ) \nFSharpExprPatterns.( |ValueSet|_| ) \n( |ValueSet|_| ) \nFSharpExprPatterns.( |DefaultValue|_| ) \n( |DefaultValue|_| ) \nFSharpExprPatterns.( |Const|_| ) \n( |Const|_| ) \nFSharpExprPatterns.( |AddressOf|_| ) \n( |AddressOf|_| ) \nFSharpExprPatterns.( |Sequential|_| ) \n( |Sequential|_| ) \nFSharpExprPatterns.( |FastIntegerForLoop|_| ) \n( |FastIntegerForLoop|_| ) \nFSharpExprPatterns.( |WhileLoop|_| ) \n( |WhileLoop|_| ) \nFSharpExprPatterns.( |TryFinally|_| ) \n( |TryFinally|_| ) \nFSharpExprPatterns.( |TryWith|_| ) \n( |TryWith|_| ) \nFSharpExprPatterns.( |NewDelegate|_| ) \n( |NewDelegate|_| ) \nFSharpExprPatterns.( |ILAsm|_| ) \n( |ILAsm|_| ) \nFSharpExprPatterns.( |ILFieldGet|_| ) \n( |ILFieldGet|_| ) \nFSharpExprPatterns.( |ILFieldSet|_| ) \n( |ILFieldSet|_| ) \nFSharpExprPatterns.( |ObjectExpr|_| ) \n( |ObjectExpr|_| ) \nFSharpExprPatterns.( |TraitCall|_| ) \n( |TraitCall|_| ) \nFSharpExprPatterns.( |WitnessArg|_| ) \n( |WitnessArg|_| )"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |Value|_| )","title":"FSharpExprPatterns.( |Value|_| )","content":"FSharpExprPatterns.( |Value|_| ) \n( |Value|_| ) \n\n Matches expressions which are uses of values \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |Application|_| )","title":"FSharpExprPatterns.( |Application|_| )","content":"FSharpExprPatterns.( |Application|_| ) \n( |Application|_| ) \n\n Matches expressions which are the application of function values \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |TypeLambda|_| )","title":"FSharpExprPatterns.( |TypeLambda|_| )","content":"FSharpExprPatterns.( |TypeLambda|_| ) \n( |TypeLambda|_| ) \n\n Matches expressions which are type abstractions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |DecisionTree|_| )","title":"FSharpExprPatterns.( |DecisionTree|_| )","content":"FSharpExprPatterns.( |DecisionTree|_| ) \n( |DecisionTree|_| ) \n\n Matches expressions with a decision expression, each branch of which ends in DecisionTreeSuccess passing control and values to one of the targets.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |DecisionTreeSuccess|_| )","title":"FSharpExprPatterns.( |DecisionTreeSuccess|_| )","content":"FSharpExprPatterns.( |DecisionTreeSuccess|_| ) \n( |DecisionTreeSuccess|_| ) \n\n Special expressions at the end of a conditional decision structure in the decision expression node of a DecisionTree .\n The given expressions are passed as values to the decision tree target.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |Lambda|_| )","title":"FSharpExprPatterns.( |Lambda|_| )","content":"FSharpExprPatterns.( |Lambda|_| ) \n( |Lambda|_| ) \n\n Matches expressions which are lambda abstractions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |IfThenElse|_| )","title":"FSharpExprPatterns.( |IfThenElse|_| )","content":"FSharpExprPatterns.( |IfThenElse|_| ) \n( |IfThenElse|_| ) \n\n Matches expressions which are conditionals\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |Let|_| )","title":"FSharpExprPatterns.( |Let|_| )","content":"FSharpExprPatterns.( |Let|_| ) \n( |Let|_| ) \n\n Matches expressions which are let definitions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |Call|_| )","title":"FSharpExprPatterns.( |Call|_| )","content":"FSharpExprPatterns.( |Call|_| ) \n( |Call|_| ) \n\n Matches expressions which are calls to members or module-defined functions. When calling curried functions and members the\n arguments are collapsed to a single collection of arguments, as done in the compiled version of these.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |CallWithWitnesses|_| )","title":"FSharpExprPatterns.( |CallWithWitnesses|_| )","content":"FSharpExprPatterns.( |CallWithWitnesses|_| ) \n( |CallWithWitnesses|_| ) \n\n Like Call but also indicates witness arguments\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |NewObject|_| )","title":"FSharpExprPatterns.( |NewObject|_| )","content":"FSharpExprPatterns.( |NewObject|_| ) \n( |NewObject|_| ) \n\n Matches expressions which are calls to object constructors \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |ThisValue|_| )","title":"FSharpExprPatterns.( |ThisValue|_| )","content":"FSharpExprPatterns.( |ThisValue|_| ) \n( |ThisValue|_| ) \n\n Matches expressions which are uses of the \u0027this\u0027 value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |BaseValue|_| )","title":"FSharpExprPatterns.( |BaseValue|_| )","content":"FSharpExprPatterns.( |BaseValue|_| ) \n( |BaseValue|_| ) \n\n Matches expressions which are uses of the \u0027base\u0027 value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |Quote|_| )","title":"FSharpExprPatterns.( |Quote|_| )","content":"FSharpExprPatterns.( |Quote|_| ) \n( |Quote|_| ) \n\n Matches expressions which are quotation literals\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |LetRec|_| )","title":"FSharpExprPatterns.( |LetRec|_| )","content":"FSharpExprPatterns.( |LetRec|_| ) \n( |LetRec|_| ) \n\n Matches expressions which are let-rec definitions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |NewRecord|_| )","title":"FSharpExprPatterns.( |NewRecord|_| )","content":"FSharpExprPatterns.( |NewRecord|_| ) \n( |NewRecord|_| ) \n\n Matches record expressions \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |NewAnonRecord|_| )","title":"FSharpExprPatterns.( |NewAnonRecord|_| )","content":"FSharpExprPatterns.( |NewAnonRecord|_| ) \n( |NewAnonRecord|_| ) \n\n Matches anonymous record expressions \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |AnonRecordGet|_| )","title":"FSharpExprPatterns.( |AnonRecordGet|_| )","content":"FSharpExprPatterns.( |AnonRecordGet|_| ) \n( |AnonRecordGet|_| ) \n\n Matches expressions getting a field from an anonymous record. The integer represents the\n index into the sorted fields of the anonymous record.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |FSharpFieldGet|_| )","title":"FSharpExprPatterns.( |FSharpFieldGet|_| )","content":"FSharpExprPatterns.( |FSharpFieldGet|_| ) \n( |FSharpFieldGet|_| ) \n\n Matches expressions which get a field from a record or class\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |FSharpFieldSet|_| )","title":"FSharpExprPatterns.( |FSharpFieldSet|_| )","content":"FSharpExprPatterns.( |FSharpFieldSet|_| ) \n( |FSharpFieldSet|_| ) \n\n Matches expressions which set a field in a record or class\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |NewUnionCase|_| )","title":"FSharpExprPatterns.( |NewUnionCase|_| )","content":"FSharpExprPatterns.( |NewUnionCase|_| ) \n( |NewUnionCase|_| ) \n\n Matches expressions which create an object corresponding to a union case\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |UnionCaseGet|_| )","title":"FSharpExprPatterns.( |UnionCaseGet|_| )","content":"FSharpExprPatterns.( |UnionCaseGet|_| ) \n( |UnionCaseGet|_| ) \n\n Matches expressions which get a field from a union case\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |UnionCaseSet|_| )","title":"FSharpExprPatterns.( |UnionCaseSet|_| )","content":"FSharpExprPatterns.( |UnionCaseSet|_| ) \n( |UnionCaseSet|_| ) \n\n Matches expressions which set a field from a union case (only used in FSharp.Core itself)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |UnionCaseTag|_| )","title":"FSharpExprPatterns.( |UnionCaseTag|_| )","content":"FSharpExprPatterns.( |UnionCaseTag|_| ) \n( |UnionCaseTag|_| ) \n\n Matches expressions which gets the tag for a union case\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |UnionCaseTest|_| )","title":"FSharpExprPatterns.( |UnionCaseTest|_| )","content":"FSharpExprPatterns.( |UnionCaseTest|_| ) \n( |UnionCaseTest|_| ) \n\n Matches expressions which test if an expression corresponds to a particular union case\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |NewTuple|_| )","title":"FSharpExprPatterns.( |NewTuple|_| )","content":"FSharpExprPatterns.( |NewTuple|_| ) \n( |NewTuple|_| ) \n\n Matches tuple expressions \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |TupleGet|_| )","title":"FSharpExprPatterns.( |TupleGet|_| )","content":"FSharpExprPatterns.( |TupleGet|_| ) \n( |TupleGet|_| ) \n\n Matches expressions which get a value from a tuple\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |Coerce|_| )","title":"FSharpExprPatterns.( |Coerce|_| )","content":"FSharpExprPatterns.( |Coerce|_| ) \n( |Coerce|_| ) \n\n Matches expressions which coerce the type of a value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |NewArray|_| )","title":"FSharpExprPatterns.( |NewArray|_| )","content":"FSharpExprPatterns.( |NewArray|_| ) \n( |NewArray|_| ) \n\n Matches array expressions \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |TypeTest|_| )","title":"FSharpExprPatterns.( |TypeTest|_| )","content":"FSharpExprPatterns.( |TypeTest|_| ) \n( |TypeTest|_| ) \n\n Matches expressions which test the runtime type of a value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |AddressSet|_| )","title":"FSharpExprPatterns.( |AddressSet|_| )","content":"FSharpExprPatterns.( |AddressSet|_| ) \n( |AddressSet|_| ) \n\n Matches expressions which set the contents of an address\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |ValueSet|_| )","title":"FSharpExprPatterns.( |ValueSet|_| )","content":"FSharpExprPatterns.( |ValueSet|_| ) \n( |ValueSet|_| ) \n\n Matches expressions which set the contents of a mutable variable\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |DefaultValue|_| )","title":"FSharpExprPatterns.( |DefaultValue|_| )","content":"FSharpExprPatterns.( |DefaultValue|_| ) \n( |DefaultValue|_| ) \n\n Matches default-value expressions, including null expressions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |Const|_| )","title":"FSharpExprPatterns.( |Const|_| )","content":"FSharpExprPatterns.( |Const|_| ) \n( |Const|_| ) \n\n Matches constant expressions, including signed and unsigned integers, strings, characters, booleans, arrays\n of bytes and arrays of unit16.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |AddressOf|_| )","title":"FSharpExprPatterns.( |AddressOf|_| )","content":"FSharpExprPatterns.( |AddressOf|_| ) \n( |AddressOf|_| ) \n\n Matches expressions which take the address of a location\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |Sequential|_| )","title":"FSharpExprPatterns.( |Sequential|_| )","content":"FSharpExprPatterns.( |Sequential|_| ) \n( |Sequential|_| ) \n\n Matches sequential expressions \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |FastIntegerForLoop|_| )","title":"FSharpExprPatterns.( |FastIntegerForLoop|_| )","content":"FSharpExprPatterns.( |FastIntegerForLoop|_| ) \n( |FastIntegerForLoop|_| ) \n\n Matches fast-integer loops (up or down)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |WhileLoop|_| )","title":"FSharpExprPatterns.( |WhileLoop|_| )","content":"FSharpExprPatterns.( |WhileLoop|_| ) \n( |WhileLoop|_| ) \n\n Matches while loops \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |TryFinally|_| )","title":"FSharpExprPatterns.( |TryFinally|_| )","content":"FSharpExprPatterns.( |TryFinally|_| ) \n( |TryFinally|_| ) \n\n Matches try/finally expressions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |TryWith|_| )","title":"FSharpExprPatterns.( |TryWith|_| )","content":"FSharpExprPatterns.( |TryWith|_| ) \n( |TryWith|_| ) \n\n Matches try/with expressions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |NewDelegate|_| )","title":"FSharpExprPatterns.( |NewDelegate|_| )","content":"FSharpExprPatterns.( |NewDelegate|_| ) \n( |NewDelegate|_| ) \n\n Matches expressions which create an instance of a delegate type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |ILAsm|_| )","title":"FSharpExprPatterns.( |ILAsm|_| )","content":"FSharpExprPatterns.( |ILAsm|_| ) \n( |ILAsm|_| ) \n\n Matches expressions which are IL assembly code\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |ILFieldGet|_| )","title":"FSharpExprPatterns.( |ILFieldGet|_| )","content":"FSharpExprPatterns.( |ILFieldGet|_| ) \n( |ILFieldGet|_| ) \n\n Matches expressions which fetch a field from a .NET type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |ILFieldSet|_| )","title":"FSharpExprPatterns.( |ILFieldSet|_| )","content":"FSharpExprPatterns.( |ILFieldSet|_| ) \n( |ILFieldSet|_| ) \n\n Matches expressions which set a field in a .NET type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |ObjectExpr|_| )","title":"FSharpExprPatterns.( |ObjectExpr|_| )","content":"FSharpExprPatterns.( |ObjectExpr|_| ) \n( |ObjectExpr|_| ) \n\n Matches object expressions, returning the base type, the base call, the overrides and the interface implementations\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |TraitCall|_| )","title":"FSharpExprPatterns.( |TraitCall|_| )","content":"FSharpExprPatterns.( |TraitCall|_| ) \n( |TraitCall|_| ) \n\n Matches expressions for an unresolved call to a trait \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexprpatterns.html#( |WitnessArg|_| )","title":"FSharpExprPatterns.( |WitnessArg|_| )","content":"FSharpExprPatterns.( |WitnessArg|_| ) \n( |WitnessArg|_| ) \n\n Indicates a witness argument index from the witness arguments supplied to the enclosing method\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html","title":"FSharpSymbolPatterns","content":"FSharpSymbolPatterns \n\n Patterns over FSharpSymbol and derivatives.\n \nFSharpSymbolPatterns.( |AbbreviatedType|_| ) \n( |AbbreviatedType|_| ) \nFSharpSymbolPatterns.( |TypeWithDefinition|_| ) \n( |TypeWithDefinition|_| ) \nFSharpSymbolPatterns.( |Attribute|_| ) \n( |Attribute|_| ) \nFSharpSymbolPatterns.( |ValueType|_| ) \n( |ValueType|_| ) \nFSharpSymbolPatterns.( |Class|_| ) \n( |Class|_| ) \nFSharpSymbolPatterns.( |Record|_| ) \n( |Record|_| ) \nFSharpSymbolPatterns.( |UnionType|_| ) \n( |UnionType|_| ) \nFSharpSymbolPatterns.( |Delegate|_| ) \n( |Delegate|_| ) \nFSharpSymbolPatterns.( |FSharpException|_| ) \n( |FSharpException|_| ) \nFSharpSymbolPatterns.( |Interface|_| ) \n( |Interface|_| ) \nFSharpSymbolPatterns.( |AbstractClass|_| ) \n( |AbstractClass|_| ) \nFSharpSymbolPatterns.( |FSharpType|_| ) \n( |FSharpType|_| ) \nFSharpSymbolPatterns.( |ProvidedType|_| ) \n( |ProvidedType|_| ) \nFSharpSymbolPatterns.( |ByRef|_| ) \n( |ByRef|_| ) \nFSharpSymbolPatterns.( |Array|_| ) \n( |Array|_| ) \nFSharpSymbolPatterns.( |FSharpModule|_| ) \n( |FSharpModule|_| ) \nFSharpSymbolPatterns.( |Namespace|_| ) \n( |Namespace|_| ) \nFSharpSymbolPatterns.( |ProvidedAndErasedType|_| ) \n( |ProvidedAndErasedType|_| ) \nFSharpSymbolPatterns.( |Enum|_| ) \n( |Enum|_| ) \nFSharpSymbolPatterns.( |Tuple|_| ) \n( |Tuple|_| ) \nFSharpSymbolPatterns.( |RefCell|_| ) \n( |RefCell|_| ) \nFSharpSymbolPatterns.( |FunctionType|_| ) \n( |FunctionType|_| ) \nFSharpSymbolPatterns.( |Pattern|_| ) \n( |Pattern|_| ) \nFSharpSymbolPatterns.( |Field|_| ) \n( |Field|_| ) \nFSharpSymbolPatterns.( |MutableVar|_| ) \n( |MutableVar|_| ) \nFSharpSymbolPatterns.( |FSharpEntity|_| ) \n( |FSharpEntity|_| ) \nFSharpSymbolPatterns.( |Parameter|_| ) \n( |Parameter|_| ) \nFSharpSymbolPatterns.( |UnionCase|_| ) \n( |UnionCase|_| ) \nFSharpSymbolPatterns.( |RecordField|_| ) \n( |RecordField|_| ) \nFSharpSymbolPatterns.( |ActivePatternCase|_| ) \n( |ActivePatternCase|_| ) \nFSharpSymbolPatterns.( |MemberFunctionOrValue|_| ) \n( |MemberFunctionOrValue|_| ) \nFSharpSymbolPatterns.( |Constructor|_| ) \n( |Constructor|_| ) \nFSharpSymbolPatterns.( |Function|_| ) \n( |Function|_| ) \nFSharpSymbolPatterns.( |ExtensionMember|_| ) \n( |ExtensionMember|_| ) \nFSharpSymbolPatterns.( |Event|_| ) \n( |Event|_| )"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |AbbreviatedType|_| )","title":"FSharpSymbolPatterns.( |AbbreviatedType|_| )","content":"FSharpSymbolPatterns.( |AbbreviatedType|_| ) \n( |AbbreviatedType|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |TypeWithDefinition|_| )","title":"FSharpSymbolPatterns.( |TypeWithDefinition|_| )","content":"FSharpSymbolPatterns.( |TypeWithDefinition|_| ) \n( |TypeWithDefinition|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Attribute|_| )","title":"FSharpSymbolPatterns.( |Attribute|_| )","content":"FSharpSymbolPatterns.( |Attribute|_| ) \n( |Attribute|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |ValueType|_| )","title":"FSharpSymbolPatterns.( |ValueType|_| )","content":"FSharpSymbolPatterns.( |ValueType|_| ) \n( |ValueType|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Class|_| )","title":"FSharpSymbolPatterns.( |Class|_| )","content":"FSharpSymbolPatterns.( |Class|_| ) \n( |Class|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Record|_| )","title":"FSharpSymbolPatterns.( |Record|_| )","content":"FSharpSymbolPatterns.( |Record|_| ) \n( |Record|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |UnionType|_| )","title":"FSharpSymbolPatterns.( |UnionType|_| )","content":"FSharpSymbolPatterns.( |UnionType|_| ) \n( |UnionType|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Delegate|_| )","title":"FSharpSymbolPatterns.( |Delegate|_| )","content":"FSharpSymbolPatterns.( |Delegate|_| ) \n( |Delegate|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |FSharpException|_| )","title":"FSharpSymbolPatterns.( |FSharpException|_| )","content":"FSharpSymbolPatterns.( |FSharpException|_| ) \n( |FSharpException|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Interface|_| )","title":"FSharpSymbolPatterns.( |Interface|_| )","content":"FSharpSymbolPatterns.( |Interface|_| ) \n( |Interface|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |AbstractClass|_| )","title":"FSharpSymbolPatterns.( |AbstractClass|_| )","content":"FSharpSymbolPatterns.( |AbstractClass|_| ) \n( |AbstractClass|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |FSharpType|_| )","title":"FSharpSymbolPatterns.( |FSharpType|_| )","content":"FSharpSymbolPatterns.( |FSharpType|_| ) \n( |FSharpType|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |ProvidedType|_| )","title":"FSharpSymbolPatterns.( |ProvidedType|_| )","content":"FSharpSymbolPatterns.( |ProvidedType|_| ) \n( |ProvidedType|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |ByRef|_| )","title":"FSharpSymbolPatterns.( |ByRef|_| )","content":"FSharpSymbolPatterns.( |ByRef|_| ) \n( |ByRef|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Array|_| )","title":"FSharpSymbolPatterns.( |Array|_| )","content":"FSharpSymbolPatterns.( |Array|_| ) \n( |Array|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |FSharpModule|_| )","title":"FSharpSymbolPatterns.( |FSharpModule|_| )","content":"FSharpSymbolPatterns.( |FSharpModule|_| ) \n( |FSharpModule|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Namespace|_| )","title":"FSharpSymbolPatterns.( |Namespace|_| )","content":"FSharpSymbolPatterns.( |Namespace|_| ) \n( |Namespace|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |ProvidedAndErasedType|_| )","title":"FSharpSymbolPatterns.( |ProvidedAndErasedType|_| )","content":"FSharpSymbolPatterns.( |ProvidedAndErasedType|_| ) \n( |ProvidedAndErasedType|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Enum|_| )","title":"FSharpSymbolPatterns.( |Enum|_| )","content":"FSharpSymbolPatterns.( |Enum|_| ) \n( |Enum|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Tuple|_| )","title":"FSharpSymbolPatterns.( |Tuple|_| )","content":"FSharpSymbolPatterns.( |Tuple|_| ) \n( |Tuple|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |RefCell|_| )","title":"FSharpSymbolPatterns.( |RefCell|_| )","content":"FSharpSymbolPatterns.( |RefCell|_| ) \n( |RefCell|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |FunctionType|_| )","title":"FSharpSymbolPatterns.( |FunctionType|_| )","content":"FSharpSymbolPatterns.( |FunctionType|_| ) \n( |FunctionType|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Pattern|_| )","title":"FSharpSymbolPatterns.( |Pattern|_| )","content":"FSharpSymbolPatterns.( |Pattern|_| ) \n( |Pattern|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Field|_| )","title":"FSharpSymbolPatterns.( |Field|_| )","content":"FSharpSymbolPatterns.( |Field|_| ) \n( |Field|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |MutableVar|_| )","title":"FSharpSymbolPatterns.( |MutableVar|_| )","content":"FSharpSymbolPatterns.( |MutableVar|_| ) \n( |MutableVar|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |FSharpEntity|_| )","title":"FSharpSymbolPatterns.( |FSharpEntity|_| )","content":"FSharpSymbolPatterns.( |FSharpEntity|_| ) \n( |FSharpEntity|_| ) \n\n Returns (originalEntity, abbreviatedEntity, abbreviatedType)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Parameter|_| )","title":"FSharpSymbolPatterns.( |Parameter|_| )","content":"FSharpSymbolPatterns.( |Parameter|_| ) \n( |Parameter|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |UnionCase|_| )","title":"FSharpSymbolPatterns.( |UnionCase|_| )","content":"FSharpSymbolPatterns.( |UnionCase|_| ) \n( |UnionCase|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |RecordField|_| )","title":"FSharpSymbolPatterns.( |RecordField|_| )","content":"FSharpSymbolPatterns.( |RecordField|_| ) \n( |RecordField|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |ActivePatternCase|_| )","title":"FSharpSymbolPatterns.( |ActivePatternCase|_| )","content":"FSharpSymbolPatterns.( |ActivePatternCase|_| ) \n( |ActivePatternCase|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |MemberFunctionOrValue|_| )","title":"FSharpSymbolPatterns.( |MemberFunctionOrValue|_| )","content":"FSharpSymbolPatterns.( |MemberFunctionOrValue|_| ) \n( |MemberFunctionOrValue|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Constructor|_| )","title":"FSharpSymbolPatterns.( |Constructor|_| )","content":"FSharpSymbolPatterns.( |Constructor|_| ) \n( |Constructor|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Function|_| )","title":"FSharpSymbolPatterns.( |Function|_| )","content":"FSharpSymbolPatterns.( |Function|_| ) \n( |Function|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |ExtensionMember|_| )","title":"FSharpSymbolPatterns.( |ExtensionMember|_| )","content":"FSharpSymbolPatterns.( |ExtensionMember|_| ) \n( |ExtensionMember|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbolpatterns.html#( |Event|_| )","title":"FSharpSymbolPatterns.( |Event|_| )","content":"FSharpSymbolPatterns.( |Event|_| ) \n( |Event|_| ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html","title":"FSharpAbstractParameter","content":"FSharpAbstractParameter \n\n Represents a parameter in an abstract method of a class or interface\n \nFSharpAbstractParameter.IsOutArg \nIsOutArg \nFSharpAbstractParameter.IsOptionalArg \nIsOptionalArg \nFSharpAbstractParameter.Type \nType \nFSharpAbstractParameter.Attributes \nAttributes \nFSharpAbstractParameter.IsInArg \nIsInArg \nFSharpAbstractParameter.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#IsOutArg","title":"FSharpAbstractParameter.IsOutArg","content":"FSharpAbstractParameter.IsOutArg \nIsOutArg \n\n Indicate this is an out argument\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#IsOptionalArg","title":"FSharpAbstractParameter.IsOptionalArg","content":"FSharpAbstractParameter.IsOptionalArg \nIsOptionalArg \n\n Indicate this is an optional argument\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#Type","title":"FSharpAbstractParameter.Type","content":"FSharpAbstractParameter.Type \nType \n\n The declared or inferred type of the parameter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#Attributes","title":"FSharpAbstractParameter.Attributes","content":"FSharpAbstractParameter.Attributes \nAttributes \n\n The declared attributes of the parameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#IsInArg","title":"FSharpAbstractParameter.IsInArg","content":"FSharpAbstractParameter.IsInArg \nIsInArg \n\n Indicate this is an in argument\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractparameter.html#Name","title":"FSharpAbstractParameter.Name","content":"FSharpAbstractParameter.Name \nName \n\n The optional name of the parameter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html","title":"FSharpAbstractSignature","content":"FSharpAbstractSignature \n\n Represents the signature of an abstract slot of a class or interface \n \nFSharpAbstractSignature.MethodGenericParameters \nMethodGenericParameters \nFSharpAbstractSignature.AbstractArguments \nAbstractArguments \nFSharpAbstractSignature.DeclaringType \nDeclaringType \nFSharpAbstractSignature.DeclaringTypeGenericParameters \nDeclaringTypeGenericParameters \nFSharpAbstractSignature.AbstractReturnType \nAbstractReturnType \nFSharpAbstractSignature.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#MethodGenericParameters","title":"FSharpAbstractSignature.MethodGenericParameters","content":"FSharpAbstractSignature.MethodGenericParameters \nMethodGenericParameters \n\n Get the generic arguments of the abstract slot\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#AbstractArguments","title":"FSharpAbstractSignature.AbstractArguments","content":"FSharpAbstractSignature.AbstractArguments \nAbstractArguments \n\n Get the arguments of the abstract slot\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#DeclaringType","title":"FSharpAbstractSignature.DeclaringType","content":"FSharpAbstractSignature.DeclaringType \nDeclaringType \n\n Get the declaring type of the abstract slot\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#DeclaringTypeGenericParameters","title":"FSharpAbstractSignature.DeclaringTypeGenericParameters","content":"FSharpAbstractSignature.DeclaringTypeGenericParameters \nDeclaringTypeGenericParameters \n\n Get the generic arguments of the type defining the abstract slot\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#AbstractReturnType","title":"FSharpAbstractSignature.AbstractReturnType","content":"FSharpAbstractSignature.AbstractReturnType \nAbstractReturnType \n\n Get the return type of the abstract slot\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpabstractsignature.html#Name","title":"FSharpAbstractSignature.Name","content":"FSharpAbstractSignature.Name \nName \n\n Get the name of the abstract slot\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibility.html","title":"FSharpAccessibility","content":"FSharpAccessibility \n\n Indicates the accessibility of a symbol, as seen by the F# language\n \nFSharpAccessibility.IsInternal \nIsInternal \nFSharpAccessibility.IsPrivate \nIsPrivate \nFSharpAccessibility.IsProtected \nIsProtected \nFSharpAccessibility.IsPublic \nIsPublic"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibility.html#IsInternal","title":"FSharpAccessibility.IsInternal","content":"FSharpAccessibility.IsInternal \nIsInternal \n\n Indicates the symbol has internal accessibility.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibility.html#IsPrivate","title":"FSharpAccessibility.IsPrivate","content":"FSharpAccessibility.IsPrivate \nIsPrivate \n\n Indicates the symbol has private accessibility.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibility.html#IsProtected","title":"FSharpAccessibility.IsProtected","content":"FSharpAccessibility.IsProtected \nIsProtected \n\n Indicates the symbol has protected accessibility.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibility.html#IsPublic","title":"FSharpAccessibility.IsPublic","content":"FSharpAccessibility.IsPublic \nIsPublic \n\n Indicates the symbol has public accessibility.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpaccessibilityrights.html","title":"FSharpAccessibilityRights","content":"FSharpAccessibilityRights \n\n Represents the rights of a compilation to access symbols\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html","title":"FSharpActivePatternCase","content":"FSharpActivePatternCase \n\n A subtype of FSharpSymbol that represents a single case within an active pattern\n \nFSharpActivePatternCase.XmlDocSig \nXmlDocSig \nFSharpActivePatternCase.Group \nGroup \nFSharpActivePatternCase.DeclarationLocation \nDeclarationLocation \nFSharpActivePatternCase.Index \nIndex \nFSharpActivePatternCase.Name \nName \nFSharpActivePatternCase.XmlDoc \nXmlDoc"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#XmlDocSig","title":"FSharpActivePatternCase.XmlDocSig","content":"FSharpActivePatternCase.XmlDocSig \nXmlDocSig \n\n XML documentation signature for the active pattern case, used for .xml file lookup for compiled code\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#Group","title":"FSharpActivePatternCase.Group","content":"FSharpActivePatternCase.Group \nGroup \n\n The group of active pattern cases this belongs to\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#DeclarationLocation","title":"FSharpActivePatternCase.DeclarationLocation","content":"FSharpActivePatternCase.DeclarationLocation \nDeclarationLocation \n\n The location of declaration of the active pattern case \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#Index","title":"FSharpActivePatternCase.Index","content":"FSharpActivePatternCase.Index \nIndex \n\n Index of the case in the pattern group\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#Name","title":"FSharpActivePatternCase.Name","content":"FSharpActivePatternCase.Name \nName \n\n The name of the active pattern case \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterncase.html#XmlDoc","title":"FSharpActivePatternCase.XmlDoc","content":"FSharpActivePatternCase.XmlDoc \nXmlDoc \n\n Get the XML documentation for the entity\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html","title":"FSharpActivePatternGroup","content":"FSharpActivePatternGroup \n\n Represents all cases within an active pattern\n \nFSharpActivePatternGroup.Names \nNames \nFSharpActivePatternGroup.DeclaringEntity \nDeclaringEntity \nFSharpActivePatternGroup.IsTotal \nIsTotal \nFSharpActivePatternGroup.Name \nName \nFSharpActivePatternGroup.OverallType \nOverallType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html#Names","title":"FSharpActivePatternGroup.Names","content":"FSharpActivePatternGroup.Names \nNames \n\n The names of the active pattern cases\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html#DeclaringEntity","title":"FSharpActivePatternGroup.DeclaringEntity","content":"FSharpActivePatternGroup.DeclaringEntity \nDeclaringEntity \n\n Try to get the entity in which the active pattern is declared\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html#IsTotal","title":"FSharpActivePatternGroup.IsTotal","content":"FSharpActivePatternGroup.IsTotal \nIsTotal \n\n Indicate this is a total active pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html#Name","title":"FSharpActivePatternGroup.Name","content":"FSharpActivePatternGroup.Name \nName \n\n The whole group name\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpactivepatterngroup.html#OverallType","title":"FSharpActivePatternGroup.OverallType","content":"FSharpActivePatternGroup.OverallType \nOverallType \n\n Get the type indicating signature of the active pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpanonrecordtypedetails.html","title":"FSharpAnonRecordTypeDetails","content":"FSharpAnonRecordTypeDetails \n\n A subtype of FSharpSymbol that represents a record or union case field as seen by the F# language\n \nFSharpAnonRecordTypeDetails.Assembly \nAssembly \nFSharpAnonRecordTypeDetails.EnclosingCompiledTypeNames \nEnclosingCompiledTypeNames \nFSharpAnonRecordTypeDetails.SortedFieldNames \nSortedFieldNames \nFSharpAnonRecordTypeDetails.CompiledName \nCompiledName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpanonrecordtypedetails.html#Assembly","title":"FSharpAnonRecordTypeDetails.Assembly","content":"FSharpAnonRecordTypeDetails.Assembly \nAssembly \n\n The assembly where the compiled form of the anonymous type is defined\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpanonrecordtypedetails.html#EnclosingCompiledTypeNames","title":"FSharpAnonRecordTypeDetails.EnclosingCompiledTypeNames","content":"FSharpAnonRecordTypeDetails.EnclosingCompiledTypeNames \nEnclosingCompiledTypeNames \n\n Names of any enclosing types of the compiled form of the anonymous type (if the anonymous type was defined as a nested type)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpanonrecordtypedetails.html#SortedFieldNames","title":"FSharpAnonRecordTypeDetails.SortedFieldNames","content":"FSharpAnonRecordTypeDetails.SortedFieldNames \nSortedFieldNames \n\n The sorted labels of the anonymous type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpanonrecordtypedetails.html#CompiledName","title":"FSharpAnonRecordTypeDetails.CompiledName","content":"FSharpAnonRecordTypeDetails.CompiledName \nCompiledName \n\n The name of the compiled form of the anonymous type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html","title":"FSharpAssembly","content":"FSharpAssembly \n\n Represents an assembly as seen by the F# language\n \nFSharpAssembly.IsProviderGenerated \nIsProviderGenerated \nFSharpAssembly.Contents \nContents \nFSharpAssembly.SimpleName \nSimpleName \nFSharpAssembly.QualifiedName \nQualifiedName \nFSharpAssembly.FileName \nFileName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#IsProviderGenerated","title":"FSharpAssembly.IsProviderGenerated","content":"FSharpAssembly.IsProviderGenerated \nIsProviderGenerated \n\n Indicates if the assembly was generated by a type provider and is due for static linking\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#Contents","title":"FSharpAssembly.Contents","content":"FSharpAssembly.Contents \nContents \n\n The contents of the this assembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#SimpleName","title":"FSharpAssembly.SimpleName","content":"FSharpAssembly.SimpleName \nSimpleName \n\n The simple name for the assembly\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#QualifiedName","title":"FSharpAssembly.QualifiedName","content":"FSharpAssembly.QualifiedName \nQualifiedName \n\n The qualified name of the assembly\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassembly.html#FileName","title":"FSharpAssembly.FileName","content":"FSharpAssembly.FileName \nFileName \n\n The file name for the assembly, if any\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblycontents.html","title":"FSharpAssemblyContents","content":"FSharpAssemblyContents \n\n Represents the definitional contents of an assembly, as seen by the F# language\n \nFSharpAssemblyContents.ImplementationFiles \nImplementationFiles"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblycontents.html#ImplementationFiles","title":"FSharpAssemblyContents.ImplementationFiles","content":"FSharpAssemblyContents.ImplementationFiles \nImplementationFiles \n\n The contents of the implementation files in the assembly\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblysignature.html","title":"FSharpAssemblySignature","content":"FSharpAssemblySignature \n\n Represents an inferred signature of part of an assembly as seen by the F# language\n \nFSharpAssemblySignature.FindEntityByPath \nFindEntityByPath \nFSharpAssemblySignature.TryGetEntities \nTryGetEntities \nFSharpAssemblySignature.Attributes \nAttributes \nFSharpAssemblySignature.Entities \nEntities"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblysignature.html#FindEntityByPath","title":"FSharpAssemblySignature.FindEntityByPath","content":"FSharpAssemblySignature.FindEntityByPath \nFindEntityByPath \n\n Find entity using compiled names\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblysignature.html#TryGetEntities","title":"FSharpAssemblySignature.TryGetEntities","content":"FSharpAssemblySignature.TryGetEntities \nTryGetEntities \n\n Safe version of \u0060Entities\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblysignature.html#Attributes","title":"FSharpAssemblySignature.Attributes","content":"FSharpAssemblySignature.Attributes \nAttributes \n\n Get the declared attributes for the assembly.\n Only available when parsing an entire project. \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpassemblysignature.html#Entities","title":"FSharpAssemblySignature.Entities","content":"FSharpAssemblySignature.Entities \nEntities \n\n The (non-nested) module and type definitions in this signature\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html","title":"FSharpAttribute","content":"FSharpAttribute \n\n Represents a custom attribute attached to F# source code or a compiler .NET component\n \nFSharpAttribute.Format \nFormat \nFSharpAttribute.IsAttribute \nIsAttribute \nFSharpAttribute.IsUnresolved \nIsUnresolved \nFSharpAttribute.AttributeType \nAttributeType \nFSharpAttribute.Range \nRange \nFSharpAttribute.NamedArguments \nNamedArguments \nFSharpAttribute.ConstructorArguments \nConstructorArguments"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#Format","title":"FSharpAttribute.Format","content":"FSharpAttribute.Format \nFormat \n\n Format the attribute using the rules of the given display context\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#IsAttribute","title":"FSharpAttribute.IsAttribute","content":"FSharpAttribute.IsAttribute \nIsAttribute \n\n Indicates if attribute matchies the full name of the given type parameter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#IsUnresolved","title":"FSharpAttribute.IsUnresolved","content":"FSharpAttribute.IsUnresolved \nIsUnresolved \n\n Indicates if the attribute type is in an unresolved assembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#AttributeType","title":"FSharpAttribute.AttributeType","content":"FSharpAttribute.AttributeType \nAttributeType \n\n The type of the attribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#Range","title":"FSharpAttribute.Range","content":"FSharpAttribute.Range \nRange \n\n Get the range of the name of the attribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#NamedArguments","title":"FSharpAttribute.NamedArguments","content":"FSharpAttribute.NamedArguments \nNamedArguments \n\n The named arguments for the attribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpattribute.html#ConstructorArguments","title":"FSharpAttribute.ConstructorArguments","content":"FSharpAttribute.ConstructorArguments \nConstructorArguments \n\n The arguments to the constructor for the attribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdelegatesignature.html","title":"FSharpDelegateSignature","content":"FSharpDelegateSignature \n\n Represents a delegate signature in an F# symbol\n \nFSharpDelegateSignature.DelegateArguments \nDelegateArguments \nFSharpDelegateSignature.DelegateReturnType \nDelegateReturnType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdelegatesignature.html#DelegateArguments","title":"FSharpDelegateSignature.DelegateArguments","content":"FSharpDelegateSignature.DelegateArguments \nDelegateArguments \n\n Get the argument types of the delegate signature\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdelegatesignature.html#DelegateReturnType","title":"FSharpDelegateSignature.DelegateReturnType","content":"FSharpDelegateSignature.DelegateReturnType \nDelegateReturnType \n\n Get the return type of the delegate signature\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html","title":"FSharpDisplayContext","content":"FSharpDisplayContext \n\n Represents the information needed to format types and other information in a style\n suitable for use in F# source text at a particular source location.\n\n Acquired via GetDisplayEnvAtLocationAlternate and similar methods. May be passed \n to the Format method on FSharpType and other methods.\n \nFSharpDisplayContext.WithPrefixGenericParameters \nWithPrefixGenericParameters \nFSharpDisplayContext.WithShortTypeNames \nWithShortTypeNames \nFSharpDisplayContext.WithSuffixGenericParameters \nWithSuffixGenericParameters \nFSharpDisplayContext.Empty \nEmpty"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html#WithPrefixGenericParameters","title":"FSharpDisplayContext.WithPrefixGenericParameters","content":"FSharpDisplayContext.WithPrefixGenericParameters \nWithPrefixGenericParameters \n\n Causes type signatures to be formatted with prefix-style generic parameters,\n for example \u0060list\u003Cint\u003E\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html#WithShortTypeNames","title":"FSharpDisplayContext.WithShortTypeNames","content":"FSharpDisplayContext.WithShortTypeNames \nWithShortTypeNames \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html#WithSuffixGenericParameters","title":"FSharpDisplayContext.WithSuffixGenericParameters","content":"FSharpDisplayContext.WithSuffixGenericParameters \nWithSuffixGenericParameters \n\n Causes type signatures to be formatted with suffix-style generic parameters,\n for example \u0060int list\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpdisplaycontext.html#Empty","title":"FSharpDisplayContext.Empty","content":"FSharpDisplayContext.Empty \nEmpty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html","title":"FSharpEntity","content":"FSharpEntity \n\n A subtype of FSharpSymbol that represents a type definition or module as seen by the F# language\n \nFSharpEntity.GetPublicNestedEntities \nGetPublicNestedEntities \nFSharpEntity.TryGetFullCompiledName \nTryGetFullCompiledName \nFSharpEntity.TryGetFullDisplayName \nTryGetFullDisplayName \nFSharpEntity.TryGetFullName \nTryGetFullName \nFSharpEntity.TryGetMembersFunctionsAndValues \nTryGetMembersFunctionsAndValues \nFSharpEntity.TryGetMetadataText \nTryGetMetadataText \nFSharpEntity.FSharpFields \nFSharpFields \nFSharpEntity.IsEnum \nIsEnum \nFSharpEntity.IsFSharpExceptionDeclaration \nIsFSharpExceptionDeclaration \nFSharpEntity.IsNamespace \nIsNamespace \nFSharpEntity.ActivePatternCases \nActivePatternCases \nFSharpEntity.NestedEntities \nNestedEntities \nFSharpEntity.CompiledName \nCompiledName \nFSharpEntity.IsFSharp \nIsFSharp \nFSharpEntity.AllCompilationPaths \nAllCompilationPaths \nFSharpEntity.DeclaredInterfaces \nDeclaredInterfaces \nFSharpEntity.UsesPrefixDisplay \nUsesPrefixDisplay \nFSharpEntity.MembersFunctionsAndValues \nMembersFunctionsAndValues \nFSharpEntity.ArrayRank \nArrayRank \nFSharpEntity.IsClass \nIsClass \nFSharpEntity.LogicalName \nLogicalName \nFSharpEntity.XmlDocSig \nXmlDocSig \nFSharpEntity.DeclaringEntity \nDeclaringEntity \nFSharpEntity.IsAttributeType \nIsAttributeType \nFSharpEntity.HasAssemblyCodeRepresentation \nHasAssemblyCodeRepresentation \nFSharpEntity.QualifiedName \nQualifiedName \nFSharpEntity.IsByRef \nIsByRef \nFSharpEntity.IsFSharpUnion \nIsFSharpUnion \nFSharpEntity.DeclarationLocation \nDeclarationLocation \nFSharpEntity.AbbreviatedType \nAbbreviatedType \nFSharpEntity.BaseType \nBaseType \nFSharpEntity.GenericParameters \nGenericParameters \nFSharpEntity.TryFullName \nTryFullName \nFSharpEntity.IsInterface \nIsInterface \nFSharpEntity.IsStaticInstantiation \nIsStaticInstantiation \nFSharpEntity.AccessPath \nAccessPath \nFSharpEntity.FSharpDelegateSignature \nFSharpDelegateSignature \nFSharpEntity.IsDelegate \nIsDelegate \nFSharpEntity.IsProvidedAndGenerated \nIsProvidedAndGenerated \nFSharpEntity.IsFSharpAbbreviation \nIsFSharpAbbreviation \nFSharpEntity.UnionCases \nUnionCases \nFSharpEntity.IsOpaque \nIsOpaque \nFSharpEntity.RepresentationAccessibility \nRepresentationAccessibility \nFSharpEntity.DisplayName \nDisplayName \nFSharpEntity.IsFSharpModule \nIsFSharpModule \nFSharpEntity.Namespace \nNamespace \nFSharpEntity.IsValueType \nIsValueType \nFSharpEntity.IsAbstractClass \nIsAbstractClass \nFSharpEntity.IsProvided \nIsProvided \nFSharpEntity.HasFSharpModuleSuffix \nHasFSharpModuleSuffix \nFSharpEntity.IsFSharpRecord \nIsFSharpRecord \nFSharpEntity.StaticParameters \nStaticParameters \nFSharpEntity.IsMeasure \nIsMeasure \nFSharpEntity.AllInterfaces \nAllInterfaces \nFSharpEntity.IsArrayType \nIsArrayType \nFSharpEntity.XmlDoc \nXmlDoc \nFSharpEntity.IsProvidedAndErased \nIsProvidedAndErased \nFSharpEntity.IsUnresolved \nIsUnresolved \nFSharpEntity.FullName \nFullName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#GetPublicNestedEntities","title":"FSharpEntity.GetPublicNestedEntities","content":"FSharpEntity.GetPublicNestedEntities \nGetPublicNestedEntities \n\n Public nested entities (methods, functions, values, nested modules).\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryGetFullCompiledName","title":"FSharpEntity.TryGetFullCompiledName","content":"FSharpEntity.TryGetFullCompiledName \nTryGetFullCompiledName \n\n Safe version of \u0060CompiledName\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryGetFullDisplayName","title":"FSharpEntity.TryGetFullDisplayName","content":"FSharpEntity.TryGetFullDisplayName \nTryGetFullDisplayName \n\n Safe version of \u0060DisplayName\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryGetFullName","title":"FSharpEntity.TryGetFullName","content":"FSharpEntity.TryGetFullName \nTryGetFullName \n\n Safe version of \u0060FullName\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryGetMembersFunctionsAndValues","title":"FSharpEntity.TryGetMembersFunctionsAndValues","content":"FSharpEntity.TryGetMembersFunctionsAndValues \nTryGetMembersFunctionsAndValues \n\n Safe version of \u0060GetMembersFunctionsAndValues\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryGetMetadataText","title":"FSharpEntity.TryGetMetadataText","content":"FSharpEntity.TryGetMetadataText \nTryGetMetadataText \n\n Get the source text of the entity\u0027s signature to be used as metadata.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#FSharpFields","title":"FSharpEntity.FSharpFields","content":"FSharpEntity.FSharpFields \nFSharpFields \n\n Get the fields of a record, class, struct or enum from the perspective of the F# language.\n This includes static fields, the \u0027val\u0027 bindings in classes and structs, and the value definitions in enums.\n For classes, the list may include compiler generated fields implied by the use of primary constructors.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsEnum","title":"FSharpEntity.IsEnum","content":"FSharpEntity.IsEnum \nIsEnum \n\n Indicates if the entity is an enum type definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharpExceptionDeclaration","title":"FSharpEntity.IsFSharpExceptionDeclaration","content":"FSharpEntity.IsFSharpExceptionDeclaration \nIsFSharpExceptionDeclaration \n\n Indicates an F# exception declaration\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsNamespace","title":"FSharpEntity.IsNamespace","content":"FSharpEntity.IsNamespace \nIsNamespace \n\n Indicates if the entity is a part of a namespace path\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#ActivePatternCases","title":"FSharpEntity.ActivePatternCases","content":"FSharpEntity.ActivePatternCases \nActivePatternCases \n\n Get all active pattern cases defined in all active patterns in the module.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#NestedEntities","title":"FSharpEntity.NestedEntities","content":"FSharpEntity.NestedEntities \nNestedEntities \n\n Get the modules and types defined in a module, or the nested types of a type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#CompiledName","title":"FSharpEntity.CompiledName","content":"FSharpEntity.CompiledName \nCompiledName \n\n Get the compiled name of the type or module, possibly with \u0060n mangling. This is identical to LogicalName\n unless the CompiledName attribute is used.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharp","title":"FSharpEntity.IsFSharp","content":"FSharpEntity.IsFSharp \nIsFSharp \n\n Indicates if this is a reference to something in an F#-compiled assembly\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#AllCompilationPaths","title":"FSharpEntity.AllCompilationPaths","content":"FSharpEntity.AllCompilationPaths \nAllCompilationPaths \n\n Get all compilation paths, taking \u0060Module\u0060 suffixes into account.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#DeclaredInterfaces","title":"FSharpEntity.DeclaredInterfaces","content":"FSharpEntity.DeclaredInterfaces \nDeclaredInterfaces \n\n Get the declared interface implementations\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#UsesPrefixDisplay","title":"FSharpEntity.UsesPrefixDisplay","content":"FSharpEntity.UsesPrefixDisplay \nUsesPrefixDisplay \n\n Indicates if the type prefers the \u0022tycon\u003Ca,b\u003E\u0022 syntax for display etc. \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#MembersFunctionsAndValues","title":"FSharpEntity.MembersFunctionsAndValues","content":"FSharpEntity.MembersFunctionsAndValues \nMembersFunctionsAndValues \n\n Get the properties, events and methods of a type definitions, or the functions and values of a module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#ArrayRank","title":"FSharpEntity.ArrayRank","content":"FSharpEntity.ArrayRank \nArrayRank \n\n Get the rank of an array type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsClass","title":"FSharpEntity.IsClass","content":"FSharpEntity.IsClass \nIsClass \n\n Indicates if the entity is a class type definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#LogicalName","title":"FSharpEntity.LogicalName","content":"FSharpEntity.LogicalName \nLogicalName \n\n Get the name of the type or module, possibly with \u0060n mangling  \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#XmlDocSig","title":"FSharpEntity.XmlDocSig","content":"FSharpEntity.XmlDocSig \nXmlDocSig \n\n Get the XML documentation signature for the entity, used for .xml file lookup for compiled code\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#DeclaringEntity","title":"FSharpEntity.DeclaringEntity","content":"FSharpEntity.DeclaringEntity \nDeclaringEntity \n\n Get the enclosing entity for the definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsAttributeType","title":"FSharpEntity.IsAttributeType","content":"FSharpEntity.IsAttributeType \nIsAttributeType \n\n Check if the entity inherits from System.Attribute in its type hierarchy\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#HasAssemblyCodeRepresentation","title":"FSharpEntity.HasAssemblyCodeRepresentation","content":"FSharpEntity.HasAssemblyCodeRepresentation \nHasAssemblyCodeRepresentation \n\n Indicates if the type is implemented through a mapping to IL assembly code. This is only\n true for types in FSharp.Core.dll\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#QualifiedName","title":"FSharpEntity.QualifiedName","content":"FSharpEntity.QualifiedName \nQualifiedName \n\n Get the fully qualified name of the type or module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsByRef","title":"FSharpEntity.IsByRef","content":"FSharpEntity.IsByRef \nIsByRef \n\n Indicates if is the \u0027byref\u003C_\u003E\u0027 type definition used for byref types in F#-compiled assemblies\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharpUnion","title":"FSharpEntity.IsFSharpUnion","content":"FSharpEntity.IsFSharpUnion \nIsFSharpUnion \n\n Indicates if the entity is union type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#DeclarationLocation","title":"FSharpEntity.DeclarationLocation","content":"FSharpEntity.DeclarationLocation \nDeclarationLocation \n\n Get the declaration location for the type constructor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#AbbreviatedType","title":"FSharpEntity.AbbreviatedType","content":"FSharpEntity.AbbreviatedType \nAbbreviatedType \n\n Get the type abbreviated by an F# type abbreviation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#BaseType","title":"FSharpEntity.BaseType","content":"FSharpEntity.BaseType \nBaseType \n\n Get the base type, if any \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#GenericParameters","title":"FSharpEntity.GenericParameters","content":"FSharpEntity.GenericParameters \nGenericParameters \n\n Get the generic parameters, possibly including unit-of-measure parameters\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#TryFullName","title":"FSharpEntity.TryFullName","content":"FSharpEntity.TryFullName \nTryFullName \n\n Get the full name of the type or module if it is available\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsInterface","title":"FSharpEntity.IsInterface","content":"FSharpEntity.IsInterface \nIsInterface \n\n Indicates if the entity is an interface type definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsStaticInstantiation","title":"FSharpEntity.IsStaticInstantiation","content":"FSharpEntity.IsStaticInstantiation \nIsStaticInstantiation \n\n Indicates if the entity is a \u0027fake\u0027 symbol related to a static instantiation of a type provider\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#AccessPath","title":"FSharpEntity.AccessPath","content":"FSharpEntity.AccessPath \nAccessPath \n\n Get the path used to address the entity (e.g. \u0022Namespace.Module1.NestedModule2\u0022). Gives\n \u0022global\u0022 for items not in a namespace.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#FSharpDelegateSignature","title":"FSharpEntity.FSharpDelegateSignature","content":"FSharpEntity.FSharpDelegateSignature \nFSharpDelegateSignature \n\n Indicates if the type is a delegate with the given Invoke signature \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsDelegate","title":"FSharpEntity.IsDelegate","content":"FSharpEntity.IsDelegate \nIsDelegate \n\n Indicates if the entity is a delegate type definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsProvidedAndGenerated","title":"FSharpEntity.IsProvidedAndGenerated","content":"FSharpEntity.IsProvidedAndGenerated \nIsProvidedAndGenerated \n\n Indicates if the entity is a generated provided type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharpAbbreviation","title":"FSharpEntity.IsFSharpAbbreviation","content":"FSharpEntity.IsFSharpAbbreviation \nIsFSharpAbbreviation \n\n Indicates if the entity is a measure, type or exception abbreviation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#UnionCases","title":"FSharpEntity.UnionCases","content":"FSharpEntity.UnionCases \nUnionCases \n\n Get the cases of a union type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsOpaque","title":"FSharpEntity.IsOpaque","content":"FSharpEntity.IsOpaque \nIsOpaque \n\n Indicates if the entity is a type definition for a reference type where the implementation details are hidden by a signature\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#RepresentationAccessibility","title":"FSharpEntity.RepresentationAccessibility","content":"FSharpEntity.RepresentationAccessibility \nRepresentationAccessibility \n\n Get the declared accessibility of the representation, not taking signatures into account \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#DisplayName","title":"FSharpEntity.DisplayName","content":"FSharpEntity.DisplayName \nDisplayName \n\n Get the name of the type or module as displayed in F# code\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharpModule","title":"FSharpEntity.IsFSharpModule","content":"FSharpEntity.IsFSharpModule \nIsFSharpModule \n\n Indicates if the entity is an F# module definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#Namespace","title":"FSharpEntity.Namespace","content":"FSharpEntity.Namespace \nNamespace \n\n Get the namespace containing the type or module, if any. Use \u0027None\u0027 for item not in a namespace.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsValueType","title":"FSharpEntity.IsValueType","content":"FSharpEntity.IsValueType \nIsValueType \n\n Indicates if the entity is a struct or enum\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsAbstractClass","title":"FSharpEntity.IsAbstractClass","content":"FSharpEntity.IsAbstractClass \nIsAbstractClass \n\n Indicates if the entity is an abstract class\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsProvided","title":"FSharpEntity.IsProvided","content":"FSharpEntity.IsProvided \nIsProvided \n\n Indicates if the entity is a provided type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#HasFSharpModuleSuffix","title":"FSharpEntity.HasFSharpModuleSuffix","content":"FSharpEntity.HasFSharpModuleSuffix \nHasFSharpModuleSuffix \n\n Indicates that a module is compiled to a class with the given mangled name. The mangling is reversed during lookup \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsFSharpRecord","title":"FSharpEntity.IsFSharpRecord","content":"FSharpEntity.IsFSharpRecord \nIsFSharpRecord \n\n Indicates if the entity is record type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#StaticParameters","title":"FSharpEntity.StaticParameters","content":"FSharpEntity.StaticParameters \nStaticParameters \n\n Get the static parameters for a provided type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsMeasure","title":"FSharpEntity.IsMeasure","content":"FSharpEntity.IsMeasure \nIsMeasure \n\n Indicates if the entity is a measure definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#AllInterfaces","title":"FSharpEntity.AllInterfaces","content":"FSharpEntity.AllInterfaces \nAllInterfaces \n\n Get all the interface implementations, by walking the type hierarchy\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsArrayType","title":"FSharpEntity.IsArrayType","content":"FSharpEntity.IsArrayType \nIsArrayType \n\n Indicates if the entity is an array type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#XmlDoc","title":"FSharpEntity.XmlDoc","content":"FSharpEntity.XmlDoc \nXmlDoc \n\n Get the XML documentation for the entity\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsProvidedAndErased","title":"FSharpEntity.IsProvidedAndErased","content":"FSharpEntity.IsProvidedAndErased \nIsProvidedAndErased \n\n Indicates if the entity is an erased provided type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#IsUnresolved","title":"FSharpEntity.IsUnresolved","content":"FSharpEntity.IsUnresolved \nIsUnresolved \n\n Indicates if the entity is in an unresolved assembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpentity.html#FullName","title":"FSharpEntity.FullName","content":"FSharpEntity.FullName \nFullName \n\n Get the full name of the type or module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexpr.html","title":"FSharpExpr","content":"FSharpExpr \n\n Represents a checked and reduced expression, as seen by the F# language.  The active patterns \n in \u0027FSharp.Compiler.SourceCodeServices\u0027 can be used to analyze information about the expression.\n\n Pattern matching is reduced to decision trees and conditional tests. Some other\n constructs may be represented in reduced form.\n \nFSharpExpr.Type \nType \nFSharpExpr.ImmediateSubExpressions \nImmediateSubExpressions \nFSharpExpr.Range \nRange"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexpr.html#Type","title":"FSharpExpr.Type","content":"FSharpExpr.Type \nType \n\n The type of the expression\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexpr.html#ImmediateSubExpressions","title":"FSharpExpr.ImmediateSubExpressions","content":"FSharpExpr.ImmediateSubExpressions \nImmediateSubExpressions \n\n The immediate sub-expressions of the expression.  \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpexpr.html#Range","title":"FSharpExpr.Range","content":"FSharpExpr.Range \nRange \n\n The range of the expression\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html","title":"FSharpField","content":"FSharpField \n\n A subtype of FSharpSymbol that represents a record or union case field as seen by the F# language\n \nFSharpField.IsStatic \nIsStatic \nFSharpField.IsUnresolved \nIsUnresolved \nFSharpField.XmlDocSig \nXmlDocSig \nFSharpField.IsCompilerGenerated \nIsCompilerGenerated \nFSharpField.AnonRecordFieldDetails \nAnonRecordFieldDetails \nFSharpField.IsLiteral \nIsLiteral \nFSharpField.FieldAttributes \nFieldAttributes \nFSharpField.DeclaringEntity \nDeclaringEntity \nFSharpField.DeclarationLocation \nDeclarationLocation \nFSharpField.IsAnonRecordField \nIsAnonRecordField \nFSharpField.DeclaringUnionCase \nDeclaringUnionCase \nFSharpField.FieldType \nFieldType \nFSharpField.LiteralValue \nLiteralValue \nFSharpField.IsNameGenerated \nIsNameGenerated \nFSharpField.IsDefaultValue \nIsDefaultValue \nFSharpField.PropertyAttributes \nPropertyAttributes \nFSharpField.IsUnionCaseField \nIsUnionCaseField \nFSharpField.IsVolatile \nIsVolatile \nFSharpField.IsMutable \nIsMutable \nFSharpField.Name \nName \nFSharpField.XmlDoc \nXmlDoc"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsStatic","title":"FSharpField.IsStatic","content":"FSharpField.IsStatic \nIsStatic \n\n Indicates a static field \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsUnresolved","title":"FSharpField.IsUnresolved","content":"FSharpField.IsUnresolved \nIsUnresolved \n\n Indicates if the record field is for a type in an unresolved assembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#XmlDocSig","title":"FSharpField.XmlDocSig","content":"FSharpField.XmlDocSig \nXmlDocSig \n\n Get the XML documentation signature for .xml file lookup for the field, used for .xml file lookup for compiled code\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsCompilerGenerated","title":"FSharpField.IsCompilerGenerated","content":"FSharpField.IsCompilerGenerated \nIsCompilerGenerated \n\n Indicates a compiler generated field, not visible to Intellisense or name resolution \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#AnonRecordFieldDetails","title":"FSharpField.AnonRecordFieldDetails","content":"FSharpField.AnonRecordFieldDetails \nAnonRecordFieldDetails \n\n If the field is from an anonymous record type then get the details of the field including the index in the sorted array of fields\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsLiteral","title":"FSharpField.IsLiteral","content":"FSharpField.IsLiteral \nIsLiteral \n\n Indicates if the field has a literal value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#FieldAttributes","title":"FSharpField.FieldAttributes","content":"FSharpField.FieldAttributes \nFieldAttributes \n\n Get the attributes attached to generated field \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#DeclaringEntity","title":"FSharpField.DeclaringEntity","content":"FSharpField.DeclaringEntity \nDeclaringEntity \n\n Get the declaring entity of this field, if any. Fields from anonymous types do not have a declaring entity\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#DeclarationLocation","title":"FSharpField.DeclarationLocation","content":"FSharpField.DeclarationLocation \nDeclarationLocation \n\n Get the declaration location of the field \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsAnonRecordField","title":"FSharpField.IsAnonRecordField","content":"FSharpField.IsAnonRecordField \nIsAnonRecordField \n\n Is this a field from an anonymous record type?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#DeclaringUnionCase","title":"FSharpField.DeclaringUnionCase","content":"FSharpField.DeclaringUnionCase \nDeclaringUnionCase \n\n Returns the declaring union case symbol  \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#FieldType","title":"FSharpField.FieldType","content":"FSharpField.FieldType \nFieldType \n\n Get the type of the field, w.r.t. the generic parameters of the enclosing type constructor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#LiteralValue","title":"FSharpField.LiteralValue","content":"FSharpField.LiteralValue \nLiteralValue \n\n Get the default initialization info, for static literals \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsNameGenerated","title":"FSharpField.IsNameGenerated","content":"FSharpField.IsNameGenerated \nIsNameGenerated \n\n Indicates if the field name was generated by compiler (e.g. ItemN names in union cases and DataN in exceptions).\n This API returns true for source defined symbols only.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsDefaultValue","title":"FSharpField.IsDefaultValue","content":"FSharpField.IsDefaultValue \nIsDefaultValue \n\n Indicates if the field declared is declared \u0027DefaultValue\u0027 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#PropertyAttributes","title":"FSharpField.PropertyAttributes","content":"FSharpField.PropertyAttributes \nPropertyAttributes \n\n Get the attributes attached to generated property \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsUnionCaseField","title":"FSharpField.IsUnionCaseField","content":"FSharpField.IsUnionCaseField \nIsUnionCaseField \n\n Indicates if the field is declared in a union case\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsVolatile","title":"FSharpField.IsVolatile","content":"FSharpField.IsVolatile \nIsVolatile \n\n Indicates if the field is declared volatile \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#IsMutable","title":"FSharpField.IsMutable","content":"FSharpField.IsMutable \nIsMutable \n\n Indicates if the field is declared \u0027static\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#Name","title":"FSharpField.Name","content":"FSharpField.Name \nName \n\n Get the name of the field \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpfield.html#XmlDoc","title":"FSharpField.XmlDoc","content":"FSharpField.XmlDoc \nXmlDoc \n\n Get the XML documentation for the entity\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html","title":"FSharpGenericParameter","content":"FSharpGenericParameter \n\n A subtype of FSharpSymbol that represents a generic parameter for an FSharpSymbol\n \nFSharpGenericParameter.IsCompilerGenerated \nIsCompilerGenerated \nFSharpGenericParameter.Constraints \nConstraints \nFSharpGenericParameter.IsSolveAtCompileTime \nIsSolveAtCompileTime \nFSharpGenericParameter.DeclarationLocation \nDeclarationLocation \nFSharpGenericParameter.Name \nName \nFSharpGenericParameter.XmlDoc \nXmlDoc \nFSharpGenericParameter.IsMeasure \nIsMeasure"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#IsCompilerGenerated","title":"FSharpGenericParameter.IsCompilerGenerated","content":"FSharpGenericParameter.IsCompilerGenerated \nIsCompilerGenerated \n\n Indicates if this is a compiler generated type parameter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#Constraints","title":"FSharpGenericParameter.Constraints","content":"FSharpGenericParameter.Constraints \nConstraints \n\n Get the declared or inferred constraints for the type parameter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#IsSolveAtCompileTime","title":"FSharpGenericParameter.IsSolveAtCompileTime","content":"FSharpGenericParameter.IsSolveAtCompileTime \nIsSolveAtCompileTime \n\n Indicates if this is a statically resolved type variable\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#DeclarationLocation","title":"FSharpGenericParameter.DeclarationLocation","content":"FSharpGenericParameter.DeclarationLocation \nDeclarationLocation \n\n Get the range of the generic parameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#Name","title":"FSharpGenericParameter.Name","content":"FSharpGenericParameter.Name \nName \n\n Get the name of the generic parameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#XmlDoc","title":"FSharpGenericParameter.XmlDoc","content":"FSharpGenericParameter.XmlDoc \nXmlDoc \n\n Get the XML documentation for the entity\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameter.html#IsMeasure","title":"FSharpGenericParameter.IsMeasure","content":"FSharpGenericParameter.IsMeasure \nIsMeasure \n\n Indicates if this is a measure variable\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html","title":"FSharpGenericParameterConstraint","content":"FSharpGenericParameterConstraint \n\n Represents a constraint on a generic type parameter\n \nFSharpGenericParameterConstraint.IsSimpleChoiceConstraint \nIsSimpleChoiceConstraint \nFSharpGenericParameterConstraint.IsMemberConstraint \nIsMemberConstraint \nFSharpGenericParameterConstraint.EnumConstraintTarget \nEnumConstraintTarget \nFSharpGenericParameterConstraint.IsDefaultsToConstraint \nIsDefaultsToConstraint \nFSharpGenericParameterConstraint.MemberConstraintData \nMemberConstraintData \nFSharpGenericParameterConstraint.IsDelegateConstraint \nIsDelegateConstraint \nFSharpGenericParameterConstraint.DefaultsToConstraintData \nDefaultsToConstraintData \nFSharpGenericParameterConstraint.IsNonNullableValueTypeConstraint \nIsNonNullableValueTypeConstraint \nFSharpGenericParameterConstraint.IsComparisonConstraint \nIsComparisonConstraint \nFSharpGenericParameterConstraint.IsUnmanagedConstraint \nIsUnmanagedConstraint \nFSharpGenericParameterConstraint.DelegateConstraintData \nDelegateConstraintData \nFSharpGenericParameterConstraint.CoercesToTarget \nCoercesToTarget \nFSharpGenericParameterConstraint.IsSupportsNullConstraint \nIsSupportsNullConstraint \nFSharpGenericParameterConstraint.IsCoercesToConstraint \nIsCoercesToConstraint \nFSharpGenericParameterConstraint.IsReferenceTypeConstraint \nIsReferenceTypeConstraint \nFSharpGenericParameterConstraint.IsEnumConstraint \nIsEnumConstraint \nFSharpGenericParameterConstraint.IsEqualityConstraint \nIsEqualityConstraint \nFSharpGenericParameterConstraint.IsRequiresDefaultConstructorConstraint \nIsRequiresDefaultConstructorConstraint \nFSharpGenericParameterConstraint.SimpleChoices \nSimpleChoices"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsSimpleChoiceConstraint","title":"FSharpGenericParameterConstraint.IsSimpleChoiceConstraint","content":"FSharpGenericParameterConstraint.IsSimpleChoiceConstraint \nIsSimpleChoiceConstraint \n\n Indicates a constraint that is a type is a simple choice between one of the given ground types. Used by printf format strings.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsMemberConstraint","title":"FSharpGenericParameterConstraint.IsMemberConstraint","content":"FSharpGenericParameterConstraint.IsMemberConstraint \nIsMemberConstraint \n\n Indicates a constraint that a type has a member with the given signature \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#EnumConstraintTarget","title":"FSharpGenericParameterConstraint.EnumConstraintTarget","content":"FSharpGenericParameterConstraint.EnumConstraintTarget \nEnumConstraintTarget \n\n Gets further information about an enumeration constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsDefaultsToConstraint","title":"FSharpGenericParameterConstraint.IsDefaultsToConstraint","content":"FSharpGenericParameterConstraint.IsDefaultsToConstraint \nIsDefaultsToConstraint \n\n Indicates a default value for an inference type variable should it be neither generalized nor solved \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#MemberConstraintData","title":"FSharpGenericParameterConstraint.MemberConstraintData","content":"FSharpGenericParameterConstraint.MemberConstraintData \nMemberConstraintData \n\n Gets further information about a member constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsDelegateConstraint","title":"FSharpGenericParameterConstraint.IsDelegateConstraint","content":"FSharpGenericParameterConstraint.IsDelegateConstraint \nIsDelegateConstraint \n\n Indicates a constraint that a type is a delegate from the given tuple of args to the given return type \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#DefaultsToConstraintData","title":"FSharpGenericParameterConstraint.DefaultsToConstraintData","content":"FSharpGenericParameterConstraint.DefaultsToConstraintData \nDefaultsToConstraintData \n\n Gets further information about a defaults-to constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsNonNullableValueTypeConstraint","title":"FSharpGenericParameterConstraint.IsNonNullableValueTypeConstraint","content":"FSharpGenericParameterConstraint.IsNonNullableValueTypeConstraint \nIsNonNullableValueTypeConstraint \n\n Indicates a constraint that a type is a non-Nullable value type \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsComparisonConstraint","title":"FSharpGenericParameterConstraint.IsComparisonConstraint","content":"FSharpGenericParameterConstraint.IsComparisonConstraint \nIsComparisonConstraint \n\n Indicates a constraint that a type supports F# generic comparison\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsUnmanagedConstraint","title":"FSharpGenericParameterConstraint.IsUnmanagedConstraint","content":"FSharpGenericParameterConstraint.IsUnmanagedConstraint \nIsUnmanagedConstraint \n\n Indicates a constraint that a type is an unmanaged type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#DelegateConstraintData","title":"FSharpGenericParameterConstraint.DelegateConstraintData","content":"FSharpGenericParameterConstraint.DelegateConstraintData \nDelegateConstraintData \n\n Gets further information about a delegate constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#CoercesToTarget","title":"FSharpGenericParameterConstraint.CoercesToTarget","content":"FSharpGenericParameterConstraint.CoercesToTarget \nCoercesToTarget \n\n Gets further information about a coerces-to constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsSupportsNullConstraint","title":"FSharpGenericParameterConstraint.IsSupportsNullConstraint","content":"FSharpGenericParameterConstraint.IsSupportsNullConstraint \nIsSupportsNullConstraint \n\n Indicates a constraint that a type has a \u0027null\u0027 value \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsCoercesToConstraint","title":"FSharpGenericParameterConstraint.IsCoercesToConstraint","content":"FSharpGenericParameterConstraint.IsCoercesToConstraint \nIsCoercesToConstraint \n\n Indicates a constraint that a type is a subtype of the given type \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsReferenceTypeConstraint","title":"FSharpGenericParameterConstraint.IsReferenceTypeConstraint","content":"FSharpGenericParameterConstraint.IsReferenceTypeConstraint \nIsReferenceTypeConstraint \n\n Indicates a constraint that a type is a reference type \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsEnumConstraint","title":"FSharpGenericParameterConstraint.IsEnumConstraint","content":"FSharpGenericParameterConstraint.IsEnumConstraint \nIsEnumConstraint \n\n Indicates a constraint that a type is an enum with the given underlying \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsEqualityConstraint","title":"FSharpGenericParameterConstraint.IsEqualityConstraint","content":"FSharpGenericParameterConstraint.IsEqualityConstraint \nIsEqualityConstraint \n\n Indicates a constraint that a type supports F# generic equality\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#IsRequiresDefaultConstructorConstraint","title":"FSharpGenericParameterConstraint.IsRequiresDefaultConstructorConstraint","content":"FSharpGenericParameterConstraint.IsRequiresDefaultConstructorConstraint \nIsRequiresDefaultConstructorConstraint \n\n Indicates a constraint that a type has a parameterless constructor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterconstraint.html#SimpleChoices","title":"FSharpGenericParameterConstraint.SimpleChoices","content":"FSharpGenericParameterConstraint.SimpleChoices \nSimpleChoices \n\n Gets further information about a choice constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdefaultstoconstraint.html","title":"FSharpGenericParameterDefaultsToConstraint","content":"FSharpGenericParameterDefaultsToConstraint \n\n Represents further information about a \u0027defaults to\u0027 constraint on a generic type parameter\n \nFSharpGenericParameterDefaultsToConstraint.DefaultsToPriority \nDefaultsToPriority \nFSharpGenericParameterDefaultsToConstraint.DefaultsToTarget \nDefaultsToTarget"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdefaultstoconstraint.html#DefaultsToPriority","title":"FSharpGenericParameterDefaultsToConstraint.DefaultsToPriority","content":"FSharpGenericParameterDefaultsToConstraint.DefaultsToPriority \nDefaultsToPriority \n\n Get the priority off the \u0027defaults to\u0027 constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdefaultstoconstraint.html#DefaultsToTarget","title":"FSharpGenericParameterDefaultsToConstraint.DefaultsToTarget","content":"FSharpGenericParameterDefaultsToConstraint.DefaultsToTarget \nDefaultsToTarget \n\n Get the default type associated with the \u0027defaults to\u0027 constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdelegateconstraint.html","title":"FSharpGenericParameterDelegateConstraint","content":"FSharpGenericParameterDelegateConstraint \n\n Represents further information about a delegate constraint on a generic type parameter\n \nFSharpGenericParameterDelegateConstraint.DelegateTupledArgumentType \nDelegateTupledArgumentType \nFSharpGenericParameterDelegateConstraint.DelegateReturnType \nDelegateReturnType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdelegateconstraint.html#DelegateTupledArgumentType","title":"FSharpGenericParameterDelegateConstraint.DelegateTupledArgumentType","content":"FSharpGenericParameterDelegateConstraint.DelegateTupledArgumentType \nDelegateTupledArgumentType \n\n Get the tupled argument type required by the constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparameterdelegateconstraint.html#DelegateReturnType","title":"FSharpGenericParameterDelegateConstraint.DelegateReturnType","content":"FSharpGenericParameterDelegateConstraint.DelegateReturnType \nDelegateReturnType \n\n Get the return type required by the constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html","title":"FSharpGenericParameterMemberConstraint","content":"FSharpGenericParameterMemberConstraint \n\n Represents further information about a member constraint on a generic type parameter\n \nFSharpGenericParameterMemberConstraint.MemberName \nMemberName \nFSharpGenericParameterMemberConstraint.MemberSources \nMemberSources \nFSharpGenericParameterMemberConstraint.MemberReturnType \nMemberReturnType \nFSharpGenericParameterMemberConstraint.MemberIsStatic \nMemberIsStatic \nFSharpGenericParameterMemberConstraint.MemberArgumentTypes \nMemberArgumentTypes"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html#MemberName","title":"FSharpGenericParameterMemberConstraint.MemberName","content":"FSharpGenericParameterMemberConstraint.MemberName \nMemberName \n\n Get the name of the method required by the constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html#MemberSources","title":"FSharpGenericParameterMemberConstraint.MemberSources","content":"FSharpGenericParameterMemberConstraint.MemberSources \nMemberSources \n\n Get the types that may be used to satisfy the constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html#MemberReturnType","title":"FSharpGenericParameterMemberConstraint.MemberReturnType","content":"FSharpGenericParameterMemberConstraint.MemberReturnType \nMemberReturnType \n\n Get the return type of the method required by the constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html#MemberIsStatic","title":"FSharpGenericParameterMemberConstraint.MemberIsStatic","content":"FSharpGenericParameterMemberConstraint.MemberIsStatic \nMemberIsStatic \n\n Indicates if the the method required by the constraint must be static\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpgenericparametermemberconstraint.html#MemberArgumentTypes","title":"FSharpGenericParameterMemberConstraint.MemberArgumentTypes","content":"FSharpGenericParameterMemberConstraint.MemberArgumentTypes \nMemberArgumentTypes \n\n Get the argument types of the method required by the constraint\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html","title":"FSharpImplementationFileContents","content":"FSharpImplementationFileContents \n\n Represents the definitional contents of a single file or fragment in an assembly, as seen by the F# language\n \nFSharpImplementationFileContents.HasExplicitEntryPoint \nHasExplicitEntryPoint \nFSharpImplementationFileContents.Declarations \nDeclarations \nFSharpImplementationFileContents.QualifiedName \nQualifiedName \nFSharpImplementationFileContents.FileName \nFileName \nFSharpImplementationFileContents.IsScript \nIsScript"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html#HasExplicitEntryPoint","title":"FSharpImplementationFileContents.HasExplicitEntryPoint","content":"FSharpImplementationFileContents.HasExplicitEntryPoint \nHasExplicitEntryPoint \n\n Indicates if the implementation file has an explicit entry point\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html#Declarations","title":"FSharpImplementationFileContents.Declarations","content":"FSharpImplementationFileContents.Declarations \nDeclarations \n\n Get the declarations that make up this implementation file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html#QualifiedName","title":"FSharpImplementationFileContents.QualifiedName","content":"FSharpImplementationFileContents.QualifiedName \nQualifiedName \n\n The qualified name acts to fully-qualify module specifications and implementations\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html#FileName","title":"FSharpImplementationFileContents.FileName","content":"FSharpImplementationFileContents.FileName \nFileName \n\n Get the system path of the implementation file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfilecontents.html#IsScript","title":"FSharpImplementationFileContents.IsScript","content":"FSharpImplementationFileContents.IsScript \nIsScript \n\n Indicates if the implementation file is a script\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html","title":"FSharpImplementationFileDeclaration","content":"FSharpImplementationFileDeclaration \n\n Represents a declaration in an implementation file, as seen by the F# language\n \nFSharpImplementationFileDeclaration.Entity \nEntity \nFSharpImplementationFileDeclaration.MemberOrFunctionOrValue \nMemberOrFunctionOrValue \nFSharpImplementationFileDeclaration.InitAction \nInitAction"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html#Entity","title":"FSharpImplementationFileDeclaration.Entity","content":"FSharpImplementationFileDeclaration.Entity \nEntity \n\n Represents the declaration of a type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html#MemberOrFunctionOrValue","title":"FSharpImplementationFileDeclaration.MemberOrFunctionOrValue","content":"FSharpImplementationFileDeclaration.MemberOrFunctionOrValue \nMemberOrFunctionOrValue \n\n Represents the declaration of a member, function or value, including the parameters and body of the member\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpimplementationfiledeclaration.html#InitAction","title":"FSharpImplementationFileDeclaration.InitAction","content":"FSharpImplementationFileDeclaration.InitAction \nInitAction \n\n Represents the declaration of a static initialization action\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html","title":"FSharpInlineAnnotation","content":"FSharpInlineAnnotation \n \nFSharpInlineAnnotation.AlwaysInline \nAlwaysInline \nFSharpInlineAnnotation.OptionalInline \nOptionalInline \nFSharpInlineAnnotation.NeverInline \nNeverInline \nFSharpInlineAnnotation.AggressiveInline \nAggressiveInline"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#AlwaysInline","title":"FSharpInlineAnnotation.AlwaysInline","content":"FSharpInlineAnnotation.AlwaysInline \nAlwaysInline \n\n Indicates the value is always inlined in statically compiled code\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#OptionalInline","title":"FSharpInlineAnnotation.OptionalInline","content":"FSharpInlineAnnotation.OptionalInline \nOptionalInline \n\n Indicates the value is optionally inlined \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#NeverInline","title":"FSharpInlineAnnotation.NeverInline","content":"FSharpInlineAnnotation.NeverInline \nNeverInline \n\n Indicates the value is never inlined \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpinlineannotation.html#AggressiveInline","title":"FSharpInlineAnnotation.AggressiveInline","content":"FSharpInlineAnnotation.AggressiveInline \nAggressiveInline \n\n Indicates the value is aggressively inlined by the .NET runtime\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html","title":"FSharpMemberOrFunctionOrValue","content":"FSharpMemberOrFunctionOrValue \n\n A subtype of F# symbol that represents an F# method, property, event, function or value, including extension members.\n \nFSharpMemberOrFunctionOrValue.FormatLayout \nFormatLayout \nFSharpMemberOrFunctionOrValue.GetOverloads \nGetOverloads \nFSharpMemberOrFunctionOrValue.GetWitnessPassingInfo \nGetWitnessPassingInfo \nFSharpMemberOrFunctionOrValue.TryGetFullCompiledOperatorNameIdents \nTryGetFullCompiledOperatorNameIdents \nFSharpMemberOrFunctionOrValue.TryGetFullDisplayName \nTryGetFullDisplayName \nFSharpMemberOrFunctionOrValue.EventIsStandard \nEventIsStandard \nFSharpMemberOrFunctionOrValue.GetterMethod \nGetterMethod \nFSharpMemberOrFunctionOrValue.IsValue \nIsValue \nFSharpMemberOrFunctionOrValue.EventDelegateType \nEventDelegateType \nFSharpMemberOrFunctionOrValue.IsMember \nIsMember \nFSharpMemberOrFunctionOrValue.CompiledName \nCompiledName \nFSharpMemberOrFunctionOrValue.HasGetterMethod \nHasGetterMethod \nFSharpMemberOrFunctionOrValue.IsProperty \nIsProperty \nFSharpMemberOrFunctionOrValue.IsMutable \nIsMutable \nFSharpMemberOrFunctionOrValue.IsBaseValue \nIsBaseValue \nFSharpMemberOrFunctionOrValue.IsExplicitInterfaceImplementation \nIsExplicitInterfaceImplementation \nFSharpMemberOrFunctionOrValue.IsExtensionMember \nIsExtensionMember \nFSharpMemberOrFunctionOrValue.FullTypeSafe \nFullTypeSafe \nFSharpMemberOrFunctionOrValue.IsDispatchSlot \nIsDispatchSlot \nFSharpMemberOrFunctionOrValue.HasSetterMethod \nHasSetterMethod \nFSharpMemberOrFunctionOrValue.ReturnParameter \nReturnParameter \nFSharpMemberOrFunctionOrValue.IsEventRemoveMethod \nIsEventRemoveMethod \nFSharpMemberOrFunctionOrValue.LogicalName \nLogicalName \nFSharpMemberOrFunctionOrValue.XmlDocSig \nXmlDocSig \nFSharpMemberOrFunctionOrValue.LiteralValue \nLiteralValue \nFSharpMemberOrFunctionOrValue.IsEvent \nIsEvent \nFSharpMemberOrFunctionOrValue.DeclaringEntity \nDeclaringEntity \nFSharpMemberOrFunctionOrValue.SetterMethod \nSetterMethod \nFSharpMemberOrFunctionOrValue.EventRemoveMethod \nEventRemoveMethod \nFSharpMemberOrFunctionOrValue.DeclarationLocation \nDeclarationLocation \nFSharpMemberOrFunctionOrValue.IsActivePattern \nIsActivePattern \nFSharpMemberOrFunctionOrValue.IsOverrideOrExplicitInterfaceImplementation \nIsOverrideOrExplicitInterfaceImplementation \nFSharpMemberOrFunctionOrValue.IsImplicitConstructor \nIsImplicitConstructor \nFSharpMemberOrFunctionOrValue.IsPropertySetterMethod \nIsPropertySetterMethod \nFSharpMemberOrFunctionOrValue.IsMemberThisValue \nIsMemberThisValue \nFSharpMemberOrFunctionOrValue.ApparentEnclosingEntity \nApparentEnclosingEntity \nFSharpMemberOrFunctionOrValue.FullType \nFullType \nFSharpMemberOrFunctionOrValue.GenericParameters \nGenericParameters \nFSharpMemberOrFunctionOrValue.IsConstructorThisValue \nIsConstructorThisValue \nFSharpMemberOrFunctionOrValue.EventAddMethod \nEventAddMethod \nFSharpMemberOrFunctionOrValue.IsPropertyGetterMethod \nIsPropertyGetterMethod \nFSharpMemberOrFunctionOrValue.IsModuleValueOrMember \nIsModuleValueOrMember \nFSharpMemberOrFunctionOrValue.IsTypeFunction \nIsTypeFunction \nFSharpMemberOrFunctionOrValue.EventForFSharpProperty \nEventForFSharpProperty \nFSharpMemberOrFunctionOrValue.IsInstanceMember \nIsInstanceMember \nFSharpMemberOrFunctionOrValue.ImplementedAbstractSignatures \nImplementedAbstractSignatures \nFSharpMemberOrFunctionOrValue.DisplayName \nDisplayName \nFSharpMemberOrFunctionOrValue.IsInstanceMemberInCompiledCode \nIsInstanceMemberInCompiledCode \nFSharpMemberOrFunctionOrValue.IsValCompiledAsMethod \nIsValCompiledAsMethod \nFSharpMemberOrFunctionOrValue.IsEventAddMethod \nIsEventAddMethod \nFSharpMemberOrFunctionOrValue.InlineAnnotation \nInlineAnnotation \nFSharpMemberOrFunctionOrValue.CurriedParameterGroups \nCurriedParameterGroups \nFSharpMemberOrFunctionOrValue.IsFunction \nIsFunction \nFSharpMemberOrFunctionOrValue.IsCompilerGenerated \nIsCompilerGenerated \nFSharpMemberOrFunctionOrValue.XmlDoc \nXmlDoc \nFSharpMemberOrFunctionOrValue.IsUnresolved \nIsUnresolved \nFSharpMemberOrFunctionOrValue.IsConstructor \nIsConstructor"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#FormatLayout","title":"FSharpMemberOrFunctionOrValue.FormatLayout","content":"FSharpMemberOrFunctionOrValue.FormatLayout \nFormatLayout \n\n Format the type using the rules of the given display context\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#GetOverloads","title":"FSharpMemberOrFunctionOrValue.GetOverloads","content":"FSharpMemberOrFunctionOrValue.GetOverloads \nGetOverloads \nGets the overloads for the current method."},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#GetWitnessPassingInfo","title":"FSharpMemberOrFunctionOrValue.GetWitnessPassingInfo","content":"FSharpMemberOrFunctionOrValue.GetWitnessPassingInfo \nGetWitnessPassingInfo \n\n Check if this method has an entrpoint that accepts witness arguments and if so return\n the name of that entrypoint and information about the additional witness arguments\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#TryGetFullCompiledOperatorNameIdents","title":"FSharpMemberOrFunctionOrValue.TryGetFullCompiledOperatorNameIdents","content":"FSharpMemberOrFunctionOrValue.TryGetFullCompiledOperatorNameIdents \nTryGetFullCompiledOperatorNameIdents \n\n Full operator compiled name.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#TryGetFullDisplayName","title":"FSharpMemberOrFunctionOrValue.TryGetFullDisplayName","content":"FSharpMemberOrFunctionOrValue.TryGetFullDisplayName \nTryGetFullDisplayName \n\n Full name with last part replaced with display name.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#EventIsStandard","title":"FSharpMemberOrFunctionOrValue.EventIsStandard","content":"FSharpMemberOrFunctionOrValue.EventIsStandard \nEventIsStandard \n\n Indicate if an event can be considered to be a property for the F# type system of type IEvent or IDelegateEvent. \n In this case ReturnParameter will have a type corresponding to the property type.  For \n non-standard events, ReturnParameter will have a type corresponding to the delegate type.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#GetterMethod","title":"FSharpMemberOrFunctionOrValue.GetterMethod","content":"FSharpMemberOrFunctionOrValue.GetterMethod \nGetterMethod \n\n Get an associated getter method of the property\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsValue","title":"FSharpMemberOrFunctionOrValue.IsValue","content":"FSharpMemberOrFunctionOrValue.IsValue \nIsValue \n\n Indicated if this is a value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#EventDelegateType","title":"FSharpMemberOrFunctionOrValue.EventDelegateType","content":"FSharpMemberOrFunctionOrValue.EventDelegateType \nEventDelegateType \n\n Get an associated delegate type of an event\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsMember","title":"FSharpMemberOrFunctionOrValue.IsMember","content":"FSharpMemberOrFunctionOrValue.IsMember \nIsMember \n\n Indicates if this is a member, including extension members?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#CompiledName","title":"FSharpMemberOrFunctionOrValue.CompiledName","content":"FSharpMemberOrFunctionOrValue.CompiledName \nCompiledName \n\n Get the member name in compiled code\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#HasGetterMethod","title":"FSharpMemberOrFunctionOrValue.HasGetterMethod","content":"FSharpMemberOrFunctionOrValue.HasGetterMethod \nHasGetterMethod \n\n Indicates if this is a property and there exists an associated getter method\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsProperty","title":"FSharpMemberOrFunctionOrValue.IsProperty","content":"FSharpMemberOrFunctionOrValue.IsProperty \nIsProperty \n\n Indicates if this is a property member\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsMutable","title":"FSharpMemberOrFunctionOrValue.IsMutable","content":"FSharpMemberOrFunctionOrValue.IsMutable \nIsMutable \n\n Indicates if this is a mutable value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsBaseValue","title":"FSharpMemberOrFunctionOrValue.IsBaseValue","content":"FSharpMemberOrFunctionOrValue.IsBaseValue \nIsBaseValue \n\n Indicates if this is \u0022base\u0022 in \u0022base.M(...)\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsExplicitInterfaceImplementation","title":"FSharpMemberOrFunctionOrValue.IsExplicitInterfaceImplementation","content":"FSharpMemberOrFunctionOrValue.IsExplicitInterfaceImplementation \nIsExplicitInterfaceImplementation \n\n Indicates if this is an explicit implementation of an interface member\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsExtensionMember","title":"FSharpMemberOrFunctionOrValue.IsExtensionMember","content":"FSharpMemberOrFunctionOrValue.IsExtensionMember \nIsExtensionMember \n\n Indicates if this is an extension member?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#FullTypeSafe","title":"FSharpMemberOrFunctionOrValue.FullTypeSafe","content":"FSharpMemberOrFunctionOrValue.FullTypeSafe \nFullTypeSafe \n\n Safe version of \u0060FullType\u0060.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsDispatchSlot","title":"FSharpMemberOrFunctionOrValue.IsDispatchSlot","content":"FSharpMemberOrFunctionOrValue.IsDispatchSlot \nIsDispatchSlot \n\n Indicates if this is an abstract member?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#HasSetterMethod","title":"FSharpMemberOrFunctionOrValue.HasSetterMethod","content":"FSharpMemberOrFunctionOrValue.HasSetterMethod \nHasSetterMethod \n\n Indicates if this is a property and there exists an associated setter method\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#ReturnParameter","title":"FSharpMemberOrFunctionOrValue.ReturnParameter","content":"FSharpMemberOrFunctionOrValue.ReturnParameter \nReturnParameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsEventRemoveMethod","title":"FSharpMemberOrFunctionOrValue.IsEventRemoveMethod","content":"FSharpMemberOrFunctionOrValue.IsEventRemoveMethod \nIsEventRemoveMethod \n\n Indicates if this is a remove method for an event\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#LogicalName","title":"FSharpMemberOrFunctionOrValue.LogicalName","content":"FSharpMemberOrFunctionOrValue.LogicalName \nLogicalName \n\n Get the logical name of the member\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#XmlDocSig","title":"FSharpMemberOrFunctionOrValue.XmlDocSig","content":"FSharpMemberOrFunctionOrValue.XmlDocSig \nXmlDocSig \n\n XML documentation signature for the value, used for .xml file lookup for compiled code\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#LiteralValue","title":"FSharpMemberOrFunctionOrValue.LiteralValue","content":"FSharpMemberOrFunctionOrValue.LiteralValue \nLiteralValue \n\n Indicates if this is a [\u003CLiteral\u003E] value, and if so what value? (may be null)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsEvent","title":"FSharpMemberOrFunctionOrValue.IsEvent","content":"FSharpMemberOrFunctionOrValue.IsEvent \nIsEvent \n\n Indicates if this is an event member\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#DeclaringEntity","title":"FSharpMemberOrFunctionOrValue.DeclaringEntity","content":"FSharpMemberOrFunctionOrValue.DeclaringEntity \nDeclaringEntity \n\n Get the enclosing entity for the definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#SetterMethod","title":"FSharpMemberOrFunctionOrValue.SetterMethod","content":"FSharpMemberOrFunctionOrValue.SetterMethod \nSetterMethod \n\n Get an associated setter method of the property\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#EventRemoveMethod","title":"FSharpMemberOrFunctionOrValue.EventRemoveMethod","content":"FSharpMemberOrFunctionOrValue.EventRemoveMethod \nEventRemoveMethod \n\n Get an associated remove method of an event\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#DeclarationLocation","title":"FSharpMemberOrFunctionOrValue.DeclarationLocation","content":"FSharpMemberOrFunctionOrValue.DeclarationLocation \nDeclarationLocation \n\n Get the declaration location of the member, function or value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsActivePattern","title":"FSharpMemberOrFunctionOrValue.IsActivePattern","content":"FSharpMemberOrFunctionOrValue.IsActivePattern \nIsActivePattern \n\n Indicates if this value or member is an F# active pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsOverrideOrExplicitInterfaceImplementation","title":"FSharpMemberOrFunctionOrValue.IsOverrideOrExplicitInterfaceImplementation","content":"FSharpMemberOrFunctionOrValue.IsOverrideOrExplicitInterfaceImplementation \nIsOverrideOrExplicitInterfaceImplementation \n\n Indicates if this is an \u0027override\u0027, \u0027default\u0027 or an explicit implementation of an interface member\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsImplicitConstructor","title":"FSharpMemberOrFunctionOrValue.IsImplicitConstructor","content":"FSharpMemberOrFunctionOrValue.IsImplicitConstructor \nIsImplicitConstructor \n\n Indicates if this is an implicit constructor?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsPropertySetterMethod","title":"FSharpMemberOrFunctionOrValue.IsPropertySetterMethod","content":"FSharpMemberOrFunctionOrValue.IsPropertySetterMethod \nIsPropertySetterMethod \n\n Indicates if this is a setter method for a property, or a use of a property in setter mode\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsMemberThisValue","title":"FSharpMemberOrFunctionOrValue.IsMemberThisValue","content":"FSharpMemberOrFunctionOrValue.IsMemberThisValue \nIsMemberThisValue \n\n Indicates if this is the \u0022x\u0022 in \u0022member x.M = ...\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#ApparentEnclosingEntity","title":"FSharpMemberOrFunctionOrValue.ApparentEnclosingEntity","content":"FSharpMemberOrFunctionOrValue.ApparentEnclosingEntity \nApparentEnclosingEntity \n\n Get the logical enclosing entity, which for an extension member is type being extended\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#FullType","title":"FSharpMemberOrFunctionOrValue.FullType","content":"FSharpMemberOrFunctionOrValue.FullType \nFullType \n\n Get the full type of the member, function or value when used as a first class value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#GenericParameters","title":"FSharpMemberOrFunctionOrValue.GenericParameters","content":"FSharpMemberOrFunctionOrValue.GenericParameters \nGenericParameters \n\n Get the typars of the member, function or value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsConstructorThisValue","title":"FSharpMemberOrFunctionOrValue.IsConstructorThisValue","content":"FSharpMemberOrFunctionOrValue.IsConstructorThisValue \nIsConstructorThisValue \n\n Indicates if this is the \u0022x\u0022 in \u0022type C() as x = ...\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#EventAddMethod","title":"FSharpMemberOrFunctionOrValue.EventAddMethod","content":"FSharpMemberOrFunctionOrValue.EventAddMethod \nEventAddMethod \n\n Get an associated add method of an event\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsPropertyGetterMethod","title":"FSharpMemberOrFunctionOrValue.IsPropertyGetterMethod","content":"FSharpMemberOrFunctionOrValue.IsPropertyGetterMethod \nIsPropertyGetterMethod \n\n Indicates if this is a getter method for a property, or a use of a property in getter mode\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsModuleValueOrMember","title":"FSharpMemberOrFunctionOrValue.IsModuleValueOrMember","content":"FSharpMemberOrFunctionOrValue.IsModuleValueOrMember \nIsModuleValueOrMember \n\n Indicates if this is a module or member value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsTypeFunction","title":"FSharpMemberOrFunctionOrValue.IsTypeFunction","content":"FSharpMemberOrFunctionOrValue.IsTypeFunction \nIsTypeFunction \n\n Indicates if this is an F# type function\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#EventForFSharpProperty","title":"FSharpMemberOrFunctionOrValue.EventForFSharpProperty","content":"FSharpMemberOrFunctionOrValue.EventForFSharpProperty \nEventForFSharpProperty \n\n Gets the event symbol implied by the use of a property,\n for the case where the property is actually an F#-declared CLIEvent.\n \n Uses of F#-declared events are considered to be properties as far as the language specification \n and this API are concerned.  \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsInstanceMember","title":"FSharpMemberOrFunctionOrValue.IsInstanceMember","content":"FSharpMemberOrFunctionOrValue.IsInstanceMember \nIsInstanceMember \n\n Indicates if this is an instance member, when seen from F#?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#ImplementedAbstractSignatures","title":"FSharpMemberOrFunctionOrValue.ImplementedAbstractSignatures","content":"FSharpMemberOrFunctionOrValue.ImplementedAbstractSignatures \nImplementedAbstractSignatures \n\n Gets the list of the abstract slot signatures implemented by the member\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#DisplayName","title":"FSharpMemberOrFunctionOrValue.DisplayName","content":"FSharpMemberOrFunctionOrValue.DisplayName \nDisplayName \n\n Get the name as presented in F# error messages and documentation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsInstanceMemberInCompiledCode","title":"FSharpMemberOrFunctionOrValue.IsInstanceMemberInCompiledCode","content":"FSharpMemberOrFunctionOrValue.IsInstanceMemberInCompiledCode \nIsInstanceMemberInCompiledCode \n\n Indicates if this is an instance member in compiled code. \n\n Explanatory note: some members such as IsNone and IsSome on types with UseNullAsTrueValue appear \n as instance members in F# code but are compiled as static members.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsValCompiledAsMethod","title":"FSharpMemberOrFunctionOrValue.IsValCompiledAsMethod","content":"FSharpMemberOrFunctionOrValue.IsValCompiledAsMethod \nIsValCompiledAsMethod \n\n Indicated if this is a value compiled to a method\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsEventAddMethod","title":"FSharpMemberOrFunctionOrValue.IsEventAddMethod","content":"FSharpMemberOrFunctionOrValue.IsEventAddMethod \nIsEventAddMethod \n\n Indicates if this is an add method for an event\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#InlineAnnotation","title":"FSharpMemberOrFunctionOrValue.InlineAnnotation","content":"FSharpMemberOrFunctionOrValue.InlineAnnotation \nInlineAnnotation \n\n Get a result indicating if this is a must-inline value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#CurriedParameterGroups","title":"FSharpMemberOrFunctionOrValue.CurriedParameterGroups","content":"FSharpMemberOrFunctionOrValue.CurriedParameterGroups \nCurriedParameterGroups \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsFunction","title":"FSharpMemberOrFunctionOrValue.IsFunction","content":"FSharpMemberOrFunctionOrValue.IsFunction \nIsFunction \n\n Indicates if this is a function\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsCompilerGenerated","title":"FSharpMemberOrFunctionOrValue.IsCompilerGenerated","content":"FSharpMemberOrFunctionOrValue.IsCompilerGenerated \nIsCompilerGenerated \n\n Indicates if this is a compiler generated value\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#XmlDoc","title":"FSharpMemberOrFunctionOrValue.XmlDoc","content":"FSharpMemberOrFunctionOrValue.XmlDoc \nXmlDoc \n\n Get the XML documentation for the entity\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsUnresolved","title":"FSharpMemberOrFunctionOrValue.IsUnresolved","content":"FSharpMemberOrFunctionOrValue.IsUnresolved \nIsUnresolved \n\n Indicates if the member, function or value is in an unresolved assembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpmemberorfunctionorvalue.html#IsConstructor","title":"FSharpMemberOrFunctionOrValue.IsConstructor","content":"FSharpMemberOrFunctionOrValue.IsConstructor \nIsConstructor \n\n Indicates if this is a constructor.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpobjectexproverride.html","title":"FSharpObjectExprOverride","content":"FSharpObjectExprOverride \n\n Represents a checked method in an object expression, as seen by the F# language.  \n \nFSharpObjectExprOverride.GenericParameters \nGenericParameters \nFSharpObjectExprOverride.Signature \nSignature \nFSharpObjectExprOverride.Body \nBody \nFSharpObjectExprOverride.CurriedParameterGroups \nCurriedParameterGroups"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpobjectexproverride.html#GenericParameters","title":"FSharpObjectExprOverride.GenericParameters","content":"FSharpObjectExprOverride.GenericParameters \nGenericParameters \n\n The generic parameters of the method\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpobjectexproverride.html#Signature","title":"FSharpObjectExprOverride.Signature","content":"FSharpObjectExprOverride.Signature \nSignature \n\n The signature of the implemented abstract slot\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpobjectexproverride.html#Body","title":"FSharpObjectExprOverride.Body","content":"FSharpObjectExprOverride.Body \nBody \n\n The expression that forms the body of the method\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpobjectexproverride.html#CurriedParameterGroups","title":"FSharpObjectExprOverride.CurriedParameterGroups","content":"FSharpObjectExprOverride.CurriedParameterGroups \nCurriedParameterGroups \n\n The parameters of the method\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html","title":"FSharpOpenDeclaration","content":"FSharpOpenDeclaration \n\n Represents open declaration in F# code.\n \nFSharpOpenDeclaration.AppliedScope \nAppliedScope \nFSharpOpenDeclaration.Target \nTarget \nFSharpOpenDeclaration.IsOwnNamespace \nIsOwnNamespace \nFSharpOpenDeclaration.LongId \nLongId \nFSharpOpenDeclaration.Range \nRange \nFSharpOpenDeclaration.Modules \nModules \nFSharpOpenDeclaration.Types \nTypes"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#AppliedScope","title":"FSharpOpenDeclaration.AppliedScope","content":"FSharpOpenDeclaration.AppliedScope \nAppliedScope \n\n Scope in which open declaration is visible.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#Target","title":"FSharpOpenDeclaration.Target","content":"FSharpOpenDeclaration.Target \nTarget \n\n The syntactic target of the declaration\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#IsOwnNamespace","title":"FSharpOpenDeclaration.IsOwnNamespace","content":"FSharpOpenDeclaration.IsOwnNamespace \nIsOwnNamespace \n\n If it\u0027s \u0060namespace Xxx.Yyy\u0060 declaration.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#LongId","title":"FSharpOpenDeclaration.LongId","content":"FSharpOpenDeclaration.LongId \nLongId \n\n The syntactic target of the declaration\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#Range","title":"FSharpOpenDeclaration.Range","content":"FSharpOpenDeclaration.Range \nRange \n\n Range of the open declaration.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#Modules","title":"FSharpOpenDeclaration.Modules","content":"FSharpOpenDeclaration.Modules \nModules \n\n Modules or namespaces which is opened with this declaration.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpopendeclaration.html#Types","title":"FSharpOpenDeclaration.Types","content":"FSharpOpenDeclaration.Types \nTypes \n\n Types whose static members and nested types is opened with this declaration.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html","title":"FSharpParameter","content":"FSharpParameter \n\n A subtype of FSharpSymbol that represents a parameter \n \nFSharpParameter.IsOutArg \nIsOutArg \nFSharpParameter.IsOptionalArg \nIsOptionalArg \nFSharpParameter.Type \nType \nFSharpParameter.DeclarationLocation \nDeclarationLocation \nFSharpParameter.IsInArg \nIsInArg \nFSharpParameter.IsParamArrayArg \nIsParamArrayArg \nFSharpParameter.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#IsOutArg","title":"FSharpParameter.IsOutArg","content":"FSharpParameter.IsOutArg \nIsOutArg \n\n Indicate this is an out argument\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#IsOptionalArg","title":"FSharpParameter.IsOptionalArg","content":"FSharpParameter.IsOptionalArg \nIsOptionalArg \n\n Indicate this is an optional argument\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#Type","title":"FSharpParameter.Type","content":"FSharpParameter.Type \nType \n\n The declared or inferred type of the parameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#DeclarationLocation","title":"FSharpParameter.DeclarationLocation","content":"FSharpParameter.DeclarationLocation \nDeclarationLocation \n\n The declaration location of the parameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#IsInArg","title":"FSharpParameter.IsInArg","content":"FSharpParameter.IsInArg \nIsInArg \n\n Indicate this is an in argument\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#IsParamArrayArg","title":"FSharpParameter.IsParamArrayArg","content":"FSharpParameter.IsParamArrayArg \nIsParamArrayArg \n\n Indicate this is a param array argument\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpparameter.html#Name","title":"FSharpParameter.Name","content":"FSharpParameter.Name \nName \n\n The optional name of the parameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html","title":"FSharpStaticParameter","content":"FSharpStaticParameter \n\n A subtype of FSharpSymbol that represents a static parameter to an F# type provider\n \nFSharpStaticParameter.DefaultValue \nDefaultValue \nFSharpStaticParameter.DeclarationLocation \nDeclarationLocation \nFSharpStaticParameter.IsOptional \nIsOptional \nFSharpStaticParameter.Range \nRange \nFSharpStaticParameter.HasDefaultValue \nHasDefaultValue \nFSharpStaticParameter.Kind \nKind \nFSharpStaticParameter.Name \nName"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#DefaultValue","title":"FSharpStaticParameter.DefaultValue","content":"FSharpStaticParameter.DefaultValue \nDefaultValue \n\n Get the default value for the static parameter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#DeclarationLocation","title":"FSharpStaticParameter.DeclarationLocation","content":"FSharpStaticParameter.DeclarationLocation \nDeclarationLocation \n\n Get the declaration location of the static parameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#IsOptional","title":"FSharpStaticParameter.IsOptional","content":"FSharpStaticParameter.IsOptional \nIsOptional \n\n Indicates if the static parameter is optional\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#Range","title":"FSharpStaticParameter.Range","content":"FSharpStaticParameter.Range \nRange \n\n Get the range of the construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#HasDefaultValue","title":"FSharpStaticParameter.HasDefaultValue","content":"FSharpStaticParameter.HasDefaultValue \nHasDefaultValue \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#Kind","title":"FSharpStaticParameter.Kind","content":"FSharpStaticParameter.Kind \nKind \n\n Get the kind of the static parameter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpstaticparameter.html#Name","title":"FSharpStaticParameter.Name","content":"FSharpStaticParameter.Name \nName \n\n Get the name of the static parameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html","title":"FSharpSymbol","content":"FSharpSymbol \n\n Represents a symbol in checked F# source code or a compiled .NET component.\n\n The subtype of the symbol may reveal further information and can be one of FSharpEntity, FSharpUnionCase\n FSharpField, FSharpGenericParameter, FSharpStaticParameter, FSharpMemberOrFunctionOrValue, FSharpParameter,\n or FSharpActivePatternCase.\n \nFSharpSymbol.GetEffectivelySameAsHash \nGetEffectivelySameAsHash \nFSharpSymbol.HasAttribute \nHasAttribute \nFSharpSymbol.IsAccessible \nIsAccessible \nFSharpSymbol.IsEffectivelySameAs \nIsEffectivelySameAs \nFSharpSymbol.TryGetAttribute \nTryGetAttribute \nFSharpSymbol.Assembly \nAssembly \nFSharpSymbol.DisplayNameCore \nDisplayNameCore \nFSharpSymbol.Accessibility \nAccessibility \nFSharpSymbol.FullName \nFullName \nFSharpSymbol.Attributes \nAttributes \nFSharpSymbol.DeclarationLocation \nDeclarationLocation \nFSharpSymbol.SignatureLocation \nSignatureLocation \nFSharpSymbol.IsExplicitlySuppressed \nIsExplicitlySuppressed \nFSharpSymbol.DisplayName \nDisplayName \nFSharpSymbol.ImplementationLocation \nImplementationLocation"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#GetEffectivelySameAsHash","title":"FSharpSymbol.GetEffectivelySameAsHash","content":"FSharpSymbol.GetEffectivelySameAsHash \nGetEffectivelySameAsHash \n\n A hash compatible with the IsEffectivelySameAs relation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#HasAttribute","title":"FSharpSymbol.HasAttribute","content":"FSharpSymbol.HasAttribute \nHasAttribute \n\n Indicates if this symbol has an attribute matching the full name of the given type parameter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#IsAccessible","title":"FSharpSymbol.IsAccessible","content":"FSharpSymbol.IsAccessible \nIsAccessible \n\n Computes if the symbol is accessible for the given accessibility rights\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#IsEffectivelySameAs","title":"FSharpSymbol.IsEffectivelySameAs","content":"FSharpSymbol.IsEffectivelySameAs \nIsEffectivelySameAs \n\n Return true if two symbols are effectively the same when referred to in F# source code text.  \n This sees through signatures (a symbol in a signature will be considered effectively the same as \n the matching symbol in an implementation).  In addition, other equivalences are applied\n when the same F# source text implies the same declaration name - for example, constructors \n are considered to be effectively the same symbol as the corresponding type definition.\n\n This is the relation used by GetUsesOfSymbol and GetUsesOfSymbolInFile.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#TryGetAttribute","title":"FSharpSymbol.TryGetAttribute","content":"FSharpSymbol.TryGetAttribute \nTryGetAttribute \n\n Try to get an attribute matching the full name of the given type parameter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#Assembly","title":"FSharpSymbol.Assembly","content":"FSharpSymbol.Assembly \nAssembly \n\n Get the assembly declaring this symbol\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#DisplayNameCore","title":"FSharpSymbol.DisplayNameCore","content":"FSharpSymbol.DisplayNameCore \nDisplayNameCore \n\n Gets the display name for the symbol where double backticks are not added for non-identifiers\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#Accessibility","title":"FSharpSymbol.Accessibility","content":"FSharpSymbol.Accessibility \nAccessibility \n\n Get the declared accessibility of the symbol, if any\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#FullName","title":"FSharpSymbol.FullName","content":"FSharpSymbol.FullName \nFullName \n\n Get a textual representation of the full name of the symbol. The text returned for some symbols\n may not be a valid identifier path in F# code, but rather a human-readable representation of the symbol.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#Attributes","title":"FSharpSymbol.Attributes","content":"FSharpSymbol.Attributes \nAttributes \n\n Get the attributes for the symbol, if any\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#DeclarationLocation","title":"FSharpSymbol.DeclarationLocation","content":"FSharpSymbol.DeclarationLocation \nDeclarationLocation \n\n Get the declaration location for the symbol\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#SignatureLocation","title":"FSharpSymbol.SignatureLocation","content":"FSharpSymbol.SignatureLocation \nSignatureLocation \n\n Get the signature location for the symbol if it was declared in an implementation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#IsExplicitlySuppressed","title":"FSharpSymbol.IsExplicitlySuppressed","content":"FSharpSymbol.IsExplicitlySuppressed \nIsExplicitlySuppressed \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#DisplayName","title":"FSharpSymbol.DisplayName","content":"FSharpSymbol.DisplayName \nDisplayName \n\n Gets the display name for the symbol. Double backticks are added if the name is not a valid identifier.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpsymbol.html#ImplementationLocation","title":"FSharpSymbol.ImplementationLocation","content":"FSharpSymbol.ImplementationLocation \nImplementationLocation \n\n Get the implementation location for the symbol if it was declared in a signature that has an implementation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html","title":"FSharpType","content":"FSharpType \n \nFSharpType.Format \nFormat \nFSharpType.FormatLayout \nFormatLayout \nFSharpType.FormatLayoutWithConstraints \nFormatLayoutWithConstraints \nFSharpType.FormatWithConstraints \nFormatWithConstraints \nFSharpType.Instantiate \nInstantiate \nFSharpType.StripAbbreviations \nStripAbbreviations \nFSharpType.HasTypeDefinition \nHasTypeDefinition \nFSharpType.AbbreviatedType \nAbbreviatedType \nFSharpType.IsUnresolved \nIsUnresolved \nFSharpType.GenericArguments \nGenericArguments \nFSharpType.IsAbbreviation \nIsAbbreviation \nFSharpType.IsStructTupleType \nIsStructTupleType \nFSharpType.TypeDefinition \nTypeDefinition \nFSharpType.BaseType \nBaseType \nFSharpType.AnonRecordTypeDetails \nAnonRecordTypeDetails \nFSharpType.IsTupleType \nIsTupleType \nFSharpType.IsFunctionType \nIsFunctionType \nFSharpType.AllInterfaces \nAllInterfaces \nFSharpType.IsGenericParameter \nIsGenericParameter \nFSharpType.IsAnonRecordType \nIsAnonRecordType \nFSharpType.GenericParameter \nGenericParameter \nFSharpType.Prettify \nPrettify \nFSharpType.Prettify \nPrettify \nFSharpType.Prettify \nPrettify \nFSharpType.Prettify \nPrettify \nFSharpType.Prettify \nPrettify \nFSharpType.Prettify \nPrettify"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Format","title":"FSharpType.Format","content":"FSharpType.Format \nFormat \n\n Format the type using the rules of the given display context, skipping type constraints\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#FormatLayout","title":"FSharpType.FormatLayout","content":"FSharpType.FormatLayout \nFormatLayout \n\n Format the type using the rules of the given display context\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#FormatLayoutWithConstraints","title":"FSharpType.FormatLayoutWithConstraints","content":"FSharpType.FormatLayoutWithConstraints \nFormatLayoutWithConstraints \n\n Format the type - with constraints - using the rules of the given display context\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#FormatWithConstraints","title":"FSharpType.FormatWithConstraints","content":"FSharpType.FormatWithConstraints \nFormatWithConstraints \n\n Format the type using the rules of the given display context\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Instantiate","title":"FSharpType.Instantiate","content":"FSharpType.Instantiate \nInstantiate \n\n Instantiate generic type parameters in a type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#StripAbbreviations","title":"FSharpType.StripAbbreviations","content":"FSharpType.StripAbbreviations \nStripAbbreviations \n\n Strip any outer abbreviations from the type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#HasTypeDefinition","title":"FSharpType.HasTypeDefinition","content":"FSharpType.HasTypeDefinition \nHasTypeDefinition \n\n Indicates if the type is constructed using a named entity, including array and byref types\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#AbbreviatedType","title":"FSharpType.AbbreviatedType","content":"FSharpType.AbbreviatedType \nAbbreviatedType \n\n Get the type for which this is an abbreviation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsUnresolved","title":"FSharpType.IsUnresolved","content":"FSharpType.IsUnresolved \nIsUnresolved \n\n Indicates this is a named type in an unresolved assembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#GenericArguments","title":"FSharpType.GenericArguments","content":"FSharpType.GenericArguments \nGenericArguments \n\n Get the generic arguments for a tuple type, a function type or a type constructed using a named entity\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsAbbreviation","title":"FSharpType.IsAbbreviation","content":"FSharpType.IsAbbreviation \nIsAbbreviation \n\n Indicates this is an abbreviation for another type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsStructTupleType","title":"FSharpType.IsStructTupleType","content":"FSharpType.IsStructTupleType \nIsStructTupleType \n\n Indicates if the type is a struct tuple type. The GenericArguments property returns the elements of the tuple type.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#TypeDefinition","title":"FSharpType.TypeDefinition","content":"FSharpType.TypeDefinition \nTypeDefinition \n\n Get the type definition for a type \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#BaseType","title":"FSharpType.BaseType","content":"FSharpType.BaseType \nBaseType \n\n Get the base type, if any, taking into account the instantiation of this type\n if it is an instantiation of a generic type.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#AnonRecordTypeDetails","title":"FSharpType.AnonRecordTypeDetails","content":"FSharpType.AnonRecordTypeDetails \nAnonRecordTypeDetails \n\n Get the details of the anonymous record type.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsTupleType","title":"FSharpType.IsTupleType","content":"FSharpType.IsTupleType \nIsTupleType \n\n Indicates if the type is a tuple type (reference or struct). The GenericArguments property returns the elements of the tuple type.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsFunctionType","title":"FSharpType.IsFunctionType","content":"FSharpType.IsFunctionType \nIsFunctionType \n\n Indicates if the type is a function type. The GenericArguments property returns the domain and range of the function type.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#AllInterfaces","title":"FSharpType.AllInterfaces","content":"FSharpType.AllInterfaces \nAllInterfaces \n\n Get all the interface implementations, by walking the type hierarchy, taking into account the instantiation of this type\n if it is an instantiation of a generic type.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsGenericParameter","title":"FSharpType.IsGenericParameter","content":"FSharpType.IsGenericParameter \nIsGenericParameter \n\n Indicates if the type is a variable type, whether declared, generalized or an inference type parameter  \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#IsAnonRecordType","title":"FSharpType.IsAnonRecordType","content":"FSharpType.IsAnonRecordType \nIsAnonRecordType \n\n Indicates if the type is an anonymous record type. The GenericArguments property returns the type instantiation of the anonymous record type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#GenericParameter","title":"FSharpType.GenericParameter","content":"FSharpType.GenericParameter \nGenericParameter \n\n Get the generic parameter data for a generic parameter type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n\n Adjust the types in a group of curried parameters and return type by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n\n Adjust the types in a group of curried parameters by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n\n Adjust the types in a group of parameters by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n\n Adjust the type in a single parameter by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n\n Adjust a group of types by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharptype.html#Prettify","title":"FSharpType.Prettify","content":"FSharpType.Prettify \nPrettify \n\n Adjust the type by removing any occurrences of type inference variables, replacing them\n systematically with lower-case type inference variables such as \u003Cc\u003E\u0027a\u003C/c\u003E.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html","title":"FSharpUnionCase","content":"FSharpUnionCase \n\n A subtype of FSharpSymbol that represents a union case as seen by the F# language\n \nFSharpUnionCase.IsUnresolved \nIsUnresolved \nFSharpUnionCase.XmlDocSig \nXmlDocSig \nFSharpUnionCase.Fields \nFields \nFSharpUnionCase.CompiledName \nCompiledName \nFSharpUnionCase.DeclarationLocation \nDeclarationLocation \nFSharpUnionCase.ReturnType \nReturnType \nFSharpUnionCase.HasFields \nHasFields \nFSharpUnionCase.Name \nName \nFSharpUnionCase.XmlDoc \nXmlDoc"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#IsUnresolved","title":"FSharpUnionCase.IsUnresolved","content":"FSharpUnionCase.IsUnresolved \nIsUnresolved \n\n Indicates if the union case is for a type in an unresolved assembly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#XmlDocSig","title":"FSharpUnionCase.XmlDocSig","content":"FSharpUnionCase.XmlDocSig \nXmlDocSig \n\n Get the XML documentation signature for .xml file lookup for the union case, used for .xml file lookup for compiled code \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#Fields","title":"FSharpUnionCase.Fields","content":"FSharpUnionCase.Fields \nFields \n\n Get the data carried by the case. \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#CompiledName","title":"FSharpUnionCase.CompiledName","content":"FSharpUnionCase.CompiledName \nCompiledName \n\n Get the name of the case in generated IL code \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#DeclarationLocation","title":"FSharpUnionCase.DeclarationLocation","content":"FSharpUnionCase.DeclarationLocation \nDeclarationLocation \n\n Get the range of the name of the case \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#ReturnType","title":"FSharpUnionCase.ReturnType","content":"FSharpUnionCase.ReturnType \nReturnType \n\n Get the type constructed by the case. Normally exactly the type of the enclosing type, sometimes an abbreviation of it \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#HasFields","title":"FSharpUnionCase.HasFields","content":"FSharpUnionCase.HasFields \nHasFields \n\n Indicates if the union case has field definitions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#Name","title":"FSharpUnionCase.Name","content":"FSharpUnionCase.Name \nName \n\n Get the name of the union case \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpunioncase.html#XmlDoc","title":"FSharpUnionCase.XmlDoc","content":"FSharpUnionCase.XmlDoc \nXmlDoc \n\n Get the XML documentation for the entity\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html","title":"FSharpXmlDoc","content":"FSharpXmlDoc \n\n Describe a comment as either a block of text or a file\u002Bsignature reference into an intellidoc file.\n \nFSharpXmlDoc.None \nNone \nFSharpXmlDoc.FromXmlText \nFromXmlText \nFSharpXmlDoc.FromXmlFile \nFromXmlFile"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html#None","title":"FSharpXmlDoc.None","content":"FSharpXmlDoc.None \nNone \n\n No documentation is available\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html#FromXmlText","title":"FSharpXmlDoc.FromXmlText","content":"FSharpXmlDoc.FromXmlText \nFromXmlText \n\n The text for documentation for in-memory references. \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-symbols-fsharpxmldoc.html#FromXmlFile","title":"FSharpXmlDoc.FromXmlFile","content":"FSharpXmlDoc.FromXmlFile \nFromXmlFile \n\n Indicates that the XML for the documentation can be found in a .xml documentation file for the given DLL, using the given signature key\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html","title":"PrettyNaming","content":"PrettyNaming \n\n Some general F# utilities for mangling / unmangling / manipulating names.\n Anything to do with special names of identifiers and other lexical rules \n \nPrettyNaming.IsOperatorDisplayName \nIsOperatorDisplayName \nPrettyNaming.IsIdentifierName \nIsIdentifierName \nPrettyNaming.IsActivePatternName \nIsActivePatternName \nPrettyNaming.DoesIdentifierNeedBackticks \nDoesIdentifierNeedBackticks \nPrettyNaming.AddBackticksToIdentifierIfNeeded \nAddBackticksToIdentifierIfNeeded \nPrettyNaming.NormalizeIdentifierBackticks \nNormalizeIdentifierBackticks \nPrettyNaming.IsMangledOpName \nIsMangledOpName \nPrettyNaming.CompileOpName \nCompileOpName \nPrettyNaming.DecompileOpName \nDecompileOpName \nPrettyNaming.IsIdentifierFirstCharacter \nIsIdentifierFirstCharacter \nPrettyNaming.IsIdentifierPartCharacter \nIsIdentifierPartCharacter \nPrettyNaming.IsLongIdentifierPartCharacter \nIsLongIdentifierPartCharacter \nPrettyNaming.IsPrefixOperator \nIsPrefixOperator \nPrettyNaming.IsPunctuation \nIsPunctuation \nPrettyNaming.IsTernaryOperator \nIsTernaryOperator \nPrettyNaming.IsMangledInfixOperator \nIsMangledInfixOperator \nPrettyNaming.IsCompilerGeneratedName \nIsCompilerGeneratedName \nPrettyNaming.TryChopPropertyName \nTryChopPropertyName \nPrettyNaming.FsiDynamicModulePrefix \nFsiDynamicModulePrefix \nPrettyNaming.GetLongNameFromString \nGetLongNameFromString \nPrettyNaming.FormatAndOtherOverloadsString \nFormatAndOtherOverloadsString \nPrettyNaming.FSharpSignatureDataResourceName2 \nFSharpSignatureDataResourceName2"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsOperatorDisplayName","title":"PrettyNaming.IsOperatorDisplayName","content":"PrettyNaming.IsOperatorDisplayName \nIsOperatorDisplayName \n\n Returns \u0060true\u0060 if given string is an operator display name, e.g. \n    ( |\u003E\u003E )\n    |\u003E\u003E\n    ..\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsIdentifierName","title":"PrettyNaming.IsIdentifierName","content":"PrettyNaming.IsIdentifierName \nIsIdentifierName \n\n Is the name a valid F# identifier\n     A            --\u003E true\n     A\u0027           --\u003E true\n     _A           --\u003E true\n     A0           --\u003E true\n     |A|B|        --\u003E false\n     op_Addition  --\u003E true\n     \u002B            --\u003E false\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsActivePatternName","title":"PrettyNaming.IsActivePatternName","content":"PrettyNaming.IsActivePatternName \nIsActivePatternName \n\n Determines if the specified name is a valid name for an active pattern.\n     |A|_|        --\u003E true \n     |A|B|        --\u003E true \n     |A|          --\u003E true \n     |            --\u003E false\n     ||           --\u003E false\n     op_Addition  --\u003E false\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#DoesIdentifierNeedBackticks","title":"PrettyNaming.DoesIdentifierNeedBackticks","content":"PrettyNaming.DoesIdentifierNeedBackticks \nDoesIdentifierNeedBackticks \n\n Returns \u0060true\u0060 if given string requires double backticks to be a valid identifier, e.g. \n     \u002B     true, e.g. \u0060\u0060\u002B\u0060\u0060    (this is not op_Addition)\n     |\u003E\u003E   true, e.g. \u0060\u0060|\u003E\u003E\u0060\u0060  (this is not op_Addition)\n     A-B   true, e.g. \u0060\u0060A-B\u0060\u0060\n     AB    false, e.g. AB\n     |A|_| false   // this is an active pattern name, needs parens not backticks\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#AddBackticksToIdentifierIfNeeded","title":"PrettyNaming.AddBackticksToIdentifierIfNeeded","content":"PrettyNaming.AddBackticksToIdentifierIfNeeded \nAddBackticksToIdentifierIfNeeded \n\n Adds double backticks if necessary to make a valid identifier, e.g.\n     op_Addition  --\u003E  op_Addition\n     \u002B            --\u003E  \u0060\u0060\u002B\u0060\u0060    (this is not op_Addition)\n     |\u003E\u003E          --\u003E  \u0060\u0060|\u003E\u003E\u0060\u0060  (this is not an op_)\n     A-B          --\u003E  \u0060\u0060A-B\u0060\u0060\n     AB           --\u003E  AB\n     |A|_|        --\u003E  |A|_|    this is an active pattern name, needs parens not backticks\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#NormalizeIdentifierBackticks","title":"PrettyNaming.NormalizeIdentifierBackticks","content":"PrettyNaming.NormalizeIdentifierBackticks \nNormalizeIdentifierBackticks \n\n Removes double backticks if not necessary to make a valid identifier, e.g.\n     \u0060\u0060A\u0060\u0060        --\u003E A\n     \u0060\u0060A-B\u0060\u0060      --\u003E \u0060\u0060A-B\u0060\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsMangledOpName","title":"PrettyNaming.IsMangledOpName","content":"PrettyNaming.IsMangledOpName \nIsMangledOpName \n\n Is the name a mangled operator name (approximate)\n    op_Addition - yes\n    op_Quack - yes\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#CompileOpName","title":"PrettyNaming.CompileOpName","content":"PrettyNaming.CompileOpName \nCompileOpName \n\n Compiles an operator into a mangled operator name. For example,\n    \u002B  --\u003E op_Addition\n    !%  --\u003E op_DereferencePercent\n Only used on actual operator names\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#DecompileOpName","title":"PrettyNaming.DecompileOpName","content":"PrettyNaming.DecompileOpName \nDecompileOpName \n\n Decompiles a potentially-mangled operator name back into a display name. For example:\n     Foo                   --\u003E Foo\n     \u002B                     --\u003E \u002B\n     op_Addition           --\u003E \u002B\n     op_DereferencePercent --\u003E !%\n     A-B                   --\u003E A-B\n     |A|_|                 --\u003E |A|_|\n Used on names of all kinds\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsIdentifierFirstCharacter","title":"PrettyNaming.IsIdentifierFirstCharacter","content":"PrettyNaming.IsIdentifierFirstCharacter \nIsIdentifierFirstCharacter \n\n The characters that are allowed to be the first character of an identifier.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsIdentifierPartCharacter","title":"PrettyNaming.IsIdentifierPartCharacter","content":"PrettyNaming.IsIdentifierPartCharacter \nIsIdentifierPartCharacter \n\n The characters that are allowed to be in an identifier.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsLongIdentifierPartCharacter","title":"PrettyNaming.IsLongIdentifierPartCharacter","content":"PrettyNaming.IsLongIdentifierPartCharacter \nIsLongIdentifierPartCharacter \n\n Is this character a part of a long identifier?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsPrefixOperator","title":"PrettyNaming.IsPrefixOperator","content":"PrettyNaming.IsPrefixOperator \nIsPrefixOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsPunctuation","title":"PrettyNaming.IsPunctuation","content":"PrettyNaming.IsPunctuation \nIsPunctuation \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsTernaryOperator","title":"PrettyNaming.IsTernaryOperator","content":"PrettyNaming.IsTernaryOperator \nIsTernaryOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsMangledInfixOperator","title":"PrettyNaming.IsMangledInfixOperator","content":"PrettyNaming.IsMangledInfixOperator \nIsMangledInfixOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#IsCompilerGeneratedName","title":"PrettyNaming.IsCompilerGeneratedName","content":"PrettyNaming.IsCompilerGeneratedName \nIsCompilerGeneratedName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#TryChopPropertyName","title":"PrettyNaming.TryChopPropertyName","content":"PrettyNaming.TryChopPropertyName \nTryChopPropertyName \n\n Try to chop \u0022get_\u0022 or \u0022set_\u0022 from a string\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#FsiDynamicModulePrefix","title":"PrettyNaming.FsiDynamicModulePrefix","content":"PrettyNaming.FsiDynamicModulePrefix \nFsiDynamicModulePrefix \n\n The prefix of the names used for the fake namespace path added to all dynamic code entries in FSI.EXE\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#GetLongNameFromString","title":"PrettyNaming.GetLongNameFromString","content":"PrettyNaming.GetLongNameFromString \nGetLongNameFromString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#FormatAndOtherOverloadsString","title":"PrettyNaming.FormatAndOtherOverloadsString","content":"PrettyNaming.FormatAndOtherOverloadsString \nFormatAndOtherOverloadsString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-prettynaming.html#FSharpSignatureDataResourceName2","title":"PrettyNaming.FSharpSignatureDataResourceName2","content":"PrettyNaming.FSharpSignatureDataResourceName2 \nFSharpSignatureDataResourceName2 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxtraversal.html","title":"SyntaxTraversal","content":"SyntaxTraversal \n \nSyntaxTraversal.Traverse \nTraverse"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxtraversal.html#Traverse","title":"SyntaxTraversal.Traverse","content":"SyntaxTraversal.Traverse \nTraverse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html","title":"DebugPointAtBinding","content":"DebugPointAtBinding \n\n Represents whether a debug point should be present for a \u0027let\u0027 binding,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtBinding.Combine \nCombine \nDebugPointAtBinding.Yes \nYes \nDebugPointAtBinding.NoneAtDo \nNoneAtDo \nDebugPointAtBinding.NoneAtLet \nNoneAtLet \nDebugPointAtBinding.NoneAtSticky \nNoneAtSticky \nDebugPointAtBinding.NoneAtInvisible \nNoneAtInvisible"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#Combine","title":"DebugPointAtBinding.Combine","content":"DebugPointAtBinding.Combine \nCombine \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#Yes","title":"DebugPointAtBinding.Yes","content":"DebugPointAtBinding.Yes \nYes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtDo","title":"DebugPointAtBinding.NoneAtDo","content":"DebugPointAtBinding.NoneAtDo \nNoneAtDo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtLet","title":"DebugPointAtBinding.NoneAtLet","content":"DebugPointAtBinding.NoneAtLet \nNoneAtLet \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtSticky","title":"DebugPointAtBinding.NoneAtSticky","content":"DebugPointAtBinding.NoneAtSticky \nNoneAtSticky \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatbinding.html#NoneAtInvisible","title":"DebugPointAtBinding.NoneAtInvisible","content":"DebugPointAtBinding.NoneAtInvisible \nNoneAtInvisible \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfinally.html","title":"DebugPointAtFinally","content":"DebugPointAtFinally \n\n Represents whether a debug point should be present for the \u0027finally\u0027 in a \u0027try .. finally\u0027,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtFinally.Yes \nYes \nDebugPointAtFinally.Body \nBody \nDebugPointAtFinally.No \nNo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfinally.html#Yes","title":"DebugPointAtFinally.Yes","content":"DebugPointAtFinally.Yes \nYes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfinally.html#Body","title":"DebugPointAtFinally.Body","content":"DebugPointAtFinally.Body \nBody \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfinally.html#No","title":"DebugPointAtFinally.No","content":"DebugPointAtFinally.No \nNo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfor.html","title":"DebugPointAtFor","content":"DebugPointAtFor \n\n Represents whether a debug point should be present for the \u0027for\u0027 in a \u0027for...\u0027 loop,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtFor.Yes \nYes \nDebugPointAtFor.No \nNo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfor.html#Yes","title":"DebugPointAtFor.Yes","content":"DebugPointAtFor.Yes \nYes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatfor.html#No","title":"DebugPointAtFor.No","content":"DebugPointAtFor.No \nNo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html","title":"DebugPointAtSequential","content":"DebugPointAtSequential \n\n Represents whether a debug point should be suppressed for either the\n first or second part of a sequential execution, that is whether the\n construct corresponds to a debug point in the original source.\n \nDebugPointAtSequential.SuppressNeither \nSuppressNeither \nDebugPointAtSequential.SuppressStmt \nSuppressStmt \nDebugPointAtSequential.SuppressBoth \nSuppressBoth \nDebugPointAtSequential.SuppressExpr \nSuppressExpr"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressNeither","title":"DebugPointAtSequential.SuppressNeither","content":"DebugPointAtSequential.SuppressNeither \nSuppressNeither \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressStmt","title":"DebugPointAtSequential.SuppressStmt","content":"DebugPointAtSequential.SuppressStmt \nSuppressStmt \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressBoth","title":"DebugPointAtSequential.SuppressBoth","content":"DebugPointAtSequential.SuppressBoth \nSuppressBoth \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatsequential.html#SuppressExpr","title":"DebugPointAtSequential.SuppressExpr","content":"DebugPointAtSequential.SuppressExpr \nSuppressExpr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatswitch.html","title":"DebugPointAtSwitch","content":"DebugPointAtSwitch \n\n Represents whether a debug point should be present at the switch\n logic of a decision tree. These are introduced for \u0027when\u0027 expressions\n and the encoding of \u0027a \u0026\u0026 b\u0027, \u0027a || b\u0027\n \nDebugPointAtSwitch.Yes \nYes \nDebugPointAtSwitch.No \nNo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatswitch.html#Yes","title":"DebugPointAtSwitch.Yes","content":"DebugPointAtSwitch.Yes \nYes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatswitch.html#No","title":"DebugPointAtSwitch.No","content":"DebugPointAtSwitch.No \nNo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattarget.html","title":"DebugPointAtTarget","content":"DebugPointAtTarget \n\n Represents whether a debug point should be present for the target\n of a decision tree, that is whether the construct corresponds to a debug\n point in the original source.\n \nDebugPointAtTarget.Yes \nYes \nDebugPointAtTarget.No \nNo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattarget.html#Yes","title":"DebugPointAtTarget.Yes","content":"DebugPointAtTarget.Yes \nYes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattarget.html#No","title":"DebugPointAtTarget.No","content":"DebugPointAtTarget.No \nNo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattry.html","title":"DebugPointAtTry","content":"DebugPointAtTry \n\n Represents whether a debug point should be present for a \u0027try\u0027, that is whether\n the construct corresponds to a debug point in the original source.\n \nDebugPointAtTry.Yes \nYes \nDebugPointAtTry.Body \nBody \nDebugPointAtTry.No \nNo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattry.html#Yes","title":"DebugPointAtTry.Yes","content":"DebugPointAtTry.Yes \nYes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattry.html#Body","title":"DebugPointAtTry.Body","content":"DebugPointAtTry.Body \nBody \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointattry.html#No","title":"DebugPointAtTry.No","content":"DebugPointAtTry.No \nNo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwhile.html","title":"DebugPointAtWhile","content":"DebugPointAtWhile \n\n Represents whether a debug point should be present for the \u0027while\u0027 in a \u0027while...\u0027 loop,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtWhile.Yes \nYes \nDebugPointAtWhile.No \nNo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwhile.html#Yes","title":"DebugPointAtWhile.Yes","content":"DebugPointAtWhile.Yes \nYes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwhile.html#No","title":"DebugPointAtWhile.No","content":"DebugPointAtWhile.No \nNo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwith.html","title":"DebugPointAtWith","content":"DebugPointAtWith \n\n Represents whether a debug point should be present for the \u0027with\u0027 in a \u0027try .. with\u0027,\n that is whether the construct corresponds to a debug point in the original source.\n \nDebugPointAtWith.Yes \nYes \nDebugPointAtWith.No \nNo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwith.html#Yes","title":"DebugPointAtWith.Yes","content":"DebugPointAtWith.Yes \nYes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-debugpointatwith.html#No","title":"DebugPointAtWith.No","content":"DebugPointAtWith.No \nNo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-expratomicflag.html","title":"ExprAtomicFlag","content":"ExprAtomicFlag \n\n Indicates if an expression is an atomic expression.\n\n An atomic expression has no whitespace unless enclosed in parentheses, e.g.\n 1, \u00223\u0022, ident, ident.[expr] and (expr). If an atomic expression has type T,\n then the largest expression ending at the same range as the atomic expression\n also has type T.\n \nExprAtomicFlag.Atomic \nAtomic \nExprAtomicFlag.NonAtomic \nNonAtomic"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-expratomicflag.html#Atomic","title":"ExprAtomicFlag.Atomic","content":"ExprAtomicFlag.Atomic \nAtomic \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-expratomicflag.html#NonAtomic","title":"ExprAtomicFlag.NonAtomic","content":"ExprAtomicFlag.NonAtomic \nNonAtomic \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-ident.html","title":"Ident","content":"Ident \n\n Represents an identifier in F# code\n \nIdent.( .ctor ) \n( .ctor ) \nIdent.idText \nidText \nIdent.idRange \nidRange"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-ident.html#( .ctor )","title":"Ident.( .ctor )","content":"Ident.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-ident.html#idText","title":"Ident.idText","content":"Ident.idText \nidText \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-ident.html#idRange","title":"Ident.idRange","content":"Ident.idRange \nidRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-longidentwithdots.html","title":"LongIdentWithDots","content":"LongIdentWithDots \n\n Represents a long identifier with possible \u0027.\u0027 at end.\n\n Typically dotRanges.Length = lid.Length-1, but they may be same if (incomplete) code ends in a dot, e.g. \u0022Foo.Bar.\u0022\n The dots mostly matter for parsing, and are typically ignored by the typechecker, but\n if dotRanges.Length = lid.Length, then the parser must have reported an error, so the typechecker is allowed\n more freedom about typechecking these expressions.\n LongIdent can be empty list - it is used to denote that name of some AST element is absent (i.e. empty type name in inherit)\n \nLongIdentWithDots.ThereIsAnExtraDotAtTheEnd \nThereIsAnExtraDotAtTheEnd \nLongIdentWithDots.Range \nRange \nLongIdentWithDots.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \nLongIdentWithDots.Lid \nLid \nLongIdentWithDots.LongIdentWithDots \nLongIdentWithDots"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-longidentwithdots.html#ThereIsAnExtraDotAtTheEnd","title":"LongIdentWithDots.ThereIsAnExtraDotAtTheEnd","content":"LongIdentWithDots.ThereIsAnExtraDotAtTheEnd \nThereIsAnExtraDotAtTheEnd \n\n Indicates if the construct ends in \u0027.\u0027 due to error recovery\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-longidentwithdots.html#Range","title":"LongIdentWithDots.Range","content":"LongIdentWithDots.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-longidentwithdots.html#RangeWithoutAnyExtraDot","title":"LongIdentWithDots.RangeWithoutAnyExtraDot","content":"LongIdentWithDots.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \n\n Gets the syntax range for part of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-longidentwithdots.html#Lid","title":"LongIdentWithDots.Lid","content":"LongIdentWithDots.Lid \nLid \n\n Get the long ident for this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-longidentwithdots.html#LongIdentWithDots","title":"LongIdentWithDots.LongIdentWithDots","content":"LongIdentWithDots.LongIdentWithDots \nLongIdentWithDots \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirective.html","title":"ParsedHashDirective","content":"ParsedHashDirective \n\n Represents a parsed hash directive\n \nParsedHashDirective.ParsedHashDirective \nParsedHashDirective"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirective.html#ParsedHashDirective","title":"ParsedHashDirective.ParsedHashDirective","content":"ParsedHashDirective.ParsedHashDirective \nParsedHashDirective \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html","title":"ParsedHashDirectiveArgument","content":"ParsedHashDirectiveArgument \n\n Represents a parsed hash directive argument\n \nParsedHashDirectiveArgument.Range \nRange \nParsedHashDirectiveArgument.String \nString \nParsedHashDirectiveArgument.SourceIdentifier \nSourceIdentifier"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#Range","title":"ParsedHashDirectiveArgument.Range","content":"ParsedHashDirectiveArgument.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#String","title":"ParsedHashDirectiveArgument.String","content":"ParsedHashDirectiveArgument.String \nString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedhashdirectiveargument.html#SourceIdentifier","title":"ParsedHashDirectiveArgument.SourceIdentifier","content":"ParsedHashDirectiveArgument.SourceIdentifier \nSourceIdentifier \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfile.html","title":"ParsedImplFile","content":"ParsedImplFile \n\n Represents a parsed implementation file made up of fragments \n \nParsedImplFile.ParsedImplFile \nParsedImplFile"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfile.html#ParsedImplFile","title":"ParsedImplFile.ParsedImplFile","content":"ParsedImplFile.ParsedImplFile \nParsedImplFile \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html","title":"ParsedImplFileFragment","content":"ParsedImplFileFragment \n\n Represents the syntax tree for the contents of a parsed implementation file\n \nParsedImplFileFragment.AnonModule \nAnonModule \nParsedImplFileFragment.NamedModule \nNamedModule \nParsedImplFileFragment.NamespaceFragment \nNamespaceFragment"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#AnonModule","title":"ParsedImplFileFragment.AnonModule","content":"ParsedImplFileFragment.AnonModule \nAnonModule \n\n An implementation file which is an anonymous module definition, e.g. a script\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#NamedModule","title":"ParsedImplFileFragment.NamedModule","content":"ParsedImplFileFragment.NamedModule \nNamedModule \n\n An implementation file is a named module definition, \u0027module N\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfilefragment.html#NamespaceFragment","title":"ParsedImplFileFragment.NamespaceFragment","content":"ParsedImplFileFragment.NamespaceFragment \nNamespaceFragment \n\n An implementation file fragment which declares a namespace fragment\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html","title":"ParsedImplFileInput","content":"ParsedImplFileInput \n\n Represents the full syntax tree, file name and other parsing information for an implementation file\n \nParsedImplFileInput.ParsedImplFileInput \nParsedImplFileInput"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedimplfileinput.html#ParsedImplFileInput","title":"ParsedImplFileInput.ParsedImplFileInput","content":"ParsedImplFileInput.ParsedImplFileInput \nParsedImplFileInput \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html","title":"ParsedInput","content":"ParsedInput \n\n Represents the syntax tree for a parsed implementation or signature file\n \nParsedInput.FileName \nFileName \nParsedInput.Range \nRange \nParsedInput.ImplFile \nImplFile \nParsedInput.SigFile \nSigFile"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#FileName","title":"ParsedInput.FileName","content":"ParsedInput.FileName \nFileName \n\n Gets the file name for the parsed input\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#Range","title":"ParsedInput.Range","content":"ParsedInput.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#ImplFile","title":"ParsedInput.ImplFile","content":"ParsedInput.ImplFile \nImplFile \n\n A parsed implementation file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedinput.html#SigFile","title":"ParsedInput.SigFile","content":"ParsedInput.SigFile \nSigFile \n\n A parsed signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedscriptinteraction.html","title":"ParsedScriptInteraction","content":"ParsedScriptInteraction \n\n Represents a parsed syntax tree for an F# Interactive interaction\n \nParsedScriptInteraction.Definitions \nDefinitions \nParsedScriptInteraction.HashDirective \nHashDirective"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedscriptinteraction.html#Definitions","title":"ParsedScriptInteraction.Definitions","content":"ParsedScriptInteraction.Definitions \nDefinitions \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedscriptinteraction.html#HashDirective","title":"ParsedScriptInteraction.HashDirective","content":"ParsedScriptInteraction.HashDirective \nHashDirective \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfile.html","title":"ParsedSigFile","content":"ParsedSigFile \n\n Represents a parsed signature file made up of fragments \n \nParsedSigFile.ParsedSigFile \nParsedSigFile"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfile.html#ParsedSigFile","title":"ParsedSigFile.ParsedSigFile","content":"ParsedSigFile.ParsedSigFile \nParsedSigFile \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html","title":"ParsedSigFileFragment","content":"ParsedSigFileFragment \n\n Represents the syntax tree for the contents of a parsed signature file\n \nParsedSigFileFragment.AnonModule \nAnonModule \nParsedSigFileFragment.NamedModule \nNamedModule \nParsedSigFileFragment.NamespaceFragment \nNamespaceFragment"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#AnonModule","title":"ParsedSigFileFragment.AnonModule","content":"ParsedSigFileFragment.AnonModule \nAnonModule \n\n A signature file which is an anonymous module, e.g. the signature file for the final file in an application\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#NamedModule","title":"ParsedSigFileFragment.NamedModule","content":"ParsedSigFileFragment.NamedModule \nNamedModule \n\n A signature file which is a module, \u0027module N\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfilefragment.html#NamespaceFragment","title":"ParsedSigFileFragment.NamespaceFragment","content":"ParsedSigFileFragment.NamespaceFragment \nNamespaceFragment \n\n A signature file namespace fragment\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfileinput.html","title":"ParsedSigFileInput","content":"ParsedSigFileInput \n\n Represents the full syntax tree, file name and other parsing information for a signature file\n \nParsedSigFileInput.ParsedSigFileInput \nParsedSigFileInput"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parsedsigfileinput.html#ParsedSigFileInput","title":"ParsedSigFileInput.ParsedSigFileInput","content":"ParsedSigFileInput.ParsedSigFileInput \nParsedSigFileInput \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parserdetail.html","title":"ParserDetail","content":"ParserDetail \n\n Indicates if the construct arises from error recovery\n \nParserDetail.Ok \nOk \nParserDetail.ErrorRecovery \nErrorRecovery"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parserdetail.html#Ok","title":"ParserDetail.Ok","content":"ParserDetail.Ok \nOk \n\n The construct arises normally\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-parserdetail.html#ErrorRecovery","title":"ParserDetail.ErrorRecovery","content":"ParserDetail.ErrorRecovery \nErrorRecovery \n\n The construct arises from error recovery\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-propertykeyword.html","title":"PropertyKeyword","content":"PropertyKeyword \n\n Represents a used keyword for a property member\n \nPropertyKeyword.With \nWith \nPropertyKeyword.And \nAnd"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-propertykeyword.html#With","title":"PropertyKeyword.With","content":"PropertyKeyword.With \nWith \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-propertykeyword.html#And","title":"PropertyKeyword.And","content":"PropertyKeyword.And \nAnd \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-qualifiednameoffile.html","title":"QualifiedNameOfFile","content":"QualifiedNameOfFile \n\n Represents a qualifying name for anonymous module specifications and implementations,\n \nQualifiedNameOfFile.Id \nId \nQualifiedNameOfFile.Text \nText \nQualifiedNameOfFile.Range \nRange \nQualifiedNameOfFile.QualifiedNameOfFile \nQualifiedNameOfFile"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-qualifiednameoffile.html#Id","title":"QualifiedNameOfFile.Id","content":"QualifiedNameOfFile.Id \nId \n\n The identifier for the name of the file \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-qualifiednameoffile.html#Text","title":"QualifiedNameOfFile.Text","content":"QualifiedNameOfFile.Text \nText \n\n The name of the file \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-qualifiednameoffile.html#Range","title":"QualifiedNameOfFile.Range","content":"QualifiedNameOfFile.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-qualifiednameoffile.html#QualifiedNameOfFile","title":"QualifiedNameOfFile.QualifiedNameOfFile","content":"QualifiedNameOfFile.QualifiedNameOfFile \nQualifiedNameOfFile \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-scopedpragma.html","title":"ScopedPragma","content":"ScopedPragma \n\n Represents a scoped pragma \n \nScopedPragma.WarningOff \nWarningOff"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-scopedpragma.html#WarningOff","title":"ScopedPragma.WarningOff","content":"ScopedPragma.WarningOff \nWarningOff \n\n A pragma to turn a warning off\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-seqexpronly.html","title":"SeqExprOnly","content":"SeqExprOnly \n\n Indicates if a for loop is \u0027for x in e1 -\u003E e2\u0027, only valid in sequence expressions\n \nSeqExprOnly.SeqExprOnly \nSeqExprOnly"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-seqexpronly.html#SeqExprOnly","title":"SeqExprOnly.SeqExprOnly","content":"SeqExprOnly.SeqExprOnly \nSeqExprOnly \n\n Indicates if a for loop is \u0027for x in e1 -\u003E e2\u0027, only valid in sequence expressions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html","title":"SynAccess","content":"SynAccess \n\n Represents an accessibility modifier in F# syntax\n \nSynAccess.Public \nPublic \nSynAccess.Internal \nInternal \nSynAccess.Private \nPrivate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html#Public","title":"SynAccess.Public","content":"SynAccess.Public \nPublic \n\n A construct marked or assumed \u0027public\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html#Internal","title":"SynAccess.Internal","content":"SynAccess.Internal \nInternal \n\n A construct marked or assumed \u0027internal\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synaccess.html#Private","title":"SynAccess.Private","content":"SynAccess.Private \nPrivate \n\n A construct marked or assumed \u0027private\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synarginfo.html","title":"SynArgInfo","content":"SynArgInfo \n\n Represents the argument names and other metadata for a parameter for a member or function\n \nSynArgInfo.Attributes \nAttributes \nSynArgInfo.Ident \nIdent \nSynArgInfo.SynArgInfo \nSynArgInfo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synarginfo.html#Attributes","title":"SynArgInfo.Attributes","content":"SynArgInfo.Attributes \nAttributes \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synarginfo.html#Ident","title":"SynArgInfo.Ident","content":"SynArgInfo.Ident \nIdent \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synarginfo.html#SynArgInfo","title":"SynArgInfo.SynArgInfo","content":"SynArgInfo.SynArgInfo \nSynArgInfo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synargpats.html","title":"SynArgPats","content":"SynArgPats \n\n Represents a syntax tree for arguments patterns \n \nSynArgPats.Patterns \nPatterns \nSynArgPats.Pats \nPats \nSynArgPats.NamePatPairs \nNamePatPairs"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synargpats.html#Patterns","title":"SynArgPats.Patterns","content":"SynArgPats.Patterns \nPatterns \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synargpats.html#Pats","title":"SynArgPats.Pats","content":"SynArgPats.Pats \nPats \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synargpats.html#NamePatPairs","title":"SynArgPats.NamePatPairs","content":"SynArgPats.NamePatPairs \nNamePatPairs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html","title":"SynAttribute","content":"SynAttribute \n\n Represents an attribute\n \nSynAttribute.TypeName \nTypeName \nSynAttribute.ArgExpr \nArgExpr \nSynAttribute.Target \nTarget \nSynAttribute.AppliesToGetterAndSetter \nAppliesToGetterAndSetter \nSynAttribute.Range \nRange"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html#TypeName","title":"SynAttribute.TypeName","content":"SynAttribute.TypeName \nTypeName \n\n The name of the type for the attribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html#ArgExpr","title":"SynAttribute.ArgExpr","content":"SynAttribute.ArgExpr \nArgExpr \n\n The argument of the attribute, perhaps a tuple\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html#Target","title":"SynAttribute.Target","content":"SynAttribute.Target \nTarget \n\n Target specifier, e.g. \u0022assembly\u0022, \u0022module\u0022, etc.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html#AppliesToGetterAndSetter","title":"SynAttribute.AppliesToGetterAndSetter","content":"SynAttribute.AppliesToGetterAndSetter \nAppliesToGetterAndSetter \n\n Is this attribute being applied to a property getter or setter?\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattribute.html#Range","title":"SynAttribute.Range","content":"SynAttribute.Range \nRange \n\n The syntax range of the attribute\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattributelist.html","title":"SynAttributeList","content":"SynAttributeList \n\n List of attributes enclosed in [\u003C ... \u003E].\n \nSynAttributeList.Attributes \nAttributes \nSynAttributeList.Range \nRange"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattributelist.html#Attributes","title":"SynAttributeList.Attributes","content":"SynAttributeList.Attributes \nAttributes \n\n The list of attributes\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synattributelist.html#Range","title":"SynAttributeList.Range","content":"SynAttributeList.Range \nRange \n\n The syntax range of the list of attributes\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html","title":"SynBinding","content":"SynBinding \n\n Represents a binding for a \u0027let\u0027 or \u0027member\u0027 declaration\n \nSynBinding.RangeOfHeadPattern \nRangeOfHeadPattern \nSynBinding.RangeOfBindingWithRhs \nRangeOfBindingWithRhs \nSynBinding.RangeOfBindingWithoutRhs \nRangeOfBindingWithoutRhs \nSynBinding.SynBinding \nSynBinding"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html#RangeOfHeadPattern","title":"SynBinding.RangeOfHeadPattern","content":"SynBinding.RangeOfHeadPattern \nRangeOfHeadPattern \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html#RangeOfBindingWithRhs","title":"SynBinding.RangeOfBindingWithRhs","content":"SynBinding.RangeOfBindingWithRhs \nRangeOfBindingWithRhs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html#RangeOfBindingWithoutRhs","title":"SynBinding.RangeOfBindingWithoutRhs","content":"SynBinding.RangeOfBindingWithoutRhs \nRangeOfBindingWithoutRhs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbinding.html#SynBinding","title":"SynBinding.SynBinding","content":"SynBinding.SynBinding \nSynBinding \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html","title":"SynBindingKind","content":"SynBindingKind \n\n The kind associated with a binding - \u0022let\u0022, \u0022do\u0022 or a standalone expression\n \nSynBindingKind.StandaloneExpression \nStandaloneExpression \nSynBindingKind.Normal \nNormal \nSynBindingKind.Do \nDo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html#StandaloneExpression","title":"SynBindingKind.StandaloneExpression","content":"SynBindingKind.StandaloneExpression \nStandaloneExpression \n\n A standalone expression in a module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html#Normal","title":"SynBindingKind.Normal","content":"SynBindingKind.Normal \nNormal \n\n A normal \u0027let\u0027 binding in a module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingkind.html#Do","title":"SynBindingKind.Do","content":"SynBindingKind.Do \nDo \n\n A \u0027do\u0027 binding in a module. Must have type \u0027unit\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingreturninfo.html","title":"SynBindingReturnInfo","content":"SynBindingReturnInfo \n\n Represents the return information in a binding for a \u0027let\u0027 or \u0027member\u0027 declaration\n \nSynBindingReturnInfo.SynBindingReturnInfo \nSynBindingReturnInfo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbindingreturninfo.html#SynBindingReturnInfo","title":"SynBindingReturnInfo.SynBindingReturnInfo","content":"SynBindingReturnInfo.SynBindingReturnInfo \nSynBindingReturnInfo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbytestringkind.html","title":"SynByteStringKind","content":"SynByteStringKind \n\n Indicate if the byte string had a special format\n \nSynByteStringKind.Regular \nRegular \nSynByteStringKind.Verbatim \nVerbatim"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbytestringkind.html#Regular","title":"SynByteStringKind.Regular","content":"SynByteStringKind.Regular \nRegular \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synbytestringkind.html#Verbatim","title":"SynByteStringKind.Verbatim","content":"SynByteStringKind.Verbatim \nVerbatim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syncomponentinfo.html","title":"SynComponentInfo","content":"SynComponentInfo \n\n Represents the syntax tree associated with the name of a type definition or module\n in signature or implementation.\n\n This includes the name, attributes, type parameters, constraints, documentation and accessibility\n for a type definition or module. For modules, entries such as the type parameters are\n always empty.\n \nSynComponentInfo.Range \nRange \nSynComponentInfo.SynComponentInfo \nSynComponentInfo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syncomponentinfo.html#Range","title":"SynComponentInfo.Range","content":"SynComponentInfo.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syncomponentinfo.html#SynComponentInfo","title":"SynComponentInfo.SynComponentInfo","content":"SynComponentInfo.SynComponentInfo \nSynComponentInfo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html","title":"SynConst","content":"SynConst \n\n The unchecked abstract syntax tree of constants in F# types and expressions.\n \nSynConst.Range \nRange \nSynConst.Unit \nUnit \nSynConst.Bool \nBool \nSynConst.SByte \nSByte \nSynConst.Byte \nByte \nSynConst.Int16 \nInt16 \nSynConst.UInt16 \nUInt16 \nSynConst.Int32 \nInt32 \nSynConst.UInt32 \nUInt32 \nSynConst.Int64 \nInt64 \nSynConst.UInt64 \nUInt64 \nSynConst.IntPtr \nIntPtr \nSynConst.UIntPtr \nUIntPtr \nSynConst.Single \nSingle \nSynConst.Double \nDouble \nSynConst.Char \nChar \nSynConst.Decimal \nDecimal \nSynConst.UserNum \nUserNum \nSynConst.String \nString \nSynConst.Bytes \nBytes \nSynConst.UInt16s \nUInt16s \nSynConst.Measure \nMeasure \nSynConst.SourceIdentifier \nSourceIdentifier"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Range","title":"SynConst.Range","content":"SynConst.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Unit","title":"SynConst.Unit","content":"SynConst.Unit \nUnit \n\n F# syntax: ()\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Bool","title":"SynConst.Bool","content":"SynConst.Bool \nBool \n\n F# syntax: true, false\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#SByte","title":"SynConst.SByte","content":"SynConst.SByte \nSByte \n\n F# syntax: 13y, 0xFFy, 0o077y, 0b0111101y\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Byte","title":"SynConst.Byte","content":"SynConst.Byte \nByte \n\n F# syntax: 13uy, 0x40uy, 0oFFuy, 0b0111101uy\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Int16","title":"SynConst.Int16","content":"SynConst.Int16 \nInt16 \n\n F# syntax: 13s, 0x4000s, 0o0777s, 0b0111101s\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UInt16","title":"SynConst.UInt16","content":"SynConst.UInt16 \nUInt16 \n\n F# syntax: 13us, 0x4000us, 0o0777us, 0b0111101us\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Int32","title":"SynConst.Int32","content":"SynConst.Int32 \nInt32 \n\n F# syntax: 13, 0x4000, 0o0777\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UInt32","title":"SynConst.UInt32","content":"SynConst.UInt32 \nUInt32 \n\n F# syntax: 13u, 0x4000u, 0o0777u\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Int64","title":"SynConst.Int64","content":"SynConst.Int64 \nInt64 \n\n F# syntax: 13L\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UInt64","title":"SynConst.UInt64","content":"SynConst.UInt64 \nUInt64 \n\n F# syntax: 13UL\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#IntPtr","title":"SynConst.IntPtr","content":"SynConst.IntPtr \nIntPtr \n\n F# syntax: 13n\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UIntPtr","title":"SynConst.UIntPtr","content":"SynConst.UIntPtr \nUIntPtr \n\n F# syntax: 13un\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Single","title":"SynConst.Single","content":"SynConst.Single \nSingle \n\n F# syntax: 1.30f, 1.40e10f etc.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Double","title":"SynConst.Double","content":"SynConst.Double \nDouble \n\n F# syntax: 1.30, 1.40e10 etc.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Char","title":"SynConst.Char","content":"SynConst.Char \nChar \n\n F# syntax: \u0027a\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Decimal","title":"SynConst.Decimal","content":"SynConst.Decimal \nDecimal \n\n F# syntax: 23.4M\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UserNum","title":"SynConst.UserNum","content":"SynConst.UserNum \nUserNum \n\n UserNum(value, suffix)\n\n F# syntax: 1Q, 1Z, 1R, 1N, 1G\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#String","title":"SynConst.String","content":"SynConst.String \nString \n\n F# syntax: verbatim or regular string, e.g. \u0022abc\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Bytes","title":"SynConst.Bytes","content":"SynConst.Bytes \nBytes \n\n F# syntax: verbatim or regular byte string, e.g. \u0022abc\u0022B.\n\n Also used internally in the typechecker once an array of unit16 constants\n is detected, to allow more efficient processing of large arrays of uint16 constants.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#UInt16s","title":"SynConst.UInt16s","content":"SynConst.UInt16s \nUInt16s \n\n Used internally in the typechecker once an array of unit16 constants\n is detected, to allow more efficient processing of large arrays of uint16 constants.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#Measure","title":"SynConst.Measure","content":"SynConst.Measure \nMeasure \n\n Old comment: \u0022we never iterate, so the const here is not another SynConst.Measure\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synconst.html#SourceIdentifier","title":"SynConst.SourceIdentifier","content":"SynConst.SourceIdentifier \nSourceIdentifier \n\n Source Line, File, and Path Identifiers\n Containing both the original value as the evaluated value.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synenumcase.html","title":"SynEnumCase","content":"SynEnumCase \n\n Represents the syntax tree for one case in an enum definition.\n \nSynEnumCase.Range \nRange \nSynEnumCase.SynEnumCase \nSynEnumCase"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synenumcase.html#Range","title":"SynEnumCase.Range","content":"SynEnumCase.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synenumcase.html#SynEnumCase","title":"SynEnumCase.SynEnumCase","content":"SynEnumCase.SynEnumCase \nSynEnumCase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefn.html","title":"SynExceptionDefn","content":"SynExceptionDefn \n\n Represents the right hand side of an exception declaration \u0027exception E = ... \u0027 plus\n any member definitions for the exception\n \nSynExceptionDefn.Range \nRange \nSynExceptionDefn.SynExceptionDefn \nSynExceptionDefn"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefn.html#Range","title":"SynExceptionDefn.Range","content":"SynExceptionDefn.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefn.html#SynExceptionDefn","title":"SynExceptionDefn.SynExceptionDefn","content":"SynExceptionDefn.SynExceptionDefn \nSynExceptionDefn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefnrepr.html","title":"SynExceptionDefnRepr","content":"SynExceptionDefnRepr \n\n Represents the right hand side of an exception declaration \u0027exception E = ... \u0027\n \nSynExceptionDefnRepr.Range \nRange \nSynExceptionDefnRepr.SynExceptionDefnRepr \nSynExceptionDefnRepr"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefnrepr.html#Range","title":"SynExceptionDefnRepr.Range","content":"SynExceptionDefnRepr.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptiondefnrepr.html#SynExceptionDefnRepr","title":"SynExceptionDefnRepr.SynExceptionDefnRepr","content":"SynExceptionDefnRepr.SynExceptionDefnRepr \nSynExceptionDefnRepr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptionsig.html","title":"SynExceptionSig","content":"SynExceptionSig \n\n Represents the right hand side of an exception definition in a signature file\n \nSynExceptionSig.SynExceptionSig \nSynExceptionSig"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexceptionsig.html#SynExceptionSig","title":"SynExceptionSig.SynExceptionSig","content":"SynExceptionSig.SynExceptionSig \nSynExceptionSig \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html","title":"SynExpr","content":"SynExpr \n\n Represents a syntax tree for F# expressions\n \nSynExpr.Range \nRange \nSynExpr.IsArbExprAndThusAlreadyReportedError \nIsArbExprAndThusAlreadyReportedError \nSynExpr.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \nSynExpr.RangeOfFirstPortion \nRangeOfFirstPortion \nSynExpr.Paren \nParen \nSynExpr.Quote \nQuote \nSynExpr.Const \nConst \nSynExpr.Typed \nTyped \nSynExpr.Tuple \nTuple \nSynExpr.AnonRecd \nAnonRecd \nSynExpr.ArrayOrList \nArrayOrList \nSynExpr.Record \nRecord \nSynExpr.New \nNew \nSynExpr.ObjExpr \nObjExpr \nSynExpr.While \nWhile \nSynExpr.For \nFor \nSynExpr.ForEach \nForEach \nSynExpr.ArrayOrListComputed \nArrayOrListComputed \nSynExpr.IndexRange \nIndexRange \nSynExpr.IndexFromEnd \nIndexFromEnd \nSynExpr.ComputationExpr \nComputationExpr \nSynExpr.Lambda \nLambda \nSynExpr.MatchLambda \nMatchLambda \nSynExpr.Match \nMatch \nSynExpr.Do \nDo \nSynExpr.Assert \nAssert \nSynExpr.App \nApp \nSynExpr.TypeApp \nTypeApp \nSynExpr.LetOrUse \nLetOrUse \nSynExpr.TryWith \nTryWith \nSynExpr.TryFinally \nTryFinally \nSynExpr.Lazy \nLazy \nSynExpr.Sequential \nSequential \nSynExpr.IfThenElse \nIfThenElse \nSynExpr.Ident \nIdent \nSynExpr.LongIdent \nLongIdent \nSynExpr.LongIdentSet \nLongIdentSet \nSynExpr.DotGet \nDotGet \nSynExpr.DotSet \nDotSet \nSynExpr.Set \nSet \nSynExpr.DotIndexedGet \nDotIndexedGet \nSynExpr.DotIndexedSet \nDotIndexedSet \nSynExpr.NamedIndexedPropertySet \nNamedIndexedPropertySet \nSynExpr.DotNamedIndexedPropertySet \nDotNamedIndexedPropertySet \nSynExpr.TypeTest \nTypeTest \nSynExpr.Upcast \nUpcast \nSynExpr.Downcast \nDowncast \nSynExpr.InferredUpcast \nInferredUpcast \nSynExpr.InferredDowncast \nInferredDowncast \nSynExpr.Null \nNull \nSynExpr.AddressOf \nAddressOf \nSynExpr.TraitCall \nTraitCall \nSynExpr.JoinIn \nJoinIn \nSynExpr.ImplicitZero \nImplicitZero \nSynExpr.SequentialOrImplicitYield \nSequentialOrImplicitYield \nSynExpr.YieldOrReturn \nYieldOrReturn \nSynExpr.YieldOrReturnFrom \nYieldOrReturnFrom \nSynExpr.LetOrUseBang \nLetOrUseBang \nSynExpr.MatchBang \nMatchBang \nSynExpr.DoBang \nDoBang \nSynExpr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \nSynExpr.LibraryOnlyStaticOptimization \nLibraryOnlyStaticOptimization \nSynExpr.LibraryOnlyUnionCaseFieldGet \nLibraryOnlyUnionCaseFieldGet \nSynExpr.LibraryOnlyUnionCaseFieldSet \nLibraryOnlyUnionCaseFieldSet \nSynExpr.ArbitraryAfterError \nArbitraryAfterError \nSynExpr.FromParseError \nFromParseError \nSynExpr.DiscardAfterMissingQualificationAfterDot \nDiscardAfterMissingQualificationAfterDot \nSynExpr.Fixed \nFixed \nSynExpr.InterpolatedString \nInterpolatedString"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Range","title":"SynExpr.Range","content":"SynExpr.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IsArbExprAndThusAlreadyReportedError","title":"SynExpr.IsArbExprAndThusAlreadyReportedError","content":"SynExpr.IsArbExprAndThusAlreadyReportedError \nIsArbExprAndThusAlreadyReportedError \n\n Indicates if this expression arises from error recovery\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#RangeWithoutAnyExtraDot","title":"SynExpr.RangeWithoutAnyExtraDot","content":"SynExpr.RangeWithoutAnyExtraDot \nRangeWithoutAnyExtraDot \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#RangeOfFirstPortion","title":"SynExpr.RangeOfFirstPortion","content":"SynExpr.RangeOfFirstPortion \nRangeOfFirstPortion \n\n Attempt to get the range of the first token or initial portion only - this\n is ad-hoc, just a cheap way to improve a certain \u0027query custom operation\u0027 error range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Paren","title":"SynExpr.Paren","content":"SynExpr.Paren \nParen \n\n F# syntax: (expr)\n\n Parenthesized expressions. Kept in AST to distinguish A.M((x, y))\n from A.M(x, y), among other things.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Quote","title":"SynExpr.Quote","content":"SynExpr.Quote \nQuote \n\n F# syntax: \u003C@ expr @\u003E, \u003C@@ expr @@\u003E\n\n Quote(operator, isRaw, quotedSynExpr, isFromQueryExpression, m)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Const","title":"SynExpr.Const","content":"SynExpr.Const \nConst \n\n F# syntax: 1, 1.3, () etc.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Typed","title":"SynExpr.Typed","content":"SynExpr.Typed \nTyped \n\n F# syntax: expr: type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Tuple","title":"SynExpr.Tuple","content":"SynExpr.Tuple \nTuple \n\n F# syntax: e1, ..., eN\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#AnonRecd","title":"SynExpr.AnonRecd","content":"SynExpr.AnonRecd \nAnonRecd \n\n F# syntax: {| id1=e1; ...; idN=eN |}\n F# syntax: struct {| id1=e1; ...; idN=eN |}\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ArrayOrList","title":"SynExpr.ArrayOrList","content":"SynExpr.ArrayOrList \nArrayOrList \n\n F# syntax: [ e1; ...; en ], [| e1; ...; en |]\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Record","title":"SynExpr.Record","content":"SynExpr.Record \nRecord \n\n F# syntax: { f1=e1; ...; fn=en }\n inherit includes location of separator (for tooling)\n copyOpt contains range of the following WITH part (for tooling)\n every field includes range of separator after the field (for tooling)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#New","title":"SynExpr.New","content":"SynExpr.New \nNew \n\n F# syntax: new C(...)\n The flag is true if known to be \u0027family\u0027 (\u0027protected\u0027) scope\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ObjExpr","title":"SynExpr.ObjExpr","content":"SynExpr.ObjExpr \nObjExpr \n\n F# syntax: { new ... with ... }\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#While","title":"SynExpr.While","content":"SynExpr.While \nWhile \n\n F# syntax: \u0027while ... do ...\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#For","title":"SynExpr.For","content":"SynExpr.For \nFor \n\n F# syntax: \u0027for i = ... to ... do ...\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ForEach","title":"SynExpr.ForEach","content":"SynExpr.ForEach \nForEach \n\n F# syntax: \u0027for ... in ... do ...\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ArrayOrListComputed","title":"SynExpr.ArrayOrListComputed","content":"SynExpr.ArrayOrListComputed \nArrayOrListComputed \n\n F# syntax: [ expr ], [| expr |]\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IndexRange","title":"SynExpr.IndexRange","content":"SynExpr.IndexRange \nIndexRange \n\n F# syntax: expr..\n F# syntax: ..expr\n F# syntax: expr..expr\n F# syntax: *\n A two-element range indexer argument a..b, a.., ..b. Also used to represent\n a range in a list, array or sequence expression.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IndexFromEnd","title":"SynExpr.IndexFromEnd","content":"SynExpr.IndexFromEnd \nIndexFromEnd \n\n F# syntax: ^expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ComputationExpr","title":"SynExpr.ComputationExpr","content":"SynExpr.ComputationExpr \nComputationExpr \n\n F# syntax: { expr }\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Lambda","title":"SynExpr.Lambda","content":"SynExpr.Lambda \nLambda \n\n First bool indicates if lambda originates from a method. Patterns here are always \u0022simple\u0022\n Second bool indicates if this is a \u0022later\u0022 part of an iterated sequence of lambdas\n parsedData keeps original parsed patterns and expression,\n prior to transforming to \u0022simple\u0022 patterns and iterated lambdas \n\n F# syntax: fun pat -\u003E expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#MatchLambda","title":"SynExpr.MatchLambda","content":"SynExpr.MatchLambda \nMatchLambda \n\n F# syntax: function pat1 -\u003E expr | ... | patN -\u003E exprN\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Match","title":"SynExpr.Match","content":"SynExpr.Match \nMatch \n\n F# syntax: match expr with pat1 -\u003E expr | ... | patN -\u003E exprN\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Do","title":"SynExpr.Do","content":"SynExpr.Do \nDo \n\n F# syntax: do expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Assert","title":"SynExpr.Assert","content":"SynExpr.Assert \nAssert \n\n F# syntax: assert expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#App","title":"SynExpr.App","content":"SynExpr.App \nApp \n\n F# syntax: f x\n\n flag: indicates if the application is syntactically atomic, e.g. f.[1] is atomic, but \u0027f x\u0027 is not\n isInfix is true for the first app of an infix operator, e.g. 1\u002B2\n becomes App(App(\u002B, 1), 2), where the inner node is marked isInfix\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#TypeApp","title":"SynExpr.TypeApp","content":"SynExpr.TypeApp \nTypeApp \n\n F# syntax: expr\u003Ctype1, ..., typeN\u003E\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LetOrUse","title":"SynExpr.LetOrUse","content":"SynExpr.LetOrUse \nLetOrUse \n\n F# syntax: let pat = expr in expr\n F# syntax: let f pat1 .. patN = expr in expr\n F# syntax: let rec f pat1 .. patN = expr in expr\n F# syntax: use pat = expr in expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#TryWith","title":"SynExpr.TryWith","content":"SynExpr.TryWith \nTryWith \n\n F# syntax: try expr with pat -\u003E expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#TryFinally","title":"SynExpr.TryFinally","content":"SynExpr.TryFinally \nTryFinally \n\n F# syntax: try expr finally expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Lazy","title":"SynExpr.Lazy","content":"SynExpr.Lazy \nLazy \n\n F# syntax: lazy expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Sequential","title":"SynExpr.Sequential","content":"SynExpr.Sequential \nSequential \n\n F# syntax: expr; expr\n\n  isTrueSeq: false indicates \u0022let v = a in b; v\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#IfThenElse","title":"SynExpr.IfThenElse","content":"SynExpr.IfThenElse \nIfThenElse \n\n F# syntax: if expr then expr\n F# syntax: if expr then expr else expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Ident","title":"SynExpr.Ident","content":"SynExpr.Ident \nIdent \n\n F# syntax: ident\n Optimized representation for SynExpr.LongIdent (false, [id], id.idRange)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LongIdent","title":"SynExpr.LongIdent","content":"SynExpr.LongIdent \nLongIdent \n\n F# syntax: ident.ident...ident\n\n isOptional: true if preceded by a \u0027?\u0027 for an optional named parameter\n altNameRefCell: Normally \u0027None\u0027 except for some compiler-generated\n variables in desugaring pattern matching. See SynSimplePat.Id\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LongIdentSet","title":"SynExpr.LongIdentSet","content":"SynExpr.LongIdentSet \nLongIdentSet \n\n F# syntax: ident.ident...ident \u003C- expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotGet","title":"SynExpr.DotGet","content":"SynExpr.DotGet \nDotGet \n\n F# syntax: expr.ident.ident\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotSet","title":"SynExpr.DotSet","content":"SynExpr.DotSet \nDotSet \n\n F# syntax: expr.ident...ident \u003C- expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Set","title":"SynExpr.Set","content":"SynExpr.Set \nSet \n\n F# syntax: expr \u003C- expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotIndexedGet","title":"SynExpr.DotIndexedGet","content":"SynExpr.DotIndexedGet \nDotIndexedGet \n\n F# syntax: expr.[expr, ..., expr]\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotIndexedSet","title":"SynExpr.DotIndexedSet","content":"SynExpr.DotIndexedSet \nDotIndexedSet \n\n F# syntax: expr.[expr, ..., expr] \u003C- expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#NamedIndexedPropertySet","title":"SynExpr.NamedIndexedPropertySet","content":"SynExpr.NamedIndexedPropertySet \nNamedIndexedPropertySet \n\n F# syntax: Type.Items(e1) \u003C- e2, rarely used named-property-setter notation, e.g. Foo.Bar.Chars(3) \u003C- \u0027a\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DotNamedIndexedPropertySet","title":"SynExpr.DotNamedIndexedPropertySet","content":"SynExpr.DotNamedIndexedPropertySet \nDotNamedIndexedPropertySet \n\n F# syntax: expr.Items (e1) \u003C- e2, rarely used named-property-setter notation, e.g. (stringExpr).Chars(3) \u003C- \u0027a\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#TypeTest","title":"SynExpr.TypeTest","content":"SynExpr.TypeTest \nTypeTest \n\n F# syntax: expr :? type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Upcast","title":"SynExpr.Upcast","content":"SynExpr.Upcast \nUpcast \n\n F# syntax: expr :\u003E type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Downcast","title":"SynExpr.Downcast","content":"SynExpr.Downcast \nDowncast \n\n F# syntax: expr :?\u003E type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#InferredUpcast","title":"SynExpr.InferredUpcast","content":"SynExpr.InferredUpcast \nInferredUpcast \n\n F# syntax: upcast expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#InferredDowncast","title":"SynExpr.InferredDowncast","content":"SynExpr.InferredDowncast \nInferredDowncast \n\n F# syntax: downcast expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Null","title":"SynExpr.Null","content":"SynExpr.Null \nNull \n\n F# syntax: null\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#AddressOf","title":"SynExpr.AddressOf","content":"SynExpr.AddressOf \nAddressOf \n\n F# syntax: \u0026expr, \u0026\u0026expr\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#TraitCall","title":"SynExpr.TraitCall","content":"SynExpr.TraitCall \nTraitCall \n\n F# syntax: ((typar1 or ... or typarN): (member-dig) expr)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#JoinIn","title":"SynExpr.JoinIn","content":"SynExpr.JoinIn \nJoinIn \n\n F# syntax: ... in ...\n Computation expressions only, based on JOIN_IN token from lex filter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ImplicitZero","title":"SynExpr.ImplicitZero","content":"SynExpr.ImplicitZero \nImplicitZero \n\n Used in parser error recovery and internally during type checking for translating computation expressions.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#SequentialOrImplicitYield","title":"SynExpr.SequentialOrImplicitYield","content":"SynExpr.SequentialOrImplicitYield \nSequentialOrImplicitYield \n\n Used internally during type checking for translating computation expressions.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#YieldOrReturn","title":"SynExpr.YieldOrReturn","content":"SynExpr.YieldOrReturn \nYieldOrReturn \n\n F# syntax: yield expr\n F# syntax: return expr\n Computation expressions only\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#YieldOrReturnFrom","title":"SynExpr.YieldOrReturnFrom","content":"SynExpr.YieldOrReturnFrom \nYieldOrReturnFrom \n\n F# syntax: yield! expr\n F# syntax: return! expr\n Computation expressions only\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LetOrUseBang","title":"SynExpr.LetOrUseBang","content":"SynExpr.LetOrUseBang \nLetOrUseBang \n\n F# syntax: let! pat = expr in expr\n F# syntax: use! pat = expr in expr\n F# syntax: let! pat = expr and! ... and! ... and! pat = expr in expr\n Computation expressions only\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#MatchBang","title":"SynExpr.MatchBang","content":"SynExpr.MatchBang \nMatchBang \n\n F# syntax: match! expr with pat1 -\u003E expr | ... | patN -\u003E exprN\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DoBang","title":"SynExpr.DoBang","content":"SynExpr.DoBang \nDoBang \n\n F# syntax: do! expr\n Computation expressions only\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyILAssembly","title":"SynExpr.LibraryOnlyILAssembly","content":"SynExpr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \n\n Only used in FSharp.Core\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyStaticOptimization","title":"SynExpr.LibraryOnlyStaticOptimization","content":"SynExpr.LibraryOnlyStaticOptimization \nLibraryOnlyStaticOptimization \n\n Only used in FSharp.Core\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyUnionCaseFieldGet","title":"SynExpr.LibraryOnlyUnionCaseFieldGet","content":"SynExpr.LibraryOnlyUnionCaseFieldGet \nLibraryOnlyUnionCaseFieldGet \n\n Only used in FSharp.Core\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#LibraryOnlyUnionCaseFieldSet","title":"SynExpr.LibraryOnlyUnionCaseFieldSet","content":"SynExpr.LibraryOnlyUnionCaseFieldSet \nLibraryOnlyUnionCaseFieldSet \n\n Only used in FSharp.Core\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#ArbitraryAfterError","title":"SynExpr.ArbitraryAfterError","content":"SynExpr.ArbitraryAfterError \nArbitraryAfterError \n\n Inserted for error recovery\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#FromParseError","title":"SynExpr.FromParseError","content":"SynExpr.FromParseError \nFromParseError \n\n Inserted for error recovery\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#DiscardAfterMissingQualificationAfterDot","title":"SynExpr.DiscardAfterMissingQualificationAfterDot","content":"SynExpr.DiscardAfterMissingQualificationAfterDot \nDiscardAfterMissingQualificationAfterDot \n\n Inserted for error recovery when there is \u0022expr.\u0022 and missing tokens or error recovery after the dot\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#Fixed","title":"SynExpr.Fixed","content":"SynExpr.Fixed \nFixed \n\n \u0027use x = fixed expr\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexpr.html#InterpolatedString","title":"SynExpr.InterpolatedString","content":"SynExpr.InterpolatedString \nInterpolatedString \n\n F# syntax: interpolated string, e.g. \u0022abc{x}\u0022 or \u0022abc{x,3}\u0022 or \u0022abc{x:N4}\u0022\n Note the string ranges include the quotes, verbatim markers, dollar sign and braces\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexprandbang.html","title":"SynExprAndBang","content":"SynExprAndBang \n \nSynExprAndBang.SynExprAndBang \nSynExprAndBang"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexprandbang.html#SynExprAndBang","title":"SynExprAndBang.SynExprAndBang","content":"SynExprAndBang.SynExprAndBang \nSynExprAndBang \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexprrecordfield.html","title":"SynExprRecordField","content":"SynExprRecordField \n \nSynExprRecordField.SynExprRecordField \nSynExprRecordField"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synexprrecordfield.html#SynExprRecordField","title":"SynExprRecordField.SynExprRecordField","content":"SynExprRecordField.SynExprRecordField \nSynExprRecordField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synfield.html","title":"SynField","content":"SynField \n\n Represents the syntax tree for a field declaration in a record or class\n \nSynField.SynField \nSynField"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synfield.html#SynField","title":"SynField.SynField","content":"SynField.SynField \nSynField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterfaceimpl.html","title":"SynInterfaceImpl","content":"SynInterfaceImpl \n\n Represents a set of bindings that implement an interface\n \nSynInterfaceImpl.SynInterfaceImpl \nSynInterfaceImpl"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterfaceimpl.html#SynInterfaceImpl","title":"SynInterfaceImpl.SynInterfaceImpl","content":"SynInterfaceImpl.SynInterfaceImpl \nSynInterfaceImpl \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html","title":"SynInterpolatedStringPart","content":"SynInterpolatedStringPart \n \nSynInterpolatedStringPart.String \nString \nSynInterpolatedStringPart.FillExpr \nFillExpr"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html#String","title":"SynInterpolatedStringPart.String","content":"SynInterpolatedStringPart.String \nString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syninterpolatedstringpart.html#FillExpr","title":"SynInterpolatedStringPart.FillExpr","content":"SynInterpolatedStringPart.FillExpr \nFillExpr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmatchclause.html","title":"SynMatchClause","content":"SynMatchClause \n\n Represents a clause in a \u0027match\u0027 expression\n \nSynMatchClause.RangeOfGuardAndRhs \nRangeOfGuardAndRhs \nSynMatchClause.Range \nRange \nSynMatchClause.SynMatchClause \nSynMatchClause"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmatchclause.html#RangeOfGuardAndRhs","title":"SynMatchClause.RangeOfGuardAndRhs","content":"SynMatchClause.RangeOfGuardAndRhs \nRangeOfGuardAndRhs \n\n Gets the syntax range of part of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmatchclause.html#Range","title":"SynMatchClause.Range","content":"SynMatchClause.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmatchclause.html#SynMatchClause","title":"SynMatchClause.SynMatchClause","content":"SynMatchClause.SynMatchClause \nSynMatchClause \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html","title":"SynMeasure","content":"SynMeasure \n\n Represents an unchecked syntax tree of F# unit of measure annotations.\n \nSynMeasure.Named \nNamed \nSynMeasure.Product \nProduct \nSynMeasure.Seq \nSeq \nSynMeasure.Divide \nDivide \nSynMeasure.Power \nPower \nSynMeasure.One \nOne \nSynMeasure.Anon \nAnon \nSynMeasure.Var \nVar"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Named","title":"SynMeasure.Named","content":"SynMeasure.Named \nNamed \n\n A named unit of measure\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Product","title":"SynMeasure.Product","content":"SynMeasure.Product \nProduct \n\n A product of two units of measure, e.g. \u0027kg * m\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Seq","title":"SynMeasure.Seq","content":"SynMeasure.Seq \nSeq \n\n A sequence of several units of measure, e.g. \u0027kg m m\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Divide","title":"SynMeasure.Divide","content":"SynMeasure.Divide \nDivide \n\n A division of two units of measure, e.g. \u0027kg / m\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Power","title":"SynMeasure.Power","content":"SynMeasure.Power \nPower \n\n A power of a unit of measure, e.g. \u0027kg ^ 2\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#One","title":"SynMeasure.One","content":"SynMeasure.One \nOne \n\n The \u00271\u0027 unit of measure\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Anon","title":"SynMeasure.Anon","content":"SynMeasure.Anon \nAnon \n\n An anonymous (inferred) unit of measure\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmeasure.html#Var","title":"SynMeasure.Var","content":"SynMeasure.Var \nVar \n\n A variable unit of measure\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html","title":"SynMemberDefn","content":"SynMemberDefn \n\n Represents a definition element within a type definition, e.g. \u0027member ... \u0027 \n \nSynMemberDefn.Range \nRange \nSynMemberDefn.Open \nOpen \nSynMemberDefn.Member \nMember \nSynMemberDefn.ImplicitCtor \nImplicitCtor \nSynMemberDefn.ImplicitInherit \nImplicitInherit \nSynMemberDefn.LetBindings \nLetBindings \nSynMemberDefn.AbstractSlot \nAbstractSlot \nSynMemberDefn.Interface \nInterface \nSynMemberDefn.Inherit \nInherit \nSynMemberDefn.ValField \nValField \nSynMemberDefn.NestedType \nNestedType \nSynMemberDefn.AutoProperty \nAutoProperty"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#Range","title":"SynMemberDefn.Range","content":"SynMemberDefn.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#Open","title":"SynMemberDefn.Open","content":"SynMemberDefn.Open \nOpen \n\n An \u0027open\u0027 definition within a type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#Member","title":"SynMemberDefn.Member","content":"SynMemberDefn.Member \nMember \n\n A \u0027member\u0027 definition within a type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#ImplicitCtor","title":"SynMemberDefn.ImplicitCtor","content":"SynMemberDefn.ImplicitCtor \nImplicitCtor \n\n An implicit constructor definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#ImplicitInherit","title":"SynMemberDefn.ImplicitInherit","content":"SynMemberDefn.ImplicitInherit \nImplicitInherit \n\n An implicit inherit definition, \u0027inherit \u003Ctyp\u003E(args...) as base\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#LetBindings","title":"SynMemberDefn.LetBindings","content":"SynMemberDefn.LetBindings \nLetBindings \n\n A \u0027let\u0027 definition within a class\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#AbstractSlot","title":"SynMemberDefn.AbstractSlot","content":"SynMemberDefn.AbstractSlot \nAbstractSlot \n\n An abstract slot definition within a class or interface\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#Interface","title":"SynMemberDefn.Interface","content":"SynMemberDefn.Interface \nInterface \n\n An interface implementation definition within a class\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#Inherit","title":"SynMemberDefn.Inherit","content":"SynMemberDefn.Inherit \nInherit \n\n An \u0027inherit\u0027 definition within a class\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#ValField","title":"SynMemberDefn.ValField","content":"SynMemberDefn.ValField \nValField \n\n A \u0027val\u0027 definition within a class\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#NestedType","title":"SynMemberDefn.NestedType","content":"SynMemberDefn.NestedType \nNestedType \n\n A nested type definition, a feature that is not implemented\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberdefn.html#AutoProperty","title":"SynMemberDefn.AutoProperty","content":"SynMemberDefn.AutoProperty \nAutoProperty \n\n An auto-property definition, F# syntax: \u0027member val X = expr\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html","title":"SynMemberFlags","content":"SynMemberFlags \n\n Represents the flags for a \u0027member\u0027 declaration\n \nSynMemberFlags.IsInstance \nIsInstance \nSynMemberFlags.IsDispatchSlot \nIsDispatchSlot \nSynMemberFlags.IsOverrideOrExplicitImpl \nIsOverrideOrExplicitImpl \nSynMemberFlags.IsFinal \nIsFinal \nSynMemberFlags.MemberKind \nMemberKind"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#IsInstance","title":"SynMemberFlags.IsInstance","content":"SynMemberFlags.IsInstance \nIsInstance \n\n The member is an instance member (non-static)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#IsDispatchSlot","title":"SynMemberFlags.IsDispatchSlot","content":"SynMemberFlags.IsDispatchSlot \nIsDispatchSlot \n\n The member is a dispatch slot\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#IsOverrideOrExplicitImpl","title":"SynMemberFlags.IsOverrideOrExplicitImpl","content":"SynMemberFlags.IsOverrideOrExplicitImpl \nIsOverrideOrExplicitImpl \n\n The member is an \u0027override\u0027 or explicit interface implementation \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#IsFinal","title":"SynMemberFlags.IsFinal","content":"SynMemberFlags.IsFinal \nIsFinal \n\n The member is \u0027final\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberflags.html#MemberKind","title":"SynMemberFlags.MemberKind","content":"SynMemberFlags.MemberKind \nMemberKind \n\n The kind of the member\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html","title":"SynMemberKind","content":"SynMemberKind \n\n Note the member kind is actually computed partially by a syntax tree transformation in tc.fs\n \nSynMemberKind.ClassConstructor \nClassConstructor \nSynMemberKind.Constructor \nConstructor \nSynMemberKind.Member \nMember \nSynMemberKind.PropertyGet \nPropertyGet \nSynMemberKind.PropertySet \nPropertySet \nSynMemberKind.PropertyGetSet \nPropertyGetSet"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#ClassConstructor","title":"SynMemberKind.ClassConstructor","content":"SynMemberKind.ClassConstructor \nClassConstructor \n\n The member is a class initializer\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#Constructor","title":"SynMemberKind.Constructor","content":"SynMemberKind.Constructor \nConstructor \n\n The member is a object model constructor\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#Member","title":"SynMemberKind.Member","content":"SynMemberKind.Member \nMember \n\n The member kind is not yet determined\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#PropertyGet","title":"SynMemberKind.PropertyGet","content":"SynMemberKind.PropertyGet \nPropertyGet \n\n The member kind is property getter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#PropertySet","title":"SynMemberKind.PropertySet","content":"SynMemberKind.PropertySet \nPropertySet \n\n The member kind is property setter\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmemberkind.html#PropertyGetSet","title":"SynMemberKind.PropertyGetSet","content":"SynMemberKind.PropertyGetSet \nPropertyGetSet \n\n An artificial member kind used prior to the point where a\n get/set property is split into two distinct members.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html","title":"SynMemberSig","content":"SynMemberSig \n\n Represents the syntax tree for a member signature (used in signature files, abstract member declarations\n and member constraints)\n \nSynMemberSig.Range \nRange \nSynMemberSig.Member \nMember \nSynMemberSig.Interface \nInterface \nSynMemberSig.Inherit \nInherit \nSynMemberSig.ValField \nValField \nSynMemberSig.NestedType \nNestedType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#Range","title":"SynMemberSig.Range","content":"SynMemberSig.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#Member","title":"SynMemberSig.Member","content":"SynMemberSig.Member \nMember \n\n A member definition in a type in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#Interface","title":"SynMemberSig.Interface","content":"SynMemberSig.Interface \nInterface \n\n An interface definition in a type in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#Inherit","title":"SynMemberSig.Inherit","content":"SynMemberSig.Inherit \nInherit \n\n An \u0027inherit\u0027 definition in a type in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#ValField","title":"SynMemberSig.ValField","content":"SynMemberSig.ValField \nValField \n\n A \u0027val\u0027 definition in a type in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmembersig.html#NestedType","title":"SynMemberSig.NestedType","content":"SynMemberSig.NestedType \nNestedType \n\n A nested type definition in a signature file (an unimplemented feature)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html","title":"SynModuleDecl","content":"SynModuleDecl \n\n Represents a definition within a module\n \nSynModuleDecl.Range \nRange \nSynModuleDecl.ModuleAbbrev \nModuleAbbrev \nSynModuleDecl.NestedModule \nNestedModule \nSynModuleDecl.Let \nLet \nSynModuleDecl.DoExpr \nDoExpr \nSynModuleDecl.Types \nTypes \nSynModuleDecl.Exception \nException \nSynModuleDecl.Open \nOpen \nSynModuleDecl.Attributes \nAttributes \nSynModuleDecl.HashDirective \nHashDirective \nSynModuleDecl.NamespaceFragment \nNamespaceFragment"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Range","title":"SynModuleDecl.Range","content":"SynModuleDecl.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#ModuleAbbrev","title":"SynModuleDecl.ModuleAbbrev","content":"SynModuleDecl.ModuleAbbrev \nModuleAbbrev \n\n A module abbreviation definition \u0027module X = A.B.C\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#NestedModule","title":"SynModuleDecl.NestedModule","content":"SynModuleDecl.NestedModule \nNestedModule \n\n A nested module definition \u0027module X = ...\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Let","title":"SynModuleDecl.Let","content":"SynModuleDecl.Let \nLet \n\n A \u0027let\u0027 definition within a module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#DoExpr","title":"SynModuleDecl.DoExpr","content":"SynModuleDecl.DoExpr \nDoExpr \n\n A \u0027do expr\u0027 within a module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Types","title":"SynModuleDecl.Types","content":"SynModuleDecl.Types \nTypes \n\n One or more \u0027type\u0027 definitions within a module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Exception","title":"SynModuleDecl.Exception","content":"SynModuleDecl.Exception \nException \n\n An \u0027exception\u0027 definition within a module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Open","title":"SynModuleDecl.Open","content":"SynModuleDecl.Open \nOpen \n\n An \u0027open\u0027 definition within a module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#Attributes","title":"SynModuleDecl.Attributes","content":"SynModuleDecl.Attributes \nAttributes \n\n An attribute definition within a module, for assembly and .NET module attributes\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#HashDirective","title":"SynModuleDecl.HashDirective","content":"SynModuleDecl.HashDirective \nHashDirective \n\n A hash directive within a module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduledecl.html#NamespaceFragment","title":"SynModuleDecl.NamespaceFragment","content":"SynModuleDecl.NamespaceFragment \nNamespaceFragment \n\n A namespace fragment within a module\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespace.html","title":"SynModuleOrNamespace","content":"SynModuleOrNamespace \n\n Represents the definition of a module or namespace\n \nSynModuleOrNamespace.Range \nRange \nSynModuleOrNamespace.SynModuleOrNamespace \nSynModuleOrNamespace"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespace.html#Range","title":"SynModuleOrNamespace.Range","content":"SynModuleOrNamespace.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespace.html#SynModuleOrNamespace","title":"SynModuleOrNamespace.SynModuleOrNamespace","content":"SynModuleOrNamespace.SynModuleOrNamespace \nSynModuleOrNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html","title":"SynModuleOrNamespaceKind","content":"SynModuleOrNamespaceKind \n\n Represents the kind of a module or namespace definition\n \nSynModuleOrNamespaceKind.IsModule \nIsModule \nSynModuleOrNamespaceKind.NamedModule \nNamedModule \nSynModuleOrNamespaceKind.AnonModule \nAnonModule \nSynModuleOrNamespaceKind.DeclaredNamespace \nDeclaredNamespace \nSynModuleOrNamespaceKind.GlobalNamespace \nGlobalNamespace"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#IsModule","title":"SynModuleOrNamespaceKind.IsModule","content":"SynModuleOrNamespaceKind.IsModule \nIsModule \n\n Indicates if this is a module definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#NamedModule","title":"SynModuleOrNamespaceKind.NamedModule","content":"SynModuleOrNamespaceKind.NamedModule \nNamedModule \n\n A module is explicitly named \u0027module N\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#AnonModule","title":"SynModuleOrNamespaceKind.AnonModule","content":"SynModuleOrNamespaceKind.AnonModule \nAnonModule \n\n A module is anonymously named, e.g. a script\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#DeclaredNamespace","title":"SynModuleOrNamespaceKind.DeclaredNamespace","content":"SynModuleOrNamespaceKind.DeclaredNamespace \nDeclaredNamespace \n\n A namespace is explicitly declared\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacekind.html#GlobalNamespace","title":"SynModuleOrNamespaceKind.GlobalNamespace","content":"SynModuleOrNamespaceKind.GlobalNamespace \nGlobalNamespace \n\n A namespace is declared \u0027global\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacesig.html","title":"SynModuleOrNamespaceSig","content":"SynModuleOrNamespaceSig \n\n Represents the definition of a module or namespace in a signature file\n \nSynModuleOrNamespaceSig.Range \nRange \nSynModuleOrNamespaceSig.SynModuleOrNamespaceSig \nSynModuleOrNamespaceSig"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacesig.html#Range","title":"SynModuleOrNamespaceSig.Range","content":"SynModuleOrNamespaceSig.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmoduleornamespacesig.html#SynModuleOrNamespaceSig","title":"SynModuleOrNamespaceSig.SynModuleOrNamespaceSig","content":"SynModuleOrNamespaceSig.SynModuleOrNamespaceSig \nSynModuleOrNamespaceSig \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html","title":"SynModuleSigDecl","content":"SynModuleSigDecl \n\n Represents a definition within a module or namespace in a signature file\n \nSynModuleSigDecl.Range \nRange \nSynModuleSigDecl.ModuleAbbrev \nModuleAbbrev \nSynModuleSigDecl.NestedModule \nNestedModule \nSynModuleSigDecl.Val \nVal \nSynModuleSigDecl.Types \nTypes \nSynModuleSigDecl.Exception \nException \nSynModuleSigDecl.Open \nOpen \nSynModuleSigDecl.HashDirective \nHashDirective \nSynModuleSigDecl.NamespaceFragment \nNamespaceFragment"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Range","title":"SynModuleSigDecl.Range","content":"SynModuleSigDecl.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#ModuleAbbrev","title":"SynModuleSigDecl.ModuleAbbrev","content":"SynModuleSigDecl.ModuleAbbrev \nModuleAbbrev \n\n A module abbreviation definition within a module or namespace in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#NestedModule","title":"SynModuleSigDecl.NestedModule","content":"SynModuleSigDecl.NestedModule \nNestedModule \n\n A nested module definition within a module or namespace in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Val","title":"SynModuleSigDecl.Val","content":"SynModuleSigDecl.Val \nVal \n\n A \u0027val\u0027 definition within a module or namespace in a signature file, corresponding\n to a \u0027let\u0027 definition in the implementation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Types","title":"SynModuleSigDecl.Types","content":"SynModuleSigDecl.Types \nTypes \n\n A set of one or more type definitions within a module or namespace in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Exception","title":"SynModuleSigDecl.Exception","content":"SynModuleSigDecl.Exception \nException \n\n An exception definition within a module or namespace in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#Open","title":"SynModuleSigDecl.Open","content":"SynModuleSigDecl.Open \nOpen \n\n An \u0027open\u0027 definition within a module or namespace in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#HashDirective","title":"SynModuleSigDecl.HashDirective","content":"SynModuleSigDecl.HashDirective \nHashDirective \n\n A hash directive within a module or namespace in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synmodulesigdecl.html#NamespaceFragment","title":"SynModuleSigDecl.NamespaceFragment","content":"SynModuleSigDecl.NamespaceFragment \nNamespaceFragment \n\n A namespace fragment within a namespace in a signature file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synopendecltarget.html","title":"SynOpenDeclTarget","content":"SynOpenDeclTarget \n\n Represents the target of the open declaration\n \nSynOpenDeclTarget.Range \nRange \nSynOpenDeclTarget.ModuleOrNamespace \nModuleOrNamespace \nSynOpenDeclTarget.Type \nType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synopendecltarget.html#Range","title":"SynOpenDeclTarget.Range","content":"SynOpenDeclTarget.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synopendecltarget.html#ModuleOrNamespace","title":"SynOpenDeclTarget.ModuleOrNamespace","content":"SynOpenDeclTarget.ModuleOrNamespace \nModuleOrNamespace \n\n A \u0027open\u0027 declaration\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synopendecltarget.html#Type","title":"SynOpenDeclTarget.Type","content":"SynOpenDeclTarget.Type \nType \n\n A \u0027open type\u0027 declaration\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html","title":"SynPat","content":"SynPat \n\n Represents a syntax tree for an F# pattern\n \nSynPat.Range \nRange \nSynPat.Const \nConst \nSynPat.Wild \nWild \nSynPat.Named \nNamed \nSynPat.Typed \nTyped \nSynPat.Attrib \nAttrib \nSynPat.Or \nOr \nSynPat.Ands \nAnds \nSynPat.As \nAs \nSynPat.LongIdent \nLongIdent \nSynPat.Tuple \nTuple \nSynPat.Paren \nParen \nSynPat.ArrayOrList \nArrayOrList \nSynPat.Record \nRecord \nSynPat.Null \nNull \nSynPat.OptionalVal \nOptionalVal \nSynPat.IsInst \nIsInst \nSynPat.QuoteExpr \nQuoteExpr \nSynPat.DeprecatedCharRange \nDeprecatedCharRange \nSynPat.InstanceMember \nInstanceMember \nSynPat.FromParseError \nFromParseError"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Range","title":"SynPat.Range","content":"SynPat.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Const","title":"SynPat.Const","content":"SynPat.Const \nConst \n\n A constant in a pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Wild","title":"SynPat.Wild","content":"SynPat.Wild \nWild \n\n A wildcard \u0027_\u0027 in a pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Named","title":"SynPat.Named","content":"SynPat.Named \nNamed \n\n A name pattern \u0027ident\u0027 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Typed","title":"SynPat.Typed","content":"SynPat.Typed \nTyped \n\n A typed pattern \u0027pat : type\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Attrib","title":"SynPat.Attrib","content":"SynPat.Attrib \nAttrib \n\n An attributed pattern, used in argument or declaration position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Or","title":"SynPat.Or","content":"SynPat.Or \nOr \n\n A disjunctive pattern \u0027pat1 | pat2\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Ands","title":"SynPat.Ands","content":"SynPat.Ands \nAnds \n\n A conjunctive pattern \u0027pat1 \u0026 pat2\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#As","title":"SynPat.As","content":"SynPat.As \nAs \n\n A conjunctive pattern \u0027pat1 as pat2\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#LongIdent","title":"SynPat.LongIdent","content":"SynPat.LongIdent \nLongIdent \n\n A long identifier pattern possibly with argument patterns\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Tuple","title":"SynPat.Tuple","content":"SynPat.Tuple \nTuple \n\n A tuple pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Paren","title":"SynPat.Paren","content":"SynPat.Paren \nParen \n\n A parenthesized pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#ArrayOrList","title":"SynPat.ArrayOrList","content":"SynPat.ArrayOrList \nArrayOrList \n\n An array or a list as a pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Record","title":"SynPat.Record","content":"SynPat.Record \nRecord \n\n A record pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#Null","title":"SynPat.Null","content":"SynPat.Null \nNull \n\n The \u0027null\u0027 pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#OptionalVal","title":"SynPat.OptionalVal","content":"SynPat.OptionalVal \nOptionalVal \n\n \u0027?id\u0027 -- for optional argument names\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#IsInst","title":"SynPat.IsInst","content":"SynPat.IsInst \nIsInst \n\n A type test pattern \u0027:? type \u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#QuoteExpr","title":"SynPat.QuoteExpr","content":"SynPat.QuoteExpr \nQuoteExpr \n\n \u0026lt;@ expr @\u0026gt;, used for active pattern arguments\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#DeprecatedCharRange","title":"SynPat.DeprecatedCharRange","content":"SynPat.DeprecatedCharRange \nDeprecatedCharRange \n\n Deprecated character range: ranges\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#InstanceMember","title":"SynPat.InstanceMember","content":"SynPat.InstanceMember \nInstanceMember \n\n Used internally in the type checker\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synpat.html#FromParseError","title":"SynPat.FromParseError","content":"SynPat.FromParseError \nFromParseError \n\n A pattern arising from a parse error\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html","title":"SynRationalConst","content":"SynRationalConst \n\n Represents an unchecked syntax tree of F# unit of measure exponents.\n \nSynRationalConst.Integer \nInteger \nSynRationalConst.Rational \nRational \nSynRationalConst.Negate \nNegate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#Integer","title":"SynRationalConst.Integer","content":"SynRationalConst.Integer \nInteger \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#Rational","title":"SynRationalConst.Rational","content":"SynRationalConst.Rational \nRational \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synrationalconst.html#Negate","title":"SynRationalConst.Negate","content":"SynRationalConst.Negate \nNegate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synreturninfo.html","title":"SynReturnInfo","content":"SynReturnInfo \n\n Represents the syntactic elements associated with the \u0022return\u0022 of a function or method. \n \nSynReturnInfo.SynReturnInfo \nSynReturnInfo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synreturninfo.html#SynReturnInfo","title":"SynReturnInfo.SynReturnInfo","content":"SynReturnInfo.SynReturnInfo \nSynReturnInfo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html","title":"SynSimplePat","content":"SynSimplePat \n\n Represents a syntax tree for simple F# patterns\n \nSynSimplePat.Range \nRange \nSynSimplePat.Id \nId \nSynSimplePat.Typed \nTyped \nSynSimplePat.Attrib \nAttrib"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#Range","title":"SynSimplePat.Range","content":"SynSimplePat.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#Id","title":"SynSimplePat.Id","content":"SynSimplePat.Id \nId \n\n Indicates a simple pattern variable.\n\n altNameRefCell:\n   Normally \u0027None\u0027 except for some compiler-generated variables in desugaring pattern matching.\n   Pattern processing sets this reference for hidden variable introduced\n   by desugaring pattern matching in arguments. The info indicates an\n   alternative (compiler generated) identifier to be used because the\n   name of the identifier is already bound.\n\n isCompilerGenerated: true if a compiler generated name\n isThisVal: true if \u0027this\u0027 variable in member\n isOptional: true if a \u0027?\u0027 is in front of the name\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#Typed","title":"SynSimplePat.Typed","content":"SynSimplePat.Typed \nTyped \n\n A type annotated simple pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepat.html#Attrib","title":"SynSimplePat.Attrib","content":"SynSimplePat.Attrib \nAttrib \n\n An attributed simple pattern\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html","title":"SynSimplePatAlternativeIdInfo","content":"SynSimplePatAlternativeIdInfo \n\n Represents the alternative identifier for a simple pattern\n \nSynSimplePatAlternativeIdInfo.Undecided \nUndecided \nSynSimplePatAlternativeIdInfo.Decided \nDecided"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html#Undecided","title":"SynSimplePatAlternativeIdInfo.Undecided","content":"SynSimplePatAlternativeIdInfo.Undecided \nUndecided \n\n We have not decided to use an alternative name in the pattern and related expression\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepatalternativeidinfo.html#Decided","title":"SynSimplePatAlternativeIdInfo.Decided","content":"SynSimplePatAlternativeIdInfo.Decided \nDecided \n\n We have decided to use an alternative name in the pattern and related expression\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepats.html","title":"SynSimplePats","content":"SynSimplePats \n\n Represents a simple set of variable bindings a, (a, b) or (a: Type, b: Type) at a lambda,\n function definition or other binding point, after the elimination of pattern matching\n from the construct, e.g. after changing a \u0022function pat1 -\u003E rule1 | ...\u0022 to a\n \u0022fun v -\u003E match v with ...\u0022\n \nSynSimplePats.Range \nRange \nSynSimplePats.SimplePats \nSimplePats \nSynSimplePats.Typed \nTyped"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepats.html#Range","title":"SynSimplePats.Range","content":"SynSimplePats.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepats.html#SimplePats","title":"SynSimplePats.SimplePats","content":"SynSimplePats.SimplePats \nSimplePats \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synsimplepats.html#Typed","title":"SynSimplePats.Typed","content":"SynSimplePats.Typed \nTyped \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html","title":"SynStaticOptimizationConstraint","content":"SynStaticOptimizationConstraint \n\n Represents a syntax tree for a static optimization constraint in the F# core library\n \nSynStaticOptimizationConstraint.WhenTyparTyconEqualsTycon \nWhenTyparTyconEqualsTycon \nSynStaticOptimizationConstraint.WhenTyparIsStruct \nWhenTyparIsStruct"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html#WhenTyparTyconEqualsTycon","title":"SynStaticOptimizationConstraint.WhenTyparTyconEqualsTycon","content":"SynStaticOptimizationConstraint.WhenTyparTyconEqualsTycon \nWhenTyparTyconEqualsTycon \n\n A static optimization conditional that activates for a particular type instantiation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstaticoptimizationconstraint.html#WhenTyparIsStruct","title":"SynStaticOptimizationConstraint.WhenTyparIsStruct","content":"SynStaticOptimizationConstraint.WhenTyparIsStruct \nWhenTyparIsStruct \n\n A static optimization conditional that activates for a struct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html","title":"SynStringKind","content":"SynStringKind \n\n Indicate if the string had a special format\n \nSynStringKind.Regular \nRegular \nSynStringKind.Verbatim \nVerbatim \nSynStringKind.TripleQuote \nTripleQuote"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html#Regular","title":"SynStringKind.Regular","content":"SynStringKind.Regular \nRegular \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html#Verbatim","title":"SynStringKind.Verbatim","content":"SynStringKind.Verbatim \nVerbatim \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synstringkind.html#TripleQuote","title":"SynStringKind.TripleQuote","content":"SynStringKind.TripleQuote \nTripleQuote \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypar.html","title":"SynTypar","content":"SynTypar \n\n Represents a syntactic type parameter\n \nSynTypar.Range \nRange \nSynTypar.SynTypar \nSynTypar"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypar.html#Range","title":"SynTypar.Range","content":"SynTypar.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypar.html#SynTypar","title":"SynTypar.SynTypar","content":"SynTypar.SynTypar \nSynTypar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecl.html","title":"SynTyparDecl","content":"SynTyparDecl \n\n Represents the explicit declaration of a type parameter\n \nSynTyparDecl.SynTyparDecl \nSynTyparDecl"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecl.html#SynTyparDecl","title":"SynTyparDecl.SynTyparDecl","content":"SynTyparDecl.SynTyparDecl \nSynTyparDecl \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html","title":"SynTyparDecls","content":"SynTyparDecls \n\n List of type parameter declarations with optional type constraints,\n enclosed in \u0060\u003C ... \u003E\u0060 (postfix) or \u0060( ... )\u0060 (prefix), or a single prefix parameter.\n \nSynTyparDecls.TyparDecls \nTyparDecls \nSynTyparDecls.Constraints \nConstraints \nSynTyparDecls.Range \nRange \nSynTyparDecls.PostfixList \nPostfixList \nSynTyparDecls.PrefixList \nPrefixList \nSynTyparDecls.SinglePrefix \nSinglePrefix"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#TyparDecls","title":"SynTyparDecls.TyparDecls","content":"SynTyparDecls.TyparDecls \nTyparDecls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#Constraints","title":"SynTyparDecls.Constraints","content":"SynTyparDecls.Constraints \nConstraints \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#Range","title":"SynTyparDecls.Range","content":"SynTyparDecls.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#PostfixList","title":"SynTyparDecls.PostfixList","content":"SynTyparDecls.PostfixList \nPostfixList \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#PrefixList","title":"SynTyparDecls.PrefixList","content":"SynTyparDecls.PrefixList \nPrefixList \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypardecls.html#SinglePrefix","title":"SynTyparDecls.SinglePrefix","content":"SynTyparDecls.SinglePrefix \nSinglePrefix \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html","title":"SynType","content":"SynType \n\n Represents a syntax tree for F# types\n \nSynType.Range \nRange \nSynType.LongIdent \nLongIdent \nSynType.App \nApp \nSynType.LongIdentApp \nLongIdentApp \nSynType.Tuple \nTuple \nSynType.AnonRecd \nAnonRecd \nSynType.Array \nArray \nSynType.Fun \nFun \nSynType.Var \nVar \nSynType.Anon \nAnon \nSynType.WithGlobalConstraints \nWithGlobalConstraints \nSynType.HashConstraint \nHashConstraint \nSynType.MeasureDivide \nMeasureDivide \nSynType.MeasurePower \nMeasurePower \nSynType.StaticConstant \nStaticConstant \nSynType.StaticConstantExpr \nStaticConstantExpr \nSynType.StaticConstantNamed \nStaticConstantNamed \nSynType.Paren \nParen"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Range","title":"SynType.Range","content":"SynType.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#LongIdent","title":"SynType.LongIdent","content":"SynType.LongIdent \nLongIdent \n\n F# syntax: A.B.C\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#App","title":"SynType.App","content":"SynType.App \nApp \n\n F# syntax: type\u003Ctype, ..., type\u003E or type type or (type, ..., type) type\n   isPostfix: indicates a postfix type application e.g. \u0022int list\u0022 or \u0022(int, string) dict\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#LongIdentApp","title":"SynType.LongIdentApp","content":"SynType.LongIdentApp \nLongIdentApp \n\n F# syntax: type.A.B.C\u003Ctype, ..., type\u003E\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Tuple","title":"SynType.Tuple","content":"SynType.Tuple \nTuple \n\n F# syntax: type * ... * type\n F# syntax: struct (type * ... * type)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#AnonRecd","title":"SynType.AnonRecd","content":"SynType.AnonRecd \nAnonRecd \n\n F# syntax: {| id: type; ...; id: type |}\n F# syntax: struct {| id: type; ...; id: type |}\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Array","title":"SynType.Array","content":"SynType.Array \nArray \n\n F# syntax: type[]\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Fun","title":"SynType.Fun","content":"SynType.Fun \nFun \n\n F# syntax: type -\u003E type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Var","title":"SynType.Var","content":"SynType.Var \nVar \n\n F# syntax: \u0027Var\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Anon","title":"SynType.Anon","content":"SynType.Anon \nAnon \n\n F# syntax: _\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#WithGlobalConstraints","title":"SynType.WithGlobalConstraints","content":"SynType.WithGlobalConstraints \nWithGlobalConstraints \n\n F# syntax: typ with constraints\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#HashConstraint","title":"SynType.HashConstraint","content":"SynType.HashConstraint \nHashConstraint \n\n F# syntax: #type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#MeasureDivide","title":"SynType.MeasureDivide","content":"SynType.MeasureDivide \nMeasureDivide \n\n F# syntax: for units of measure e.g. m / s\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#MeasurePower","title":"SynType.MeasurePower","content":"SynType.MeasurePower \nMeasurePower \n\n F# syntax: for units of measure e.g. m^3, kg^1/2\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#StaticConstant","title":"SynType.StaticConstant","content":"SynType.StaticConstant \nStaticConstant \n\n F# syntax: 1, \u0022abc\u0022 etc, used in parameters to type providers\n For the dimensionless units i.e. 1, and static parameters to provided types\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#StaticConstantExpr","title":"SynType.StaticConstantExpr","content":"SynType.StaticConstantExpr \nStaticConstantExpr \n\n F# syntax: const expr, used in static parameters to type providers\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#StaticConstantNamed","title":"SynType.StaticConstantNamed","content":"SynType.StaticConstantNamed \nStaticConstantNamed \n\n F# syntax: ident=1 etc., used in static parameters to type providers\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntype.html#Paren","title":"SynType.Paren","content":"SynType.Paren \nParen \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html","title":"SynTypeConstraint","content":"SynTypeConstraint \n\n The unchecked abstract syntax tree of F# type constraints\n \nSynTypeConstraint.Range \nRange \nSynTypeConstraint.WhereTyparIsValueType \nWhereTyparIsValueType \nSynTypeConstraint.WhereTyparIsReferenceType \nWhereTyparIsReferenceType \nSynTypeConstraint.WhereTyparIsUnmanaged \nWhereTyparIsUnmanaged \nSynTypeConstraint.WhereTyparSupportsNull \nWhereTyparSupportsNull \nSynTypeConstraint.WhereTyparIsComparable \nWhereTyparIsComparable \nSynTypeConstraint.WhereTyparIsEquatable \nWhereTyparIsEquatable \nSynTypeConstraint.WhereTyparDefaultsToType \nWhereTyparDefaultsToType \nSynTypeConstraint.WhereTyparSubtypeOfType \nWhereTyparSubtypeOfType \nSynTypeConstraint.WhereTyparSupportsMember \nWhereTyparSupportsMember \nSynTypeConstraint.WhereTyparIsEnum \nWhereTyparIsEnum \nSynTypeConstraint.WhereTyparIsDelegate \nWhereTyparIsDelegate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#Range","title":"SynTypeConstraint.Range","content":"SynTypeConstraint.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsValueType","title":"SynTypeConstraint.WhereTyparIsValueType","content":"SynTypeConstraint.WhereTyparIsValueType \nWhereTyparIsValueType \n\n F# syntax: is \u0027typar: struct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsReferenceType","title":"SynTypeConstraint.WhereTyparIsReferenceType","content":"SynTypeConstraint.WhereTyparIsReferenceType \nWhereTyparIsReferenceType \n\n F# syntax: is \u0027typar: not struct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsUnmanaged","title":"SynTypeConstraint.WhereTyparIsUnmanaged","content":"SynTypeConstraint.WhereTyparIsUnmanaged \nWhereTyparIsUnmanaged \n\n F# syntax is \u0027typar: unmanaged\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparSupportsNull","title":"SynTypeConstraint.WhereTyparSupportsNull","content":"SynTypeConstraint.WhereTyparSupportsNull \nWhereTyparSupportsNull \n\n F# syntax is \u0027typar: null\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsComparable","title":"SynTypeConstraint.WhereTyparIsComparable","content":"SynTypeConstraint.WhereTyparIsComparable \nWhereTyparIsComparable \n\n F# syntax is \u0027typar: comparison\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsEquatable","title":"SynTypeConstraint.WhereTyparIsEquatable","content":"SynTypeConstraint.WhereTyparIsEquatable \nWhereTyparIsEquatable \n\n F# syntax is \u0027typar: equality\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparDefaultsToType","title":"SynTypeConstraint.WhereTyparDefaultsToType","content":"SynTypeConstraint.WhereTyparDefaultsToType \nWhereTyparDefaultsToType \n\n F# syntax is default ^T: type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparSubtypeOfType","title":"SynTypeConstraint.WhereTyparSubtypeOfType","content":"SynTypeConstraint.WhereTyparSubtypeOfType \nWhereTyparSubtypeOfType \n\n F# syntax is \u0027typar :\u003E type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparSupportsMember","title":"SynTypeConstraint.WhereTyparSupportsMember","content":"SynTypeConstraint.WhereTyparSupportsMember \nWhereTyparSupportsMember \n\n F# syntax is ^T: (static member MemberName: ^T * int -\u003E ^T)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsEnum","title":"SynTypeConstraint.WhereTyparIsEnum","content":"SynTypeConstraint.WhereTyparIsEnum \nWhereTyparIsEnum \n\n F# syntax is \u0027typar: enum\u003C\u0027UnderlyingType\u003E\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypeconstraint.html#WhereTyparIsDelegate","title":"SynTypeConstraint.WhereTyparIsDelegate","content":"SynTypeConstraint.WhereTyparIsDelegate \nWhereTyparIsDelegate \n\n F# syntax is \u0027typar: delegate\u003C\u0027Args, unit\u003E\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefn.html","title":"SynTypeDefn","content":"SynTypeDefn \n\n Represents a type or exception declaration \u0027type C = ... \u0027 plus\n any additional member definitions for the type\n \nSynTypeDefn.Range \nRange \nSynTypeDefn.SynTypeDefn \nSynTypeDefn"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefn.html#Range","title":"SynTypeDefn.Range","content":"SynTypeDefn.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefn.html#SynTypeDefn","title":"SynTypeDefn.SynTypeDefn","content":"SynTypeDefn.SynTypeDefn \nSynTypeDefn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html","title":"SynTypeDefnKind","content":"SynTypeDefnKind \n\n Represents the kind of a type definition whether explicit or inferred\n \nSynTypeDefnKind.Unspecified \nUnspecified \nSynTypeDefnKind.Class \nClass \nSynTypeDefnKind.Interface \nInterface \nSynTypeDefnKind.Struct \nStruct \nSynTypeDefnKind.Record \nRecord \nSynTypeDefnKind.Union \nUnion \nSynTypeDefnKind.Abbrev \nAbbrev \nSynTypeDefnKind.Opaque \nOpaque \nSynTypeDefnKind.Augmentation \nAugmentation \nSynTypeDefnKind.IL \nIL \nSynTypeDefnKind.Delegate \nDelegate"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Unspecified","title":"SynTypeDefnKind.Unspecified","content":"SynTypeDefnKind.Unspecified \nUnspecified \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Class","title":"SynTypeDefnKind.Class","content":"SynTypeDefnKind.Class \nClass \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Interface","title":"SynTypeDefnKind.Interface","content":"SynTypeDefnKind.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Struct","title":"SynTypeDefnKind.Struct","content":"SynTypeDefnKind.Struct \nStruct \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Record","title":"SynTypeDefnKind.Record","content":"SynTypeDefnKind.Record \nRecord \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Union","title":"SynTypeDefnKind.Union","content":"SynTypeDefnKind.Union \nUnion \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Abbrev","title":"SynTypeDefnKind.Abbrev","content":"SynTypeDefnKind.Abbrev \nAbbrev \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Opaque","title":"SynTypeDefnKind.Opaque","content":"SynTypeDefnKind.Opaque \nOpaque \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Augmentation","title":"SynTypeDefnKind.Augmentation","content":"SynTypeDefnKind.Augmentation \nAugmentation \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#IL","title":"SynTypeDefnKind.IL","content":"SynTypeDefnKind.IL \nIL \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnkind.html#Delegate","title":"SynTypeDefnKind.Delegate","content":"SynTypeDefnKind.Delegate \nDelegate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html","title":"SynTypeDefnRepr","content":"SynTypeDefnRepr \n\n Represents the right hand side of a type or exception declaration \u0027type C = ... \u0027 plus\n any additional member definitions for the type\n \nSynTypeDefnRepr.Range \nRange \nSynTypeDefnRepr.ObjectModel \nObjectModel \nSynTypeDefnRepr.Simple \nSimple \nSynTypeDefnRepr.Exception \nException"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#Range","title":"SynTypeDefnRepr.Range","content":"SynTypeDefnRepr.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#ObjectModel","title":"SynTypeDefnRepr.ObjectModel","content":"SynTypeDefnRepr.ObjectModel \nObjectModel \n\n An object model type definition (class or interface)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#Simple","title":"SynTypeDefnRepr.Simple","content":"SynTypeDefnRepr.Simple \nSimple \n\n A simple type definition (record, union, abbreviation)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnrepr.html#Exception","title":"SynTypeDefnRepr.Exception","content":"SynTypeDefnRepr.Exception \nException \n\n An exception definition\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsig.html","title":"SynTypeDefnSig","content":"SynTypeDefnSig \n\n Represents the syntax tree for a type definition in a signature\n \nSynTypeDefnSig.Range \nRange \nSynTypeDefnSig.SynTypeDefnSig \nSynTypeDefnSig"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsig.html#Range","title":"SynTypeDefnSig.Range","content":"SynTypeDefnSig.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsig.html#SynTypeDefnSig","title":"SynTypeDefnSig.SynTypeDefnSig","content":"SynTypeDefnSig.SynTypeDefnSig \nSynTypeDefnSig \n\n The information for a type definition in a signature\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html","title":"SynTypeDefnSigRepr","content":"SynTypeDefnSigRepr \n\n Represents the syntax tree for the right-hand-side of a type definition in a signature.\n Note: in practice, using a discriminated union to make a distinction between\n \u0022simple\u0022 types and \u0022object oriented\u0022 types is not particularly useful.\n \nSynTypeDefnSigRepr.Range \nRange \nSynTypeDefnSigRepr.ObjectModel \nObjectModel \nSynTypeDefnSigRepr.Simple \nSimple \nSynTypeDefnSigRepr.Exception \nException"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#Range","title":"SynTypeDefnSigRepr.Range","content":"SynTypeDefnSigRepr.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#ObjectModel","title":"SynTypeDefnSigRepr.ObjectModel","content":"SynTypeDefnSigRepr.ObjectModel \nObjectModel \n\n Indicates the right right-hand-side is a class, struct, interface or other object-model type\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#Simple","title":"SynTypeDefnSigRepr.Simple","content":"SynTypeDefnSigRepr.Simple \nSimple \n\n Indicates the right right-hand-side is a record, union or other simple type.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsigrepr.html#Exception","title":"SynTypeDefnSigRepr.Exception","content":"SynTypeDefnSigRepr.Exception \nException \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html","title":"SynTypeDefnSimpleRepr","content":"SynTypeDefnSimpleRepr \n\n Represents the syntax tree for the core of a simple type definition, in either signature\n or implementation.\n \nSynTypeDefnSimpleRepr.Range \nRange \nSynTypeDefnSimpleRepr.Union \nUnion \nSynTypeDefnSimpleRepr.Enum \nEnum \nSynTypeDefnSimpleRepr.Record \nRecord \nSynTypeDefnSimpleRepr.General \nGeneral \nSynTypeDefnSimpleRepr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \nSynTypeDefnSimpleRepr.TypeAbbrev \nTypeAbbrev \nSynTypeDefnSimpleRepr.None \nNone \nSynTypeDefnSimpleRepr.Exception \nException"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Range","title":"SynTypeDefnSimpleRepr.Range","content":"SynTypeDefnSimpleRepr.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Union","title":"SynTypeDefnSimpleRepr.Union","content":"SynTypeDefnSimpleRepr.Union \nUnion \n\n A union type definition, type X = A | B\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Enum","title":"SynTypeDefnSimpleRepr.Enum","content":"SynTypeDefnSimpleRepr.Enum \nEnum \n\n An enum type definition, type X = A = 1 | B = 2\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Record","title":"SynTypeDefnSimpleRepr.Record","content":"SynTypeDefnSimpleRepr.Record \nRecord \n\n A record type definition, type X = { A: int; B: int }\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#General","title":"SynTypeDefnSimpleRepr.General","content":"SynTypeDefnSimpleRepr.General \nGeneral \n\n An object oriented type definition. This is not a parse-tree form, but represents the core\n type representation which the type checker splits out from the \u0022ObjectModel\u0022 cases of type definitions.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#LibraryOnlyILAssembly","title":"SynTypeDefnSimpleRepr.LibraryOnlyILAssembly","content":"SynTypeDefnSimpleRepr.LibraryOnlyILAssembly \nLibraryOnlyILAssembly \n\n A type defined by using an IL assembly representation. Only used in FSharp.Core.\n\n F# syntax: \u0022type X = (# \u0022...\u0022#)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#TypeAbbrev","title":"SynTypeDefnSimpleRepr.TypeAbbrev","content":"SynTypeDefnSimpleRepr.TypeAbbrev \nTypeAbbrev \n\n A type abbreviation, \u0022type X = A.B.C\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#None","title":"SynTypeDefnSimpleRepr.None","content":"SynTypeDefnSimpleRepr.None \nNone \n\n An abstract definition, \u0022type X\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntypedefnsimplerepr.html#Exception","title":"SynTypeDefnSimpleRepr.Exception","content":"SynTypeDefnSimpleRepr.Exception \nException \n\n An exception definition, \u0022exception E = ...\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncase.html","title":"SynUnionCase","content":"SynUnionCase \n\n Represents the syntax tree for one case in a union definition.\n \nSynUnionCase.Range \nRange \nSynUnionCase.SynUnionCase \nSynUnionCase"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncase.html#Range","title":"SynUnionCase.Range","content":"SynUnionCase.Range \nRange \n\n Gets the syntax range of this construct\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncase.html#SynUnionCase","title":"SynUnionCase.SynUnionCase","content":"SynUnionCase.SynUnionCase \nSynUnionCase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncasekind.html","title":"SynUnionCaseKind","content":"SynUnionCaseKind \n\n Represents the syntax tree for the right-hand-side of union definition, excluding members,\n in either a signature or implementation.\n \nSynUnionCaseKind.Fields \nFields \nSynUnionCaseKind.FullType \nFullType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncasekind.html#Fields","title":"SynUnionCaseKind.Fields","content":"SynUnionCaseKind.Fields \nFields \n\n Normal style declaration\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synunioncasekind.html#FullType","title":"SynUnionCaseKind.FullType","content":"SynUnionCaseKind.FullType \nFullType \n\n Full type spec given by \u0027UnionCase: ty1 * tyN -\u003E rty\u0027. Only used in FSharp.Core, otherwise a warning.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvaldata.html","title":"SynValData","content":"SynValData \n\n Represents extra information about the declaration of a value\n \nSynValData.SynValInfo \nSynValInfo \nSynValData.SynValData \nSynValData"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvaldata.html#SynValInfo","title":"SynValData.SynValInfo","content":"SynValData.SynValInfo \nSynValInfo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvaldata.html#SynValData","title":"SynValData.SynValData","content":"SynValData.SynValData \nSynValData \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalinfo.html","title":"SynValInfo","content":"SynValInfo \n\n The argument names and other metadata for a member or function\n \nSynValInfo.CurriedArgInfos \nCurriedArgInfos \nSynValInfo.ArgNames \nArgNames \nSynValInfo.SynValInfo \nSynValInfo"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalinfo.html#CurriedArgInfos","title":"SynValInfo.CurriedArgInfos","content":"SynValInfo.CurriedArgInfos \nCurriedArgInfos \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalinfo.html#ArgNames","title":"SynValInfo.ArgNames","content":"SynValInfo.ArgNames \nArgNames \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalinfo.html#SynValInfo","title":"SynValInfo.SynValInfo","content":"SynValInfo.SynValInfo \nSynValInfo \n\n SynValInfo(curriedArgInfos, returnInfo)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsig.html","title":"SynValSig","content":"SynValSig \n\n Represents the syntax tree for a \u0027val\u0027 definition in an abstract slot or a signature file\n \nSynValSig.RangeOfId \nRangeOfId \nSynValSig.SynType \nSynType \nSynValSig.SynInfo \nSynInfo \nSynValSig.SynValSig \nSynValSig"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsig.html#RangeOfId","title":"SynValSig.RangeOfId","content":"SynValSig.RangeOfId \nRangeOfId \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsig.html#SynType","title":"SynValSig.SynType","content":"SynValSig.SynType \nSynType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsig.html#SynInfo","title":"SynValSig.SynInfo","content":"SynValSig.SynInfo \nSynInfo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvalsig.html#SynValSig","title":"SynValSig.SynValSig","content":"SynValSig.SynValSig \nSynValSig \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvaltypardecls.html","title":"SynValTyparDecls","content":"SynValTyparDecls \n\n Represents the names and other metadata for the type parameters for a member or function\n \nSynValTyparDecls.SynValTyparDecls \nSynValTyparDecls"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-synvaltypardecls.html#SynValTyparDecls","title":"SynValTyparDecls.SynValTyparDecls","content":"SynValTyparDecls.SynValTyparDecls \nSynValTyparDecls \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html","title":"SyntaxNode","content":"SyntaxNode \n\n Used to track route during traversal of syntax using SyntaxTraversal.Traverse\n \nSyntaxNode.SynPat \nSynPat \nSyntaxNode.SynType \nSynType \nSyntaxNode.SynExpr \nSynExpr \nSyntaxNode.SynModule \nSynModule \nSyntaxNode.SynModuleOrNamespace \nSynModuleOrNamespace \nSyntaxNode.SynTypeDefn \nSynTypeDefn \nSyntaxNode.SynMemberDefn \nSynMemberDefn \nSyntaxNode.SynMatchClause \nSynMatchClause \nSyntaxNode.SynBinding \nSynBinding"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynPat","title":"SyntaxNode.SynPat","content":"SyntaxNode.SynPat \nSynPat \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynType","title":"SyntaxNode.SynType","content":"SyntaxNode.SynType \nSynType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynExpr","title":"SyntaxNode.SynExpr","content":"SyntaxNode.SynExpr \nSynExpr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynModule","title":"SyntaxNode.SynModule","content":"SyntaxNode.SynModule \nSynModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynModuleOrNamespace","title":"SyntaxNode.SynModuleOrNamespace","content":"SyntaxNode.SynModuleOrNamespace \nSynModuleOrNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynTypeDefn","title":"SyntaxNode.SynTypeDefn","content":"SyntaxNode.SynTypeDefn \nSynTypeDefn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynMemberDefn","title":"SyntaxNode.SynMemberDefn","content":"SyntaxNode.SynMemberDefn \nSynMemberDefn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynMatchClause","title":"SyntaxNode.SynMatchClause","content":"SyntaxNode.SynMatchClause \nSynMatchClause \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxnode.html#SynBinding","title":"SyntaxNode.SynBinding","content":"SyntaxNode.SynBinding \nSynBinding \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html","title":"SyntaxVisitorBase\u003C\u0027T\u003E","content":"SyntaxVisitorBase\u003C\u0027T\u003E \n \nSyntaxVisitorBase\u003C\u0027T\u003E.( .ctor ) \n( .ctor ) \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitBinding \nVisitBinding \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitComponentInfo \nVisitComponentInfo \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitEnumDefn \nVisitEnumDefn \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitExpr \nVisitExpr \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitHashDirective \nVisitHashDirective \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitImplicitInherit \nVisitImplicitInherit \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitInheritSynMemberDefn \nVisitInheritSynMemberDefn \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitInterfaceSynMemberDefnType \nVisitInterfaceSynMemberDefnType \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitLetOrUse \nVisitLetOrUse \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitMatchClause \nVisitMatchClause \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleDecl \nVisitModuleDecl \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleOrNamespace \nVisitModuleOrNamespace \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitPat \nVisitPat \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordDefn \nVisitRecordDefn \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordField \nVisitRecordField \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitSimplePats \nVisitSimplePats \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitType \nVisitType \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitTypeAbbrev \nVisitTypeAbbrev \nSyntaxVisitorBase\u003C\u0027T\u003E.VisitUnionDefn \nVisitUnionDefn"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#( .ctor )","title":"SyntaxVisitorBase\u003C\u0027T\u003E.( .ctor )","content":"SyntaxVisitorBase\u003C\u0027T\u003E.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitBinding","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitBinding","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitBinding \nVisitBinding \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitComponentInfo","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitComponentInfo","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitComponentInfo \nVisitComponentInfo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitEnumDefn","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitEnumDefn","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitEnumDefn \nVisitEnumDefn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitExpr","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitExpr","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitExpr \nVisitExpr \n\n Controls the behavior when a SynExpr is reached; it can just do \n          defaultTraverse(expr)      if you have no special logic for this node, and want the default processing to pick which sub-node to dive deeper into\n or can inject non-default behavior, which might incorporate: \n          traverseSynExpr(subExpr)   to recurse deeper on some particular sub-expression based on your own logic\n path helps to track AST nodes that were passed during traversal\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitHashDirective","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitHashDirective","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitHashDirective \nVisitHashDirective \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitImplicitInherit","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitImplicitInherit","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitImplicitInherit \nVisitImplicitInherit \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitInheritSynMemberDefn","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitInheritSynMemberDefn","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitInheritSynMemberDefn \nVisitInheritSynMemberDefn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitInterfaceSynMemberDefnType","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitInterfaceSynMemberDefnType","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitInterfaceSynMemberDefnType \nVisitInterfaceSynMemberDefnType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitLetOrUse","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitLetOrUse","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitLetOrUse \nVisitLetOrUse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitMatchClause","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitMatchClause","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitMatchClause \nVisitMatchClause \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitModuleDecl","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleDecl","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleDecl \nVisitModuleDecl \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitModuleOrNamespace","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleOrNamespace","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitModuleOrNamespace \nVisitModuleOrNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitPat","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitPat","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitPat \nVisitPat \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitRecordDefn","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordDefn","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordDefn \nVisitRecordDefn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitRecordField","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordField","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitRecordField \nVisitRecordField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitSimplePats","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitSimplePats","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitSimplePats \nVisitSimplePats \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitType","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitType","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitType \nVisitType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitTypeAbbrev","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitTypeAbbrev","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitTypeAbbrev \nVisitTypeAbbrev \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-syntaxvisitorbase-1.html#VisitUnionDefn","title":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitUnionDefn","content":"SyntaxVisitorBase\u003C\u0027T\u003E.VisitUnionDefn \nVisitUnionDefn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-typarstaticreq.html","title":"TyparStaticReq","content":"TyparStaticReq \n\n Represents whether a type parameter has a static requirement or not (^T or \u0027T)\n \nTyparStaticReq.None \nNone \nTyparStaticReq.HeadType \nHeadType"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-typarstaticreq.html#None","title":"TyparStaticReq.None","content":"TyparStaticReq.None \nNone \n\n The construct is a normal type inference variable\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-syntax-typarstaticreq.html#HeadType","title":"TyparStaticReq.HeadType","content":"TyparStaticReq.HeadType \nHeadType \n\n The construct is a statically inferred type inference variable \u0027^T\u0027\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-line.html","title":"Line","content":"Line \n\n Functions related to converting between lines indexed at 0 and 1\n \nLine.fromZ \nfromZ \nLine.toZ \ntoZ"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-line.html#fromZ","title":"Line.fromZ","content":"Line.fromZ \nfromZ \n\n Convert a line number from zero-based line counting (used by Visual Studio) to one-based line counting (used internally in the F# compiler and in F# error messages) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-line.html#toZ","title":"Line.toZ","content":"Line.toZ \ntoZ \n\n Convert a line number from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html","title":"Position","content":"Position \n \nPosition.mkPos \nmkPos \nPosition.posLt \nposLt \nPosition.posGt \nposGt \nPosition.posEq \nposEq \nPosition.posGeq \nposGeq \nPosition.fromZ \nfromZ \nPosition.toZ \ntoZ \nPosition.outputPos \noutputPos \nPosition.stringOfPos \nstringOfPos \nPosition.pos0 \npos0"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#mkPos","title":"Position.mkPos","content":"Position.mkPos \nmkPos \n\n Create a position for the given line and column\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#posLt","title":"Position.posLt","content":"Position.posLt \nposLt \n\n Compare positions for less-than\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#posGt","title":"Position.posGt","content":"Position.posGt \nposGt \n\n Compare positions for greater-than\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#posEq","title":"Position.posEq","content":"Position.posEq \nposEq \n\n Compare positions for equality\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#posGeq","title":"Position.posGeq","content":"Position.posGeq \nposGeq \n\n Compare positions for greater-than-or-equal-to\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#fromZ","title":"Position.fromZ","content":"Position.fromZ \nfromZ \n\n Convert a position from zero-based line counting (used by Visual Studio) to one-based line counting (used internally in the F# compiler and in F# error messages) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#toZ","title":"Position.toZ","content":"Position.toZ \ntoZ \n\n Convert a position from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#outputPos","title":"Position.outputPos","content":"Position.outputPos \noutputPos \n\n Output a position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#stringOfPos","title":"Position.stringOfPos","content":"Position.stringOfPos \nstringOfPos \n\n Convert a position to a string\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-positionmodule.html#pos0","title":"Position.pos0","content":"Position.pos0 \npos0 \n\n The zero position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html","title":"Range","content":"Range \n \nRange.posOrder \nposOrder \nRange.mkFileIndexRange \nmkFileIndexRange \nRange.mkRange \nmkRange \nRange.mkFirstLineOfFile \nmkFirstLineOfFile \nRange.equals \nequals \nRange.trimRangeToLine \ntrimRangeToLine \nRange.rangeOrder \nrangeOrder \nRange.outputRange \noutputRange \nRange.unionRanges \nunionRanges \nRange.rangeContainsRange \nrangeContainsRange \nRange.rangeContainsPos \nrangeContainsPos \nRange.rangeBeforePos \nrangeBeforePos \nRange.rangeN \nrangeN \nRange.range0 \nrange0 \nRange.rangeStartup \nrangeStartup \nRange.rangeCmdArgs \nrangeCmdArgs \nRange.stringOfRange \nstringOfRange \nRange.toZ \ntoZ \nRange.toFileZ \ntoFileZ \nRange.comparer \ncomparer"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#posOrder","title":"Range.posOrder","content":"Range.posOrder \nposOrder \n\n Ordering on positions\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#mkFileIndexRange","title":"Range.mkFileIndexRange","content":"Range.mkFileIndexRange \nmkFileIndexRange \n\n This view of range marks uses file indexes explicitly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#mkRange","title":"Range.mkRange","content":"Range.mkRange \nmkRange \n\n This view hides the use of file indexes and just uses filenames \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#mkFirstLineOfFile","title":"Range.mkFirstLineOfFile","content":"Range.mkFirstLineOfFile \nmkFirstLineOfFile \n\n Make a range for the first non-whitespace line of the file if any. Otherwise use line 1 chars 0-80.\n This involves reading the file.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#equals","title":"Range.equals","content":"Range.equals \nequals \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#trimRangeToLine","title":"Range.trimRangeToLine","content":"Range.trimRangeToLine \ntrimRangeToLine \n\n Reduce a range so it only covers a line\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeOrder","title":"Range.rangeOrder","content":"Range.rangeOrder \nrangeOrder \n\n not a total order, but enough to sort on ranges \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#outputRange","title":"Range.outputRange","content":"Range.outputRange \noutputRange \n\n Output a range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#unionRanges","title":"Range.unionRanges","content":"Range.unionRanges \nunionRanges \n\n Union two ranges, taking their first occurring start position and last occurring end position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeContainsRange","title":"Range.rangeContainsRange","content":"Range.rangeContainsRange \nrangeContainsRange \n\n Test to see if one range contains another range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeContainsPos","title":"Range.rangeContainsPos","content":"Range.rangeContainsPos \nrangeContainsPos \n\n Test to see if a range contains a position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeBeforePos","title":"Range.rangeBeforePos","content":"Range.rangeBeforePos \nrangeBeforePos \n\n Test to see if a range occurs fully before a position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeN","title":"Range.rangeN","content":"Range.rangeN \nrangeN \n\n Make a dummy range for a file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#range0","title":"Range.range0","content":"Range.range0 \nrange0 \n\n The zero range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeStartup","title":"Range.rangeStartup","content":"Range.rangeStartup \nrangeStartup \n\n A range associated with a dummy file called \u0022startup\u0022\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#rangeCmdArgs","title":"Range.rangeCmdArgs","content":"Range.rangeCmdArgs \nrangeCmdArgs \n\n A range associated with a dummy file for the command line arguments\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#stringOfRange","title":"Range.stringOfRange","content":"Range.stringOfRange \nstringOfRange \n\n Convert a range to a string\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#toZ","title":"Range.toZ","content":"Range.toZ \ntoZ \n\n Convert a range from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#toFileZ","title":"Range.toFileZ","content":"Range.toFileZ \ntoFileZ \n\n Convert a range from one-based line counting (used internally in the F# compiler and in F# error messages) to zero-based line counting (used by Visual Studio)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-rangemodule.html#comparer","title":"Range.comparer","content":"Range.comparer \ncomparer \n\n Equality comparer for range.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-sourcetext.html","title":"SourceText","content":"SourceText \n\n Functions related to ISourceText objects\n \nSourceText.ofString \nofString"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-sourcetext.html#ofString","title":"SourceText.ofString","content":"SourceText.ofString \nofString \n\n Creates an ISourceText object from the given string\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html","title":"TaggedText","content":"TaggedText \n \nTaggedText.tagText \ntagText \nTaggedText.tagClass \ntagClass \nTaggedText.comma \ncomma \nTaggedText.tagNamespace \ntagNamespace \nTaggedText.tagParameter \ntagParameter \nTaggedText.tagSpace \ntagSpace \nTaggedText.dot \ndot \nTaggedText.colon \ncolon \nTaggedText.minus \nminus \nTaggedText.lineBreak \nlineBreak \nTaggedText.space \nspace"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#tagText","title":"TaggedText.tagText","content":"TaggedText.tagText \ntagText \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#tagClass","title":"TaggedText.tagClass","content":"TaggedText.tagClass \ntagClass \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#comma","title":"TaggedText.comma","content":"TaggedText.comma \ncomma \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#tagNamespace","title":"TaggedText.tagNamespace","content":"TaggedText.tagNamespace \ntagNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#tagParameter","title":"TaggedText.tagParameter","content":"TaggedText.tagParameter \ntagParameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#tagSpace","title":"TaggedText.tagSpace","content":"TaggedText.tagSpace \ntagSpace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#dot","title":"TaggedText.dot","content":"TaggedText.dot \ndot \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#colon","title":"TaggedText.colon","content":"TaggedText.colon \ncolon \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#minus","title":"TaggedText.minus","content":"TaggedText.minus \nminus \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#lineBreak","title":"TaggedText.lineBreak","content":"TaggedText.lineBreak \nlineBreak \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtextmodule.html#space","title":"TaggedText.space","content":"TaggedText.space \nspace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html","title":"ISourceText","content":"ISourceText \n\n Represents an input to the F# compiler\n \nISourceText.ContentEquals \nContentEquals \nISourceText.CopyTo \nCopyTo \nISourceText.GetLastCharacterPosition \nGetLastCharacterPosition \nISourceText.GetLineCount \nGetLineCount \nISourceText.GetLineString \nGetLineString \nISourceText.GetSubTextString \nGetSubTextString \nISourceText.SubTextEquals \nSubTextEquals \nISourceText.Item \nItem \nISourceText.Length \nLength"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#ContentEquals","title":"ISourceText.ContentEquals","content":"ISourceText.ContentEquals \nContentEquals \n\n Checks if one input is equal to another\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#CopyTo","title":"ISourceText.CopyTo","content":"ISourceText.CopyTo \nCopyTo \n\n Copies a section of the input to the given destination ad the given index\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#GetLastCharacterPosition","title":"ISourceText.GetLastCharacterPosition","content":"ISourceText.GetLastCharacterPosition \nGetLastCharacterPosition \n\n Gets the last character position in the input, returning line and column\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#GetLineCount","title":"ISourceText.GetLineCount","content":"ISourceText.GetLineCount \nGetLineCount \n\n Gets the count of lines in the input\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#GetLineString","title":"ISourceText.GetLineString","content":"ISourceText.GetLineString \nGetLineString \n\n Gets a line of an input by index\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#GetSubTextString","title":"ISourceText.GetSubTextString","content":"ISourceText.GetSubTextString \nGetSubTextString \n\n Gets a section of the input\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#SubTextEquals","title":"ISourceText.SubTextEquals","content":"ISourceText.SubTextEquals \nSubTextEquals \n\n Checks if a section of the input is equal to the given string\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#Item","title":"ISourceText.Item","content":"ISourceText.Item \nItem \n\n Gets a character in an input based on an index of characters from the start of the file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-isourcetext.html#Length","title":"ISourceText.Length","content":"ISourceText.Length \nLength \n\n Gets the total length of the input in characters\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-line0.html","title":"Line0","content":"Line0 \n\n Represents a line number when using zero-based line counting (used by Visual Studio)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-navigabletaggedtext.html","title":"NavigableTaggedText","content":"NavigableTaggedText \n\n An enhancement to TaggedText in the TaggedText layouts generated by FSharp.Compiler.Service\n \nNavigableTaggedText.Range \nRange"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-navigabletaggedtext.html#Range","title":"NavigableTaggedText.Range","content":"NavigableTaggedText.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-position.html","title":"Position","content":"Position \n\n Represents a position in a file\n \nPosition.Line \nLine \nPosition.Column \nColumn"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-position.html#Line","title":"Position.Line","content":"Position.Line \nLine \n\n The line number for the position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-position.html#Column","title":"Position.Column","content":"Position.Column \nColumn \n\n The column number for the position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html","title":"Range","content":"Range \n\n Represents a range within a file\n \nRange.Start \nStart \nRange.StartColumn \nStartColumn \nRange.EndLine \nEndLine \nRange.StartLine \nStartLine \nRange.StartRange \nStartRange \nRange.FileName \nFileName \nRange.EndColumn \nEndColumn \nRange.IsSynthetic \nIsSynthetic \nRange.End \nEnd \nRange.EndRange \nEndRange \nRange.Zero \nZero"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#Start","title":"Range.Start","content":"Range.Start \nStart \n\n The start position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#StartColumn","title":"Range.StartColumn","content":"Range.StartColumn \nStartColumn \n\n The start column of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#EndLine","title":"Range.EndLine","content":"Range.EndLine \nEndLine \n\n The line number for the end position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#StartLine","title":"Range.StartLine","content":"Range.StartLine \nStartLine \n\n The start line of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#StartRange","title":"Range.StartRange","content":"Range.StartRange \nStartRange \n\n The empty range that is located at the start position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#FileName","title":"Range.FileName","content":"Range.FileName \nFileName \n\n The file name for the file of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#EndColumn","title":"Range.EndColumn","content":"Range.EndColumn \nEndColumn \n\n The column number for the end position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#IsSynthetic","title":"Range.IsSynthetic","content":"Range.IsSynthetic \nIsSynthetic \n\n Synthetic marks ranges which are produced by intermediate compilation phases. This\n bit signifies that the range covers something that should not be visible to language\n service operations like dot-completion.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#End","title":"Range.End","content":"Range.End \nEnd \n\n The end position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#EndRange","title":"Range.EndRange","content":"Range.EndRange \nEndRange \n\n The empty range that is located at the end position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range.html#Zero","title":"Range.Zero","content":"Range.Zero \nZero \n\n The range where all values are zero\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtext.html","title":"TaggedText","content":"TaggedText \n\n Represents text with a tag\n \nTaggedText.( .ctor ) \n( .ctor ) \nTaggedText.Text \nText \nTaggedText.Tag \nTag"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtext.html#( .ctor )","title":"TaggedText.( .ctor )","content":"TaggedText.( .ctor ) \n( .ctor ) \n\n Creates text with a tag\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtext.html#Text","title":"TaggedText.Text","content":"TaggedText.Text \nText \n\n Gets the text\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-taggedtext.html#Tag","title":"TaggedText.Tag","content":"TaggedText.Tag \nTag \n\n Gets the tag\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html","title":"TextTag","content":"TextTag \n\n Represents the tag of some tagged text\n \nTextTag.ActivePatternCase \nActivePatternCase \nTextTag.ActivePatternResult \nActivePatternResult \nTextTag.Alias \nAlias \nTextTag.Class \nClass \nTextTag.Union \nUnion \nTextTag.UnionCase \nUnionCase \nTextTag.Delegate \nDelegate \nTextTag.Enum \nEnum \nTextTag.Event \nEvent \nTextTag.Field \nField \nTextTag.Interface \nInterface \nTextTag.Keyword \nKeyword \nTextTag.LineBreak \nLineBreak \nTextTag.Local \nLocal \nTextTag.Record \nRecord \nTextTag.RecordField \nRecordField \nTextTag.Method \nMethod \nTextTag.Member \nMember \nTextTag.ModuleBinding \nModuleBinding \nTextTag.Function \nFunction \nTextTag.Module \nModule \nTextTag.Namespace \nNamespace \nTextTag.NumericLiteral \nNumericLiteral \nTextTag.Operator \nOperator \nTextTag.Parameter \nParameter \nTextTag.Property \nProperty \nTextTag.Space \nSpace \nTextTag.StringLiteral \nStringLiteral \nTextTag.Struct \nStruct \nTextTag.TypeParameter \nTypeParameter \nTextTag.Text \nText \nTextTag.Punctuation \nPunctuation \nTextTag.UnknownType \nUnknownType \nTextTag.UnknownEntity \nUnknownEntity"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#ActivePatternCase","title":"TextTag.ActivePatternCase","content":"TextTag.ActivePatternCase \nActivePatternCase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#ActivePatternResult","title":"TextTag.ActivePatternResult","content":"TextTag.ActivePatternResult \nActivePatternResult \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Alias","title":"TextTag.Alias","content":"TextTag.Alias \nAlias \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Class","title":"TextTag.Class","content":"TextTag.Class \nClass \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Union","title":"TextTag.Union","content":"TextTag.Union \nUnion \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#UnionCase","title":"TextTag.UnionCase","content":"TextTag.UnionCase \nUnionCase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Delegate","title":"TextTag.Delegate","content":"TextTag.Delegate \nDelegate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Enum","title":"TextTag.Enum","content":"TextTag.Enum \nEnum \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Event","title":"TextTag.Event","content":"TextTag.Event \nEvent \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Field","title":"TextTag.Field","content":"TextTag.Field \nField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Interface","title":"TextTag.Interface","content":"TextTag.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Keyword","title":"TextTag.Keyword","content":"TextTag.Keyword \nKeyword \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#LineBreak","title":"TextTag.LineBreak","content":"TextTag.LineBreak \nLineBreak \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Local","title":"TextTag.Local","content":"TextTag.Local \nLocal \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Record","title":"TextTag.Record","content":"TextTag.Record \nRecord \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#RecordField","title":"TextTag.RecordField","content":"TextTag.RecordField \nRecordField \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Method","title":"TextTag.Method","content":"TextTag.Method \nMethod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Member","title":"TextTag.Member","content":"TextTag.Member \nMember \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#ModuleBinding","title":"TextTag.ModuleBinding","content":"TextTag.ModuleBinding \nModuleBinding \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Function","title":"TextTag.Function","content":"TextTag.Function \nFunction \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Module","title":"TextTag.Module","content":"TextTag.Module \nModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Namespace","title":"TextTag.Namespace","content":"TextTag.Namespace \nNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#NumericLiteral","title":"TextTag.NumericLiteral","content":"TextTag.NumericLiteral \nNumericLiteral \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Operator","title":"TextTag.Operator","content":"TextTag.Operator \nOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Parameter","title":"TextTag.Parameter","content":"TextTag.Parameter \nParameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Property","title":"TextTag.Property","content":"TextTag.Property \nProperty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Space","title":"TextTag.Space","content":"TextTag.Space \nSpace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#StringLiteral","title":"TextTag.StringLiteral","content":"TextTag.StringLiteral \nStringLiteral \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Struct","title":"TextTag.Struct","content":"TextTag.Struct \nStruct \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#TypeParameter","title":"TextTag.TypeParameter","content":"TextTag.TypeParameter \nTypeParameter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Text","title":"TextTag.Text","content":"TextTag.Text \nText \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#Punctuation","title":"TextTag.Punctuation","content":"TextTag.Punctuation \nPunctuation \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#UnknownType","title":"TextTag.UnknownType","content":"TextTag.UnknownType \nUnknownType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-texttag.html#UnknownEntity","title":"TextTag.UnknownEntity","content":"TextTag.UnknownEntity \nUnknownEntity \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-pos.html","title":"pos","content":"pos \n\n Represents a position in a file\n \npos.Line \nLine \npos.Column \nColumn"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-pos.html#Line","title":"pos.Line","content":"pos.Line \nLine \n\n The line number for the position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-pos.html#Column","title":"pos.Column","content":"pos.Column \nColumn \n\n The column number for the position\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html","title":"range","content":"range \n\n Represents a range within a file\n \nrange.Start \nStart \nrange.StartColumn \nStartColumn \nrange.EndLine \nEndLine \nrange.StartLine \nStartLine \nrange.StartRange \nStartRange \nrange.FileName \nFileName \nrange.EndColumn \nEndColumn \nrange.IsSynthetic \nIsSynthetic \nrange.End \nEnd \nrange.EndRange \nEndRange \nrange.Zero \nZero"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#Start","title":"range.Start","content":"range.Start \nStart \n\n The start position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#StartColumn","title":"range.StartColumn","content":"range.StartColumn \nStartColumn \n\n The start column of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#EndLine","title":"range.EndLine","content":"range.EndLine \nEndLine \n\n The line number for the end position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#StartLine","title":"range.StartLine","content":"range.StartLine \nStartLine \n\n The start line of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#StartRange","title":"range.StartRange","content":"range.StartRange \nStartRange \n\n The empty range that is located at the start position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#FileName","title":"range.FileName","content":"range.FileName \nFileName \n\n The file name for the file of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#EndColumn","title":"range.EndColumn","content":"range.EndColumn \nEndColumn \n\n The column number for the end position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#IsSynthetic","title":"range.IsSynthetic","content":"range.IsSynthetic \nIsSynthetic \n\n Synthetic marks ranges which are produced by intermediate compilation phases. This\n bit signifies that the range covers something that should not be visible to language\n service operations like dot-completion.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#End","title":"range.End","content":"range.End \nEnd \n\n The end position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#EndRange","title":"range.EndRange","content":"range.EndRange \nEndRange \n\n The empty range that is located at the end position of the range\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-text-range-0.html#Zero","title":"range.Zero","content":"range.Zero \nZero \n\n The range where all values are zero\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpkeywords.html","title":"FSharpKeywords","content":"FSharpKeywords \n \nFSharpKeywords.DoesIdentifierNeedBackticks \nDoesIdentifierNeedBackticks \nFSharpKeywords.AddBackticksToIdentifierIfNeeded \nAddBackticksToIdentifierIfNeeded \nFSharpKeywords.NormalizeIdentifierBackticks \nNormalizeIdentifierBackticks \nFSharpKeywords.KeywordsWithDescription \nKeywordsWithDescription \nFSharpKeywords.KeywordNames \nKeywordNames"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpkeywords.html#DoesIdentifierNeedBackticks","title":"FSharpKeywords.DoesIdentifierNeedBackticks","content":"FSharpKeywords.DoesIdentifierNeedBackticks \nDoesIdentifierNeedBackticks \n\n Checks if adding backticks to identifier is needed.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpkeywords.html#AddBackticksToIdentifierIfNeeded","title":"FSharpKeywords.AddBackticksToIdentifierIfNeeded","content":"FSharpKeywords.AddBackticksToIdentifierIfNeeded \nAddBackticksToIdentifierIfNeeded \n\n Add backticks if the identifier is a keyword.\n A utility to help determine if an identifier needs to be quoted, this doesn\u0027t quote F# keywords.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpkeywords.html#NormalizeIdentifierBackticks","title":"FSharpKeywords.NormalizeIdentifierBackticks","content":"FSharpKeywords.NormalizeIdentifierBackticks \nNormalizeIdentifierBackticks \n\n Remove backticks if present.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpkeywords.html#KeywordsWithDescription","title":"FSharpKeywords.KeywordsWithDescription","content":"FSharpKeywords.KeywordsWithDescription \nKeywordsWithDescription \n\n Keywords paired with their descriptions. Used in completion and quick info.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpkeywords.html#KeywordNames","title":"FSharpKeywords.KeywordNames","content":"FSharpKeywords.KeywordNames \nKeywordNames \n\n All the keywords in the F# language\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html","title":"FSharpTokenTag","content":"FSharpTokenTag \n\n Some of the values in the field FSharpTokenInfo.Tag\n \nFSharpTokenTag.Identifier \nIdentifier \nFSharpTokenTag.String \nString \nFSharpTokenTag.IDENT \nIDENT \nFSharpTokenTag.STRING \nSTRING \nFSharpTokenTag.INTERP_STRING_BEGIN_END \nINTERP_STRING_BEGIN_END \nFSharpTokenTag.INTERP_STRING_BEGIN_PART \nINTERP_STRING_BEGIN_PART \nFSharpTokenTag.INTERP_STRING_PART \nINTERP_STRING_PART \nFSharpTokenTag.INTERP_STRING_END \nINTERP_STRING_END \nFSharpTokenTag.LPAREN \nLPAREN \nFSharpTokenTag.RPAREN \nRPAREN \nFSharpTokenTag.LBRACK \nLBRACK \nFSharpTokenTag.RBRACK \nRBRACK \nFSharpTokenTag.LBRACE \nLBRACE \nFSharpTokenTag.RBRACE \nRBRACE \nFSharpTokenTag.LBRACK_LESS \nLBRACK_LESS \nFSharpTokenTag.GREATER_RBRACK \nGREATER_RBRACK \nFSharpTokenTag.LESS \nLESS \nFSharpTokenTag.GREATER \nGREATER \nFSharpTokenTag.LBRACK_BAR \nLBRACK_BAR \nFSharpTokenTag.BAR_RBRACK \nBAR_RBRACK \nFSharpTokenTag.PLUS_MINUS_OP \nPLUS_MINUS_OP \nFSharpTokenTag.MINUS \nMINUS \nFSharpTokenTag.STAR \nSTAR \nFSharpTokenTag.INFIX_STAR_DIV_MOD_OP \nINFIX_STAR_DIV_MOD_OP \nFSharpTokenTag.PERCENT_OP \nPERCENT_OP \nFSharpTokenTag.INFIX_AT_HAT_OP \nINFIX_AT_HAT_OP \nFSharpTokenTag.QMARK \nQMARK \nFSharpTokenTag.COLON \nCOLON \nFSharpTokenTag.EQUALS \nEQUALS \nFSharpTokenTag.SEMICOLON \nSEMICOLON \nFSharpTokenTag.COMMA \nCOMMA \nFSharpTokenTag.DOT \nDOT \nFSharpTokenTag.DOT_DOT \nDOT_DOT \nFSharpTokenTag.DOT_DOT_HAT \nDOT_DOT_HAT \nFSharpTokenTag.INT32_DOT_DOT \nINT32_DOT_DOT \nFSharpTokenTag.UNDERSCORE \nUNDERSCORE \nFSharpTokenTag.BAR \nBAR \nFSharpTokenTag.COLON_GREATER \nCOLON_GREATER \nFSharpTokenTag.COLON_QMARK_GREATER \nCOLON_QMARK_GREATER \nFSharpTokenTag.COLON_QMARK \nCOLON_QMARK \nFSharpTokenTag.INFIX_BAR_OP \nINFIX_BAR_OP \nFSharpTokenTag.INFIX_COMPARE_OP \nINFIX_COMPARE_OP \nFSharpTokenTag.COLON_COLON \nCOLON_COLON \nFSharpTokenTag.AMP_AMP \nAMP_AMP \nFSharpTokenTag.PREFIX_OP \nPREFIX_OP \nFSharpTokenTag.COLON_EQUALS \nCOLON_EQUALS \nFSharpTokenTag.BAR_BAR \nBAR_BAR \nFSharpTokenTag.RARROW \nRARROW \nFSharpTokenTag.LARROW \nLARROW \nFSharpTokenTag.QUOTE \nQUOTE \nFSharpTokenTag.WHITESPACE \nWHITESPACE \nFSharpTokenTag.COMMENT \nCOMMENT \nFSharpTokenTag.LINE_COMMENT \nLINE_COMMENT \nFSharpTokenTag.BEGIN \nBEGIN \nFSharpTokenTag.DO \nDO \nFSharpTokenTag.FUNCTION \nFUNCTION \nFSharpTokenTag.THEN \nTHEN \nFSharpTokenTag.ELSE \nELSE \nFSharpTokenTag.STRUCT \nSTRUCT \nFSharpTokenTag.CLASS \nCLASS \nFSharpTokenTag.TRY \nTRY \nFSharpTokenTag.WITH \nWITH \nFSharpTokenTag.OWITH \nOWITH \nFSharpTokenTag.NEW \nNEW"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#Identifier","title":"FSharpTokenTag.Identifier","content":"FSharpTokenTag.Identifier \nIdentifier \n\n Indicates the token is an identifier\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#String","title":"FSharpTokenTag.String","content":"FSharpTokenTag.String \nString \n\n Indicates the token is a string\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#IDENT","title":"FSharpTokenTag.IDENT","content":"FSharpTokenTag.IDENT \nIDENT \n\n Indicates the token is an identifier (synonym for FSharpTokenTag.Identifier)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#STRING","title":"FSharpTokenTag.STRING","content":"FSharpTokenTag.STRING \nSTRING \n\n Indicates the token is a string (synonym for FSharpTokenTag.String)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INTERP_STRING_BEGIN_END","title":"FSharpTokenTag.INTERP_STRING_BEGIN_END","content":"FSharpTokenTag.INTERP_STRING_BEGIN_END \nINTERP_STRING_BEGIN_END \n\n Indicates the token is a part of an interpolated string\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INTERP_STRING_BEGIN_PART","title":"FSharpTokenTag.INTERP_STRING_BEGIN_PART","content":"FSharpTokenTag.INTERP_STRING_BEGIN_PART \nINTERP_STRING_BEGIN_PART \n\n Indicates the token is a part of an interpolated string\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INTERP_STRING_PART","title":"FSharpTokenTag.INTERP_STRING_PART","content":"FSharpTokenTag.INTERP_STRING_PART \nINTERP_STRING_PART \n\n Indicates the token is a part of an interpolated string\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INTERP_STRING_END","title":"FSharpTokenTag.INTERP_STRING_END","content":"FSharpTokenTag.INTERP_STRING_END \nINTERP_STRING_END \n\n Indicates the token is a part of an interpolated string\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LPAREN","title":"FSharpTokenTag.LPAREN","content":"FSharpTokenTag.LPAREN \nLPAREN \n\n Indicates the token is a \u0060(\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#RPAREN","title":"FSharpTokenTag.RPAREN","content":"FSharpTokenTag.RPAREN \nRPAREN \n\n Indicates the token is a \u0060)\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LBRACK","title":"FSharpTokenTag.LBRACK","content":"FSharpTokenTag.LBRACK \nLBRACK \n\n Indicates the token is a \u0060[\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#RBRACK","title":"FSharpTokenTag.RBRACK","content":"FSharpTokenTag.RBRACK \nRBRACK \n\n Indicates the token is a \u0060]\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LBRACE","title":"FSharpTokenTag.LBRACE","content":"FSharpTokenTag.LBRACE \nLBRACE \n\n Indicates the token is a \u0060{\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#RBRACE","title":"FSharpTokenTag.RBRACE","content":"FSharpTokenTag.RBRACE \nRBRACE \n\n Indicates the token is a \u0060}\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LBRACK_LESS","title":"FSharpTokenTag.LBRACK_LESS","content":"FSharpTokenTag.LBRACK_LESS \nLBRACK_LESS \n\n Indicates the token is a \u0060[\u003C\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#GREATER_RBRACK","title":"FSharpTokenTag.GREATER_RBRACK","content":"FSharpTokenTag.GREATER_RBRACK \nGREATER_RBRACK \n\n Indicates the token is a \u0060\u003E]\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LESS","title":"FSharpTokenTag.LESS","content":"FSharpTokenTag.LESS \nLESS \n\n Indicates the token is a \u0060\u003C\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#GREATER","title":"FSharpTokenTag.GREATER","content":"FSharpTokenTag.GREATER \nGREATER \n\n Indicates the token is a \u0060\u003E\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LBRACK_BAR","title":"FSharpTokenTag.LBRACK_BAR","content":"FSharpTokenTag.LBRACK_BAR \nLBRACK_BAR \n\n Indicates the token is a \u0060[|\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#BAR_RBRACK","title":"FSharpTokenTag.BAR_RBRACK","content":"FSharpTokenTag.BAR_RBRACK \nBAR_RBRACK \n\n Indicates the token is a \u0060|]\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#PLUS_MINUS_OP","title":"FSharpTokenTag.PLUS_MINUS_OP","content":"FSharpTokenTag.PLUS_MINUS_OP \nPLUS_MINUS_OP \n\n Indicates the token is a \u0060\u002B\u0060 or \u0060-\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#MINUS","title":"FSharpTokenTag.MINUS","content":"FSharpTokenTag.MINUS \nMINUS \n\n Indicates the token is a \u0060-\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#STAR","title":"FSharpTokenTag.STAR","content":"FSharpTokenTag.STAR \nSTAR \n\n Indicates the token is a \u0060*\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INFIX_STAR_DIV_MOD_OP","title":"FSharpTokenTag.INFIX_STAR_DIV_MOD_OP","content":"FSharpTokenTag.INFIX_STAR_DIV_MOD_OP \nINFIX_STAR_DIV_MOD_OP \n\n Indicates the token is a \u0060%\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#PERCENT_OP","title":"FSharpTokenTag.PERCENT_OP","content":"FSharpTokenTag.PERCENT_OP \nPERCENT_OP \n\n Indicates the token is a \u0060%\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INFIX_AT_HAT_OP","title":"FSharpTokenTag.INFIX_AT_HAT_OP","content":"FSharpTokenTag.INFIX_AT_HAT_OP \nINFIX_AT_HAT_OP \n\n Indicates the token is a \u0060^\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#QMARK","title":"FSharpTokenTag.QMARK","content":"FSharpTokenTag.QMARK \nQMARK \n\n Indicates the token is a \u0060?\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON","title":"FSharpTokenTag.COLON","content":"FSharpTokenTag.COLON \nCOLON \n\n Indicates the token is a \u0060:\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#EQUALS","title":"FSharpTokenTag.EQUALS","content":"FSharpTokenTag.EQUALS \nEQUALS \n\n Indicates the token is a \u0060=\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#SEMICOLON","title":"FSharpTokenTag.SEMICOLON","content":"FSharpTokenTag.SEMICOLON \nSEMICOLON \n\n Indicates the token is a \u0060;\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COMMA","title":"FSharpTokenTag.COMMA","content":"FSharpTokenTag.COMMA \nCOMMA \n\n Indicates the token is a \u0060,\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#DOT","title":"FSharpTokenTag.DOT","content":"FSharpTokenTag.DOT \nDOT \n\n Indicates the token is a \u0060.\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#DOT_DOT","title":"FSharpTokenTag.DOT_DOT","content":"FSharpTokenTag.DOT_DOT \nDOT_DOT \n\n Indicates the token is a \u0060..\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#DOT_DOT_HAT","title":"FSharpTokenTag.DOT_DOT_HAT","content":"FSharpTokenTag.DOT_DOT_HAT \nDOT_DOT_HAT \n\n Indicates the token is a \u0060..\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INT32_DOT_DOT","title":"FSharpTokenTag.INT32_DOT_DOT","content":"FSharpTokenTag.INT32_DOT_DOT \nINT32_DOT_DOT \n\n Indicates the token is a \u0060..^\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#UNDERSCORE","title":"FSharpTokenTag.UNDERSCORE","content":"FSharpTokenTag.UNDERSCORE \nUNDERSCORE \n\n Indicates the token is a \u0060..\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#BAR","title":"FSharpTokenTag.BAR","content":"FSharpTokenTag.BAR \nBAR \n\n Indicates the token is a \u0060_\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON_GREATER","title":"FSharpTokenTag.COLON_GREATER","content":"FSharpTokenTag.COLON_GREATER \nCOLON_GREATER \n\n Indicates the token is a \u0060:\u003E\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON_QMARK_GREATER","title":"FSharpTokenTag.COLON_QMARK_GREATER","content":"FSharpTokenTag.COLON_QMARK_GREATER \nCOLON_QMARK_GREATER \n\n Indicates the token is a \u0060:?\u003E\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON_QMARK","title":"FSharpTokenTag.COLON_QMARK","content":"FSharpTokenTag.COLON_QMARK \nCOLON_QMARK \n\n Indicates the token is a \u0060:?\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INFIX_BAR_OP","title":"FSharpTokenTag.INFIX_BAR_OP","content":"FSharpTokenTag.INFIX_BAR_OP \nINFIX_BAR_OP \n\n Indicates the token is a \u0060|\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#INFIX_COMPARE_OP","title":"FSharpTokenTag.INFIX_COMPARE_OP","content":"FSharpTokenTag.INFIX_COMPARE_OP \nINFIX_COMPARE_OP \n\n Indicates the token is a \u0060|\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON_COLON","title":"FSharpTokenTag.COLON_COLON","content":"FSharpTokenTag.COLON_COLON \nCOLON_COLON \n\n Indicates the token is a \u0060::\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#AMP_AMP","title":"FSharpTokenTag.AMP_AMP","content":"FSharpTokenTag.AMP_AMP \nAMP_AMP \n\n Indicates the token is a \u0060@@\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#PREFIX_OP","title":"FSharpTokenTag.PREFIX_OP","content":"FSharpTokenTag.PREFIX_OP \nPREFIX_OP \n\n Indicates the token is a \u0060~\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COLON_EQUALS","title":"FSharpTokenTag.COLON_EQUALS","content":"FSharpTokenTag.COLON_EQUALS \nCOLON_EQUALS \n\n Indicates the token is a \u0060:=\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#BAR_BAR","title":"FSharpTokenTag.BAR_BAR","content":"FSharpTokenTag.BAR_BAR \nBAR_BAR \n\n Indicates the token is a \u0060||\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#RARROW","title":"FSharpTokenTag.RARROW","content":"FSharpTokenTag.RARROW \nRARROW \n\n Indicates the token is a \u0060-\u003E\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LARROW","title":"FSharpTokenTag.LARROW","content":"FSharpTokenTag.LARROW \nLARROW \n\n Indicates the token is a \u0060\u003C-\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#QUOTE","title":"FSharpTokenTag.QUOTE","content":"FSharpTokenTag.QUOTE \nQUOTE \n\n Indicates the token is a \u0060\u0022\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#WHITESPACE","title":"FSharpTokenTag.WHITESPACE","content":"FSharpTokenTag.WHITESPACE \nWHITESPACE \n\n Indicates the token is a whitespace\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#COMMENT","title":"FSharpTokenTag.COMMENT","content":"FSharpTokenTag.COMMENT \nCOMMENT \n\n Indicates the token is a comment\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#LINE_COMMENT","title":"FSharpTokenTag.LINE_COMMENT","content":"FSharpTokenTag.LINE_COMMENT \nLINE_COMMENT \n\n Indicates the token is a line comment\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#BEGIN","title":"FSharpTokenTag.BEGIN","content":"FSharpTokenTag.BEGIN \nBEGIN \n\n Indicates the token is keyword \u0060begin\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#DO","title":"FSharpTokenTag.DO","content":"FSharpTokenTag.DO \nDO \n\n Indicates the token is keyword \u0060do\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#FUNCTION","title":"FSharpTokenTag.FUNCTION","content":"FSharpTokenTag.FUNCTION \nFUNCTION \n\n Indicates the token is keyword \u0060function\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#THEN","title":"FSharpTokenTag.THEN","content":"FSharpTokenTag.THEN \nTHEN \n\n Indicates the token is keyword \u0060then\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#ELSE","title":"FSharpTokenTag.ELSE","content":"FSharpTokenTag.ELSE \nELSE \n\n Indicates the token is keyword \u0060else\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#STRUCT","title":"FSharpTokenTag.STRUCT","content":"FSharpTokenTag.STRUCT \nSTRUCT \n\n Indicates the token is keyword \u0060struct\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#CLASS","title":"FSharpTokenTag.CLASS","content":"FSharpTokenTag.CLASS \nCLASS \n\n Indicates the token is keyword \u0060class\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#TRY","title":"FSharpTokenTag.TRY","content":"FSharpTokenTag.TRY \nTRY \n\n Indicates the token is keyword \u0060try\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#WITH","title":"FSharpTokenTag.WITH","content":"FSharpTokenTag.WITH \nWITH \n\n Indicates the token is keyword \u0060with\u0060\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#OWITH","title":"FSharpTokenTag.OWITH","content":"FSharpTokenTag.OWITH \nOWITH \n\n Indicates the token is keyword \u0060with\u0060 in #light\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentag.html#NEW","title":"FSharpTokenTag.NEW","content":"FSharpTokenTag.NEW \nNEW \n\n Indicates the token is keyword \u0060new\u0060 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexer.html","title":"FSharpLexer","content":"FSharpLexer \n \nFSharpLexer.Tokenize \nTokenize"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexer.html#Tokenize","title":"FSharpLexer.Tokenize","content":"FSharpLexer.Tokenize \nTokenize \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html","title":"FSharpLexerFlags","content":"FSharpLexerFlags \n \nFSharpLexerFlags.Default \nDefault \nFSharpLexerFlags.LightSyntaxOn \nLightSyntaxOn \nFSharpLexerFlags.Compiling \nCompiling \nFSharpLexerFlags.CompilingFSharpCore \nCompilingFSharpCore \nFSharpLexerFlags.SkipTrivia \nSkipTrivia \nFSharpLexerFlags.UseLexFilter \nUseLexFilter"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#Default","title":"FSharpLexerFlags.Default","content":"FSharpLexerFlags.Default \nDefault \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#LightSyntaxOn","title":"FSharpLexerFlags.LightSyntaxOn","content":"FSharpLexerFlags.LightSyntaxOn \nLightSyntaxOn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#Compiling","title":"FSharpLexerFlags.Compiling","content":"FSharpLexerFlags.Compiling \nCompiling \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#CompilingFSharpCore","title":"FSharpLexerFlags.CompilingFSharpCore","content":"FSharpLexerFlags.CompilingFSharpCore \nCompilingFSharpCore \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#SkipTrivia","title":"FSharpLexerFlags.SkipTrivia","content":"FSharpLexerFlags.SkipTrivia \nSkipTrivia \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplexerflags.html#UseLexFilter","title":"FSharpLexerFlags.UseLexFilter","content":"FSharpLexerFlags.UseLexFilter \nUseLexFilter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplinetokenizer.html","title":"FSharpLineTokenizer","content":"FSharpLineTokenizer \n\n Object to tokenize a line of F# source code, starting with the given lexState.  The lexState should be FSharpTokenizerLexState.Initial for\n the first line of text. Returns an array of ranges of the text and two enumerations categorizing the\n tokens and characters covered by that range, i.e. FSharpTokenColorKind and FSharpTokenCharKind.  The enumerations\n are somewhat adhoc but useful enough to give good colorization options to the user in an IDE.\n\n A new lexState is also returned.  An IDE-plugin should in general cache the lexState \n values for each line of the edited code.\n \nFSharpLineTokenizer.ScanToken \nScanToken \nFSharpLineTokenizer.ColorStateOfLexState \nColorStateOfLexState \nFSharpLineTokenizer.LexStateOfColorState \nLexStateOfColorState"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplinetokenizer.html#ScanToken","title":"FSharpLineTokenizer.ScanToken","content":"FSharpLineTokenizer.ScanToken \nScanToken \n\n Scan one token from the line\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplinetokenizer.html#ColorStateOfLexState","title":"FSharpLineTokenizer.ColorStateOfLexState","content":"FSharpLineTokenizer.ColorStateOfLexState \nColorStateOfLexState \n\n Get the color state from the lexer state\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharplinetokenizer.html#LexStateOfColorState","title":"FSharpLineTokenizer.LexStateOfColorState","content":"FSharpLineTokenizer.LexStateOfColorState \nLexStateOfColorState \n\n Get a default lexer state for a color state.\n\n NOTE: This may result in an inaccurate lexer state\n not taking into account things such as the #if/#endif and string interpolation context\n within the file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpsourcetokenizer.html","title":"FSharpSourceTokenizer","content":"FSharpSourceTokenizer \n\n Tokenizer for a source file. Holds some expensive-to-compute resources at the scope of the file.\n \nFSharpSourceTokenizer.( .ctor ) \n( .ctor ) \nFSharpSourceTokenizer.CreateBufferTokenizer \nCreateBufferTokenizer \nFSharpSourceTokenizer.CreateLineTokenizer \nCreateLineTokenizer"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpsourcetokenizer.html#( .ctor )","title":"FSharpSourceTokenizer.( .ctor )","content":"FSharpSourceTokenizer.( .ctor ) \n( .ctor ) \n\n Create a tokenizer for a source file.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpsourcetokenizer.html#CreateBufferTokenizer","title":"FSharpSourceTokenizer.CreateBufferTokenizer","content":"FSharpSourceTokenizer.CreateBufferTokenizer \nCreateBufferTokenizer \n\n Create a tokenizer for a line of this source file using a buffer filler\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharpsourcetokenizer.html#CreateLineTokenizer","title":"FSharpSourceTokenizer.CreateLineTokenizer","content":"FSharpSourceTokenizer.CreateLineTokenizer \nCreateLineTokenizer \n\n Create a tokenizer for a line of this source file\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html","title":"FSharpToken","content":"FSharpToken \n \nFSharpToken.IsKeyword \nIsKeyword \nFSharpToken.IsIdentifier \nIsIdentifier \nFSharpToken.IsNumericLiteral \nIsNumericLiteral \nFSharpToken.IsStringLiteral \nIsStringLiteral \nFSharpToken.Range \nRange \nFSharpToken.Kind \nKind \nFSharpToken.IsCommentTrivia \nIsCommentTrivia \nFSharpToken.tok \ntok \nFSharpToken.tokRange \ntokRange"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#IsKeyword","title":"FSharpToken.IsKeyword","content":"FSharpToken.IsKeyword \nIsKeyword \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#IsIdentifier","title":"FSharpToken.IsIdentifier","content":"FSharpToken.IsIdentifier \nIsIdentifier \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#IsNumericLiteral","title":"FSharpToken.IsNumericLiteral","content":"FSharpToken.IsNumericLiteral \nIsNumericLiteral \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#IsStringLiteral","title":"FSharpToken.IsStringLiteral","content":"FSharpToken.IsStringLiteral \nIsStringLiteral \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#Range","title":"FSharpToken.Range","content":"FSharpToken.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#Kind","title":"FSharpToken.Kind","content":"FSharpToken.Kind \nKind \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#IsCommentTrivia","title":"FSharpToken.IsCommentTrivia","content":"FSharpToken.IsCommentTrivia \nIsCommentTrivia \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#tok","title":"FSharpToken.tok","content":"FSharpToken.tok \ntok \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptoken.html#tokRange","title":"FSharpToken.tokRange","content":"FSharpToken.tokRange \ntokRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html","title":"FSharpTokenCharKind","content":"FSharpTokenCharKind \n\n Gives an indication of the class to assign to the characters of the token an IDE\n \nFSharpTokenCharKind.Default \nDefault \nFSharpTokenCharKind.Text \nText \nFSharpTokenCharKind.Keyword \nKeyword \nFSharpTokenCharKind.Identifier \nIdentifier \nFSharpTokenCharKind.String \nString \nFSharpTokenCharKind.Literal \nLiteral \nFSharpTokenCharKind.Operator \nOperator \nFSharpTokenCharKind.Delimiter \nDelimiter \nFSharpTokenCharKind.WhiteSpace \nWhiteSpace \nFSharpTokenCharKind.LineComment \nLineComment \nFSharpTokenCharKind.Comment \nComment"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Default","title":"FSharpTokenCharKind.Default","content":"FSharpTokenCharKind.Default \nDefault \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Text","title":"FSharpTokenCharKind.Text","content":"FSharpTokenCharKind.Text \nText \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Keyword","title":"FSharpTokenCharKind.Keyword","content":"FSharpTokenCharKind.Keyword \nKeyword \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Identifier","title":"FSharpTokenCharKind.Identifier","content":"FSharpTokenCharKind.Identifier \nIdentifier \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#String","title":"FSharpTokenCharKind.String","content":"FSharpTokenCharKind.String \nString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Literal","title":"FSharpTokenCharKind.Literal","content":"FSharpTokenCharKind.Literal \nLiteral \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Operator","title":"FSharpTokenCharKind.Operator","content":"FSharpTokenCharKind.Operator \nOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Delimiter","title":"FSharpTokenCharKind.Delimiter","content":"FSharpTokenCharKind.Delimiter \nDelimiter \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#WhiteSpace","title":"FSharpTokenCharKind.WhiteSpace","content":"FSharpTokenCharKind.WhiteSpace \nWhiteSpace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#LineComment","title":"FSharpTokenCharKind.LineComment","content":"FSharpTokenCharKind.LineComment \nLineComment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencharkind.html#Comment","title":"FSharpTokenCharKind.Comment","content":"FSharpTokenCharKind.Comment \nComment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html","title":"FSharpTokenColorKind","content":"FSharpTokenColorKind \n\n Gives an indication of the color class to assign to the token an IDE\n \nFSharpTokenColorKind.Default \nDefault \nFSharpTokenColorKind.Text \nText \nFSharpTokenColorKind.Keyword \nKeyword \nFSharpTokenColorKind.Comment \nComment \nFSharpTokenColorKind.Identifier \nIdentifier \nFSharpTokenColorKind.String \nString \nFSharpTokenColorKind.UpperIdentifier \nUpperIdentifier \nFSharpTokenColorKind.InactiveCode \nInactiveCode \nFSharpTokenColorKind.PreprocessorKeyword \nPreprocessorKeyword \nFSharpTokenColorKind.Number \nNumber \nFSharpTokenColorKind.Operator \nOperator \nFSharpTokenColorKind.Punctuation \nPunctuation"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Default","title":"FSharpTokenColorKind.Default","content":"FSharpTokenColorKind.Default \nDefault \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Text","title":"FSharpTokenColorKind.Text","content":"FSharpTokenColorKind.Text \nText \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Keyword","title":"FSharpTokenColorKind.Keyword","content":"FSharpTokenColorKind.Keyword \nKeyword \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Comment","title":"FSharpTokenColorKind.Comment","content":"FSharpTokenColorKind.Comment \nComment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Identifier","title":"FSharpTokenColorKind.Identifier","content":"FSharpTokenColorKind.Identifier \nIdentifier \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#String","title":"FSharpTokenColorKind.String","content":"FSharpTokenColorKind.String \nString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#UpperIdentifier","title":"FSharpTokenColorKind.UpperIdentifier","content":"FSharpTokenColorKind.UpperIdentifier \nUpperIdentifier \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#InactiveCode","title":"FSharpTokenColorKind.InactiveCode","content":"FSharpTokenColorKind.InactiveCode \nInactiveCode \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#PreprocessorKeyword","title":"FSharpTokenColorKind.PreprocessorKeyword","content":"FSharpTokenColorKind.PreprocessorKeyword \nPreprocessorKeyword \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Number","title":"FSharpTokenColorKind.Number","content":"FSharpTokenColorKind.Number \nNumber \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Operator","title":"FSharpTokenColorKind.Operator","content":"FSharpTokenColorKind.Operator \nOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokencolorkind.html#Punctuation","title":"FSharpTokenColorKind.Punctuation","content":"FSharpTokenColorKind.Punctuation \nPunctuation \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html","title":"FSharpTokenInfo","content":"FSharpTokenInfo \n\n Information about a particular token from the tokenizer\n \nFSharpTokenInfo.LeftColumn \nLeftColumn \nFSharpTokenInfo.RightColumn \nRightColumn \nFSharpTokenInfo.ColorClass \nColorClass \nFSharpTokenInfo.CharClass \nCharClass \nFSharpTokenInfo.FSharpTokenTriggerClass \nFSharpTokenTriggerClass \nFSharpTokenInfo.Tag \nTag \nFSharpTokenInfo.TokenName \nTokenName \nFSharpTokenInfo.FullMatchedLength \nFullMatchedLength"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#LeftColumn","title":"FSharpTokenInfo.LeftColumn","content":"FSharpTokenInfo.LeftColumn \nLeftColumn \n\n Left column of the token.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#RightColumn","title":"FSharpTokenInfo.RightColumn","content":"FSharpTokenInfo.RightColumn \nRightColumn \n\n Right column of the token.\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#ColorClass","title":"FSharpTokenInfo.ColorClass","content":"FSharpTokenInfo.ColorClass \nColorClass \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#CharClass","title":"FSharpTokenInfo.CharClass","content":"FSharpTokenInfo.CharClass \nCharClass \n\n Gives an indication of the class to assign to the token an IDE\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#FSharpTokenTriggerClass","title":"FSharpTokenInfo.FSharpTokenTriggerClass","content":"FSharpTokenInfo.FSharpTokenTriggerClass \nFSharpTokenTriggerClass \n\n Actions taken when the token is typed\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#Tag","title":"FSharpTokenInfo.Tag","content":"FSharpTokenInfo.Tag \nTag \n\n The tag is an integer identifier for the token\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#TokenName","title":"FSharpTokenInfo.TokenName","content":"FSharpTokenInfo.TokenName \nTokenName \n\n Provides additional information about the token\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokeninfo.html#FullMatchedLength","title":"FSharpTokenInfo.FullMatchedLength","content":"FSharpTokenInfo.FullMatchedLength \nFullMatchedLength \n\n The full length consumed by this match, including delayed tokens (which can be ignored in naive lexers)\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html","title":"FSharpTokenKind","content":"FSharpTokenKind \n \nFSharpTokenKind.None \nNone \nFSharpTokenKind.HashIf \nHashIf \nFSharpTokenKind.HashElse \nHashElse \nFSharpTokenKind.HashEndIf \nHashEndIf \nFSharpTokenKind.CommentTrivia \nCommentTrivia \nFSharpTokenKind.WhitespaceTrivia \nWhitespaceTrivia \nFSharpTokenKind.HashLine \nHashLine \nFSharpTokenKind.HashLight \nHashLight \nFSharpTokenKind.InactiveCode \nInactiveCode \nFSharpTokenKind.LineCommentTrivia \nLineCommentTrivia \nFSharpTokenKind.StringText \nStringText \nFSharpTokenKind.Fixed \nFixed \nFSharpTokenKind.OffsideInterfaceMember \nOffsideInterfaceMember \nFSharpTokenKind.OffsideBlockEnd \nOffsideBlockEnd \nFSharpTokenKind.OffsideRightBlockEnd \nOffsideRightBlockEnd \nFSharpTokenKind.OffsideDeclEnd \nOffsideDeclEnd \nFSharpTokenKind.OffsideEnd \nOffsideEnd \nFSharpTokenKind.OffsideBlockSep \nOffsideBlockSep \nFSharpTokenKind.OffsideBlockBegin \nOffsideBlockBegin \nFSharpTokenKind.OffsideReset \nOffsideReset \nFSharpTokenKind.OffsideFun \nOffsideFun \nFSharpTokenKind.OffsideFunction \nOffsideFunction \nFSharpTokenKind.OffsideWith \nOffsideWith \nFSharpTokenKind.OffsideElse \nOffsideElse \nFSharpTokenKind.OffsideThen \nOffsideThen \nFSharpTokenKind.OffsideDoBang \nOffsideDoBang \nFSharpTokenKind.OffsideDo \nOffsideDo \nFSharpTokenKind.OffsideBinder \nOffsideBinder \nFSharpTokenKind.OffsideLet \nOffsideLet \nFSharpTokenKind.HighPrecedenceTypeApp \nHighPrecedenceTypeApp \nFSharpTokenKind.HighPrecedenceParenthesisApp \nHighPrecedenceParenthesisApp \nFSharpTokenKind.HighPrecedenceBracketApp \nHighPrecedenceBracketApp \nFSharpTokenKind.Extern \nExtern \nFSharpTokenKind.Void \nVoid \nFSharpTokenKind.Public \nPublic \nFSharpTokenKind.Private \nPrivate \nFSharpTokenKind.Internal \nInternal \nFSharpTokenKind.Global \nGlobal \nFSharpTokenKind.Static \nStatic \nFSharpTokenKind.Member \nMember \nFSharpTokenKind.Class \nClass \nFSharpTokenKind.Abstract \nAbstract \nFSharpTokenKind.Override \nOverride \nFSharpTokenKind.Default \nDefault \nFSharpTokenKind.Constructor \nConstructor \nFSharpTokenKind.Inherit \nInherit \nFSharpTokenKind.GreaterRightBracket \nGreaterRightBracket \nFSharpTokenKind.Struct \nStruct \nFSharpTokenKind.Sig \nSig \nFSharpTokenKind.Bar \nBar \nFSharpTokenKind.RightBracket \nRightBracket \nFSharpTokenKind.RightBrace \nRightBrace \nFSharpTokenKind.Minus \nMinus \nFSharpTokenKind.Dollar \nDollar \nFSharpTokenKind.BarRightBracket \nBarRightBracket \nFSharpTokenKind.BarRightBrace \nBarRightBrace \nFSharpTokenKind.Underscore \nUnderscore \nFSharpTokenKind.Semicolon \nSemicolon \nFSharpTokenKind.SemicolonSemicolon \nSemicolonSemicolon \nFSharpTokenKind.LeftArrow \nLeftArrow \nFSharpTokenKind.Equals \nEquals \nFSharpTokenKind.LeftBracket \nLeftBracket \nFSharpTokenKind.LeftBracketBar \nLeftBracketBar \nFSharpTokenKind.LeftBraceBar \nLeftBraceBar \nFSharpTokenKind.LeftBracketLess \nLeftBracketLess \nFSharpTokenKind.LeftBrace \nLeftBrace \nFSharpTokenKind.QuestionMark \nQuestionMark \nFSharpTokenKind.QuestionMarkQuestionMark \nQuestionMarkQuestionMark \nFSharpTokenKind.Dot \nDot \nFSharpTokenKind.Colon \nColon \nFSharpTokenKind.ColonColon \nColonColon \nFSharpTokenKind.ColonGreater \nColonGreater \nFSharpTokenKind.ColonQuestionMark \nColonQuestionMark \nFSharpTokenKind.ColonQuestionMarkGreater \nColonQuestionMarkGreater \nFSharpTokenKind.ColonEquals \nColonEquals \nFSharpTokenKind.When \nWhen \nFSharpTokenKind.While \nWhile \nFSharpTokenKind.With \nWith \nFSharpTokenKind.Hash \nHash \nFSharpTokenKind.Ampersand \nAmpersand \nFSharpTokenKind.AmpersandAmpersand \nAmpersandAmpersand \nFSharpTokenKind.Quote \nQuote \nFSharpTokenKind.LeftParenthesis \nLeftParenthesis \nFSharpTokenKind.RightParenthesis \nRightParenthesis \nFSharpTokenKind.Star \nStar \nFSharpTokenKind.Comma \nComma \nFSharpTokenKind.RightArrow \nRightArrow \nFSharpTokenKind.GreaterBarRightBracket \nGreaterBarRightBracket \nFSharpTokenKind.LeftParenthesisStarRightParenthesis \nLeftParenthesisStarRightParenthesis \nFSharpTokenKind.Open \nOpen \nFSharpTokenKind.Or \nOr \nFSharpTokenKind.Rec \nRec \nFSharpTokenKind.Then \nThen \nFSharpTokenKind.To \nTo \nFSharpTokenKind.True \nTrue \nFSharpTokenKind.Try \nTry \nFSharpTokenKind.Type \nType \nFSharpTokenKind.Val \nVal \nFSharpTokenKind.Inline \nInline \nFSharpTokenKind.Interface \nInterface \nFSharpTokenKind.Instance \nInstance \nFSharpTokenKind.Const \nConst \nFSharpTokenKind.Lazy \nLazy \nFSharpTokenKind.OffsideLazy \nOffsideLazy \nFSharpTokenKind.Match \nMatch \nFSharpTokenKind.MatchBang \nMatchBang \nFSharpTokenKind.Mutable \nMutable \nFSharpTokenKind.New \nNew \nFSharpTokenKind.Of \nOf \nFSharpTokenKind.Exception \nException \nFSharpTokenKind.False \nFalse \nFSharpTokenKind.For \nFor \nFSharpTokenKind.Fun \nFun \nFSharpTokenKind.Function \nFunction \nFSharpTokenKind.If \nIf \nFSharpTokenKind.In \nIn \nFSharpTokenKind.JoinIn \nJoinIn \nFSharpTokenKind.Finally \nFinally \nFSharpTokenKind.DoBang \nDoBang \nFSharpTokenKind.And \nAnd \nFSharpTokenKind.As \nAs \nFSharpTokenKind.Assert \nAssert \nFSharpTokenKind.OffsideAssert \nOffsideAssert \nFSharpTokenKind.Begin \nBegin \nFSharpTokenKind.Do \nDo \nFSharpTokenKind.Done \nDone \nFSharpTokenKind.DownTo \nDownTo \nFSharpTokenKind.Else \nElse \nFSharpTokenKind.Elif \nElif \nFSharpTokenKind.End \nEnd \nFSharpTokenKind.DotDot \nDotDot \nFSharpTokenKind.DotDotHat \nDotDotHat \nFSharpTokenKind.BarBar \nBarBar \nFSharpTokenKind.Upcast \nUpcast \nFSharpTokenKind.Downcast \nDowncast \nFSharpTokenKind.Null \nNull \nFSharpTokenKind.Reserved \nReserved \nFSharpTokenKind.Module \nModule \nFSharpTokenKind.Namespace \nNamespace \nFSharpTokenKind.Delegate \nDelegate \nFSharpTokenKind.Constraint \nConstraint \nFSharpTokenKind.Base \nBase \nFSharpTokenKind.LeftQuote \nLeftQuote \nFSharpTokenKind.RightQuote \nRightQuote \nFSharpTokenKind.RightQuoteDot \nRightQuoteDot \nFSharpTokenKind.PercentOperator \nPercentOperator \nFSharpTokenKind.Binder \nBinder \nFSharpTokenKind.Less \nLess \nFSharpTokenKind.Greater \nGreater \nFSharpTokenKind.Let \nLet \nFSharpTokenKind.Yield \nYield \nFSharpTokenKind.YieldBang \nYieldBang \nFSharpTokenKind.BigNumber \nBigNumber \nFSharpTokenKind.Decimal \nDecimal \nFSharpTokenKind.Char \nChar \nFSharpTokenKind.Ieee64 \nIeee64 \nFSharpTokenKind.Ieee32 \nIeee32 \nFSharpTokenKind.NativeInt \nNativeInt \nFSharpTokenKind.UNativeInt \nUNativeInt \nFSharpTokenKind.UInt64 \nUInt64 \nFSharpTokenKind.UInt32 \nUInt32 \nFSharpTokenKind.UInt16 \nUInt16 \nFSharpTokenKind.UInt8 \nUInt8 \nFSharpTokenKind.Int64 \nInt64 \nFSharpTokenKind.Int32 \nInt32 \nFSharpTokenKind.Int32DotDot \nInt32DotDot \nFSharpTokenKind.Int16 \nInt16 \nFSharpTokenKind.Int8 \nInt8 \nFSharpTokenKind.FunkyOperatorName \nFunkyOperatorName \nFSharpTokenKind.AdjacentPrefixOperator \nAdjacentPrefixOperator \nFSharpTokenKind.PlusMinusOperator \nPlusMinusOperator \nFSharpTokenKind.InfixAmpersandOperator \nInfixAmpersandOperator \nFSharpTokenKind.InfixStarDivideModuloOperator \nInfixStarDivideModuloOperator \nFSharpTokenKind.PrefixOperator \nPrefixOperator \nFSharpTokenKind.InfixBarOperator \nInfixBarOperator \nFSharpTokenKind.InfixAtHatOperator \nInfixAtHatOperator \nFSharpTokenKind.InfixCompareOperator \nInfixCompareOperator \nFSharpTokenKind.InfixStarStarOperator \nInfixStarStarOperator \nFSharpTokenKind.Identifier \nIdentifier \nFSharpTokenKind.KeywordString \nKeywordString \nFSharpTokenKind.String \nString \nFSharpTokenKind.ByteArray \nByteArray \nFSharpTokenKind.Asr \nAsr \nFSharpTokenKind.InfixAsr \nInfixAsr \nFSharpTokenKind.InfixLand \nInfixLand \nFSharpTokenKind.InfixLor \nInfixLor \nFSharpTokenKind.InfixLsl \nInfixLsl \nFSharpTokenKind.InfixLsr \nInfixLsr \nFSharpTokenKind.InfixLxor \nInfixLxor \nFSharpTokenKind.InfixMod \nInfixMod"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#None","title":"FSharpTokenKind.None","content":"FSharpTokenKind.None \nNone \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HashIf","title":"FSharpTokenKind.HashIf","content":"FSharpTokenKind.HashIf \nHashIf \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HashElse","title":"FSharpTokenKind.HashElse","content":"FSharpTokenKind.HashElse \nHashElse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HashEndIf","title":"FSharpTokenKind.HashEndIf","content":"FSharpTokenKind.HashEndIf \nHashEndIf \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#CommentTrivia","title":"FSharpTokenKind.CommentTrivia","content":"FSharpTokenKind.CommentTrivia \nCommentTrivia \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#WhitespaceTrivia","title":"FSharpTokenKind.WhitespaceTrivia","content":"FSharpTokenKind.WhitespaceTrivia \nWhitespaceTrivia \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HashLine","title":"FSharpTokenKind.HashLine","content":"FSharpTokenKind.HashLine \nHashLine \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HashLight","title":"FSharpTokenKind.HashLight","content":"FSharpTokenKind.HashLight \nHashLight \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InactiveCode","title":"FSharpTokenKind.InactiveCode","content":"FSharpTokenKind.InactiveCode \nInactiveCode \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LineCommentTrivia","title":"FSharpTokenKind.LineCommentTrivia","content":"FSharpTokenKind.LineCommentTrivia \nLineCommentTrivia \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#StringText","title":"FSharpTokenKind.StringText","content":"FSharpTokenKind.StringText \nStringText \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Fixed","title":"FSharpTokenKind.Fixed","content":"FSharpTokenKind.Fixed \nFixed \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideInterfaceMember","title":"FSharpTokenKind.OffsideInterfaceMember","content":"FSharpTokenKind.OffsideInterfaceMember \nOffsideInterfaceMember \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideBlockEnd","title":"FSharpTokenKind.OffsideBlockEnd","content":"FSharpTokenKind.OffsideBlockEnd \nOffsideBlockEnd \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideRightBlockEnd","title":"FSharpTokenKind.OffsideRightBlockEnd","content":"FSharpTokenKind.OffsideRightBlockEnd \nOffsideRightBlockEnd \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideDeclEnd","title":"FSharpTokenKind.OffsideDeclEnd","content":"FSharpTokenKind.OffsideDeclEnd \nOffsideDeclEnd \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideEnd","title":"FSharpTokenKind.OffsideEnd","content":"FSharpTokenKind.OffsideEnd \nOffsideEnd \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideBlockSep","title":"FSharpTokenKind.OffsideBlockSep","content":"FSharpTokenKind.OffsideBlockSep \nOffsideBlockSep \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideBlockBegin","title":"FSharpTokenKind.OffsideBlockBegin","content":"FSharpTokenKind.OffsideBlockBegin \nOffsideBlockBegin \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideReset","title":"FSharpTokenKind.OffsideReset","content":"FSharpTokenKind.OffsideReset \nOffsideReset \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideFun","title":"FSharpTokenKind.OffsideFun","content":"FSharpTokenKind.OffsideFun \nOffsideFun \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideFunction","title":"FSharpTokenKind.OffsideFunction","content":"FSharpTokenKind.OffsideFunction \nOffsideFunction \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideWith","title":"FSharpTokenKind.OffsideWith","content":"FSharpTokenKind.OffsideWith \nOffsideWith \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideElse","title":"FSharpTokenKind.OffsideElse","content":"FSharpTokenKind.OffsideElse \nOffsideElse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideThen","title":"FSharpTokenKind.OffsideThen","content":"FSharpTokenKind.OffsideThen \nOffsideThen \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideDoBang","title":"FSharpTokenKind.OffsideDoBang","content":"FSharpTokenKind.OffsideDoBang \nOffsideDoBang \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideDo","title":"FSharpTokenKind.OffsideDo","content":"FSharpTokenKind.OffsideDo \nOffsideDo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideBinder","title":"FSharpTokenKind.OffsideBinder","content":"FSharpTokenKind.OffsideBinder \nOffsideBinder \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideLet","title":"FSharpTokenKind.OffsideLet","content":"FSharpTokenKind.OffsideLet \nOffsideLet \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HighPrecedenceTypeApp","title":"FSharpTokenKind.HighPrecedenceTypeApp","content":"FSharpTokenKind.HighPrecedenceTypeApp \nHighPrecedenceTypeApp \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HighPrecedenceParenthesisApp","title":"FSharpTokenKind.HighPrecedenceParenthesisApp","content":"FSharpTokenKind.HighPrecedenceParenthesisApp \nHighPrecedenceParenthesisApp \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#HighPrecedenceBracketApp","title":"FSharpTokenKind.HighPrecedenceBracketApp","content":"FSharpTokenKind.HighPrecedenceBracketApp \nHighPrecedenceBracketApp \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Extern","title":"FSharpTokenKind.Extern","content":"FSharpTokenKind.Extern \nExtern \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Void","title":"FSharpTokenKind.Void","content":"FSharpTokenKind.Void \nVoid \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Public","title":"FSharpTokenKind.Public","content":"FSharpTokenKind.Public \nPublic \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Private","title":"FSharpTokenKind.Private","content":"FSharpTokenKind.Private \nPrivate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Internal","title":"FSharpTokenKind.Internal","content":"FSharpTokenKind.Internal \nInternal \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Global","title":"FSharpTokenKind.Global","content":"FSharpTokenKind.Global \nGlobal \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Static","title":"FSharpTokenKind.Static","content":"FSharpTokenKind.Static \nStatic \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Member","title":"FSharpTokenKind.Member","content":"FSharpTokenKind.Member \nMember \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Class","title":"FSharpTokenKind.Class","content":"FSharpTokenKind.Class \nClass \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Abstract","title":"FSharpTokenKind.Abstract","content":"FSharpTokenKind.Abstract \nAbstract \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Override","title":"FSharpTokenKind.Override","content":"FSharpTokenKind.Override \nOverride \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Default","title":"FSharpTokenKind.Default","content":"FSharpTokenKind.Default \nDefault \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Constructor","title":"FSharpTokenKind.Constructor","content":"FSharpTokenKind.Constructor \nConstructor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Inherit","title":"FSharpTokenKind.Inherit","content":"FSharpTokenKind.Inherit \nInherit \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#GreaterRightBracket","title":"FSharpTokenKind.GreaterRightBracket","content":"FSharpTokenKind.GreaterRightBracket \nGreaterRightBracket \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Struct","title":"FSharpTokenKind.Struct","content":"FSharpTokenKind.Struct \nStruct \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Sig","title":"FSharpTokenKind.Sig","content":"FSharpTokenKind.Sig \nSig \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Bar","title":"FSharpTokenKind.Bar","content":"FSharpTokenKind.Bar \nBar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightBracket","title":"FSharpTokenKind.RightBracket","content":"FSharpTokenKind.RightBracket \nRightBracket \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightBrace","title":"FSharpTokenKind.RightBrace","content":"FSharpTokenKind.RightBrace \nRightBrace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Minus","title":"FSharpTokenKind.Minus","content":"FSharpTokenKind.Minus \nMinus \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Dollar","title":"FSharpTokenKind.Dollar","content":"FSharpTokenKind.Dollar \nDollar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#BarRightBracket","title":"FSharpTokenKind.BarRightBracket","content":"FSharpTokenKind.BarRightBracket \nBarRightBracket \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#BarRightBrace","title":"FSharpTokenKind.BarRightBrace","content":"FSharpTokenKind.BarRightBrace \nBarRightBrace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Underscore","title":"FSharpTokenKind.Underscore","content":"FSharpTokenKind.Underscore \nUnderscore \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Semicolon","title":"FSharpTokenKind.Semicolon","content":"FSharpTokenKind.Semicolon \nSemicolon \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#SemicolonSemicolon","title":"FSharpTokenKind.SemicolonSemicolon","content":"FSharpTokenKind.SemicolonSemicolon \nSemicolonSemicolon \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftArrow","title":"FSharpTokenKind.LeftArrow","content":"FSharpTokenKind.LeftArrow \nLeftArrow \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Equals","title":"FSharpTokenKind.Equals","content":"FSharpTokenKind.Equals \nEquals \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftBracket","title":"FSharpTokenKind.LeftBracket","content":"FSharpTokenKind.LeftBracket \nLeftBracket \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftBracketBar","title":"FSharpTokenKind.LeftBracketBar","content":"FSharpTokenKind.LeftBracketBar \nLeftBracketBar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftBraceBar","title":"FSharpTokenKind.LeftBraceBar","content":"FSharpTokenKind.LeftBraceBar \nLeftBraceBar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftBracketLess","title":"FSharpTokenKind.LeftBracketLess","content":"FSharpTokenKind.LeftBracketLess \nLeftBracketLess \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftBrace","title":"FSharpTokenKind.LeftBrace","content":"FSharpTokenKind.LeftBrace \nLeftBrace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#QuestionMark","title":"FSharpTokenKind.QuestionMark","content":"FSharpTokenKind.QuestionMark \nQuestionMark \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#QuestionMarkQuestionMark","title":"FSharpTokenKind.QuestionMarkQuestionMark","content":"FSharpTokenKind.QuestionMarkQuestionMark \nQuestionMarkQuestionMark \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Dot","title":"FSharpTokenKind.Dot","content":"FSharpTokenKind.Dot \nDot \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Colon","title":"FSharpTokenKind.Colon","content":"FSharpTokenKind.Colon \nColon \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ColonColon","title":"FSharpTokenKind.ColonColon","content":"FSharpTokenKind.ColonColon \nColonColon \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ColonGreater","title":"FSharpTokenKind.ColonGreater","content":"FSharpTokenKind.ColonGreater \nColonGreater \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ColonQuestionMark","title":"FSharpTokenKind.ColonQuestionMark","content":"FSharpTokenKind.ColonQuestionMark \nColonQuestionMark \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ColonQuestionMarkGreater","title":"FSharpTokenKind.ColonQuestionMarkGreater","content":"FSharpTokenKind.ColonQuestionMarkGreater \nColonQuestionMarkGreater \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ColonEquals","title":"FSharpTokenKind.ColonEquals","content":"FSharpTokenKind.ColonEquals \nColonEquals \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#When","title":"FSharpTokenKind.When","content":"FSharpTokenKind.When \nWhen \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#While","title":"FSharpTokenKind.While","content":"FSharpTokenKind.While \nWhile \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#With","title":"FSharpTokenKind.With","content":"FSharpTokenKind.With \nWith \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Hash","title":"FSharpTokenKind.Hash","content":"FSharpTokenKind.Hash \nHash \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Ampersand","title":"FSharpTokenKind.Ampersand","content":"FSharpTokenKind.Ampersand \nAmpersand \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#AmpersandAmpersand","title":"FSharpTokenKind.AmpersandAmpersand","content":"FSharpTokenKind.AmpersandAmpersand \nAmpersandAmpersand \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Quote","title":"FSharpTokenKind.Quote","content":"FSharpTokenKind.Quote \nQuote \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftParenthesis","title":"FSharpTokenKind.LeftParenthesis","content":"FSharpTokenKind.LeftParenthesis \nLeftParenthesis \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightParenthesis","title":"FSharpTokenKind.RightParenthesis","content":"FSharpTokenKind.RightParenthesis \nRightParenthesis \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Star","title":"FSharpTokenKind.Star","content":"FSharpTokenKind.Star \nStar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Comma","title":"FSharpTokenKind.Comma","content":"FSharpTokenKind.Comma \nComma \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightArrow","title":"FSharpTokenKind.RightArrow","content":"FSharpTokenKind.RightArrow \nRightArrow \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#GreaterBarRightBracket","title":"FSharpTokenKind.GreaterBarRightBracket","content":"FSharpTokenKind.GreaterBarRightBracket \nGreaterBarRightBracket \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftParenthesisStarRightParenthesis","title":"FSharpTokenKind.LeftParenthesisStarRightParenthesis","content":"FSharpTokenKind.LeftParenthesisStarRightParenthesis \nLeftParenthesisStarRightParenthesis \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Open","title":"FSharpTokenKind.Open","content":"FSharpTokenKind.Open \nOpen \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Or","title":"FSharpTokenKind.Or","content":"FSharpTokenKind.Or \nOr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Rec","title":"FSharpTokenKind.Rec","content":"FSharpTokenKind.Rec \nRec \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Then","title":"FSharpTokenKind.Then","content":"FSharpTokenKind.Then \nThen \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#To","title":"FSharpTokenKind.To","content":"FSharpTokenKind.To \nTo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#True","title":"FSharpTokenKind.True","content":"FSharpTokenKind.True \nTrue \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Try","title":"FSharpTokenKind.Try","content":"FSharpTokenKind.Try \nTry \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Type","title":"FSharpTokenKind.Type","content":"FSharpTokenKind.Type \nType \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Val","title":"FSharpTokenKind.Val","content":"FSharpTokenKind.Val \nVal \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Inline","title":"FSharpTokenKind.Inline","content":"FSharpTokenKind.Inline \nInline \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Interface","title":"FSharpTokenKind.Interface","content":"FSharpTokenKind.Interface \nInterface \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Instance","title":"FSharpTokenKind.Instance","content":"FSharpTokenKind.Instance \nInstance \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Const","title":"FSharpTokenKind.Const","content":"FSharpTokenKind.Const \nConst \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Lazy","title":"FSharpTokenKind.Lazy","content":"FSharpTokenKind.Lazy \nLazy \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideLazy","title":"FSharpTokenKind.OffsideLazy","content":"FSharpTokenKind.OffsideLazy \nOffsideLazy \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Match","title":"FSharpTokenKind.Match","content":"FSharpTokenKind.Match \nMatch \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#MatchBang","title":"FSharpTokenKind.MatchBang","content":"FSharpTokenKind.MatchBang \nMatchBang \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Mutable","title":"FSharpTokenKind.Mutable","content":"FSharpTokenKind.Mutable \nMutable \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#New","title":"FSharpTokenKind.New","content":"FSharpTokenKind.New \nNew \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Of","title":"FSharpTokenKind.Of","content":"FSharpTokenKind.Of \nOf \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Exception","title":"FSharpTokenKind.Exception","content":"FSharpTokenKind.Exception \nException \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#False","title":"FSharpTokenKind.False","content":"FSharpTokenKind.False \nFalse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#For","title":"FSharpTokenKind.For","content":"FSharpTokenKind.For \nFor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Fun","title":"FSharpTokenKind.Fun","content":"FSharpTokenKind.Fun \nFun \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Function","title":"FSharpTokenKind.Function","content":"FSharpTokenKind.Function \nFunction \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#If","title":"FSharpTokenKind.If","content":"FSharpTokenKind.If \nIf \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#In","title":"FSharpTokenKind.In","content":"FSharpTokenKind.In \nIn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#JoinIn","title":"FSharpTokenKind.JoinIn","content":"FSharpTokenKind.JoinIn \nJoinIn \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Finally","title":"FSharpTokenKind.Finally","content":"FSharpTokenKind.Finally \nFinally \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#DoBang","title":"FSharpTokenKind.DoBang","content":"FSharpTokenKind.DoBang \nDoBang \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#And","title":"FSharpTokenKind.And","content":"FSharpTokenKind.And \nAnd \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#As","title":"FSharpTokenKind.As","content":"FSharpTokenKind.As \nAs \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Assert","title":"FSharpTokenKind.Assert","content":"FSharpTokenKind.Assert \nAssert \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#OffsideAssert","title":"FSharpTokenKind.OffsideAssert","content":"FSharpTokenKind.OffsideAssert \nOffsideAssert \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Begin","title":"FSharpTokenKind.Begin","content":"FSharpTokenKind.Begin \nBegin \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Do","title":"FSharpTokenKind.Do","content":"FSharpTokenKind.Do \nDo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Done","title":"FSharpTokenKind.Done","content":"FSharpTokenKind.Done \nDone \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#DownTo","title":"FSharpTokenKind.DownTo","content":"FSharpTokenKind.DownTo \nDownTo \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Else","title":"FSharpTokenKind.Else","content":"FSharpTokenKind.Else \nElse \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Elif","title":"FSharpTokenKind.Elif","content":"FSharpTokenKind.Elif \nElif \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#End","title":"FSharpTokenKind.End","content":"FSharpTokenKind.End \nEnd \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#DotDot","title":"FSharpTokenKind.DotDot","content":"FSharpTokenKind.DotDot \nDotDot \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#DotDotHat","title":"FSharpTokenKind.DotDotHat","content":"FSharpTokenKind.DotDotHat \nDotDotHat \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#BarBar","title":"FSharpTokenKind.BarBar","content":"FSharpTokenKind.BarBar \nBarBar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Upcast","title":"FSharpTokenKind.Upcast","content":"FSharpTokenKind.Upcast \nUpcast \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Downcast","title":"FSharpTokenKind.Downcast","content":"FSharpTokenKind.Downcast \nDowncast \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Null","title":"FSharpTokenKind.Null","content":"FSharpTokenKind.Null \nNull \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Reserved","title":"FSharpTokenKind.Reserved","content":"FSharpTokenKind.Reserved \nReserved \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Module","title":"FSharpTokenKind.Module","content":"FSharpTokenKind.Module \nModule \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Namespace","title":"FSharpTokenKind.Namespace","content":"FSharpTokenKind.Namespace \nNamespace \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Delegate","title":"FSharpTokenKind.Delegate","content":"FSharpTokenKind.Delegate \nDelegate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Constraint","title":"FSharpTokenKind.Constraint","content":"FSharpTokenKind.Constraint \nConstraint \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Base","title":"FSharpTokenKind.Base","content":"FSharpTokenKind.Base \nBase \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#LeftQuote","title":"FSharpTokenKind.LeftQuote","content":"FSharpTokenKind.LeftQuote \nLeftQuote \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightQuote","title":"FSharpTokenKind.RightQuote","content":"FSharpTokenKind.RightQuote \nRightQuote \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#RightQuoteDot","title":"FSharpTokenKind.RightQuoteDot","content":"FSharpTokenKind.RightQuoteDot \nRightQuoteDot \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#PercentOperator","title":"FSharpTokenKind.PercentOperator","content":"FSharpTokenKind.PercentOperator \nPercentOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Binder","title":"FSharpTokenKind.Binder","content":"FSharpTokenKind.Binder \nBinder \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Less","title":"FSharpTokenKind.Less","content":"FSharpTokenKind.Less \nLess \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Greater","title":"FSharpTokenKind.Greater","content":"FSharpTokenKind.Greater \nGreater \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Let","title":"FSharpTokenKind.Let","content":"FSharpTokenKind.Let \nLet \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Yield","title":"FSharpTokenKind.Yield","content":"FSharpTokenKind.Yield \nYield \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#YieldBang","title":"FSharpTokenKind.YieldBang","content":"FSharpTokenKind.YieldBang \nYieldBang \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#BigNumber","title":"FSharpTokenKind.BigNumber","content":"FSharpTokenKind.BigNumber \nBigNumber \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Decimal","title":"FSharpTokenKind.Decimal","content":"FSharpTokenKind.Decimal \nDecimal \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Char","title":"FSharpTokenKind.Char","content":"FSharpTokenKind.Char \nChar \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Ieee64","title":"FSharpTokenKind.Ieee64","content":"FSharpTokenKind.Ieee64 \nIeee64 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Ieee32","title":"FSharpTokenKind.Ieee32","content":"FSharpTokenKind.Ieee32 \nIeee32 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#NativeInt","title":"FSharpTokenKind.NativeInt","content":"FSharpTokenKind.NativeInt \nNativeInt \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#UNativeInt","title":"FSharpTokenKind.UNativeInt","content":"FSharpTokenKind.UNativeInt \nUNativeInt \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#UInt64","title":"FSharpTokenKind.UInt64","content":"FSharpTokenKind.UInt64 \nUInt64 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#UInt32","title":"FSharpTokenKind.UInt32","content":"FSharpTokenKind.UInt32 \nUInt32 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#UInt16","title":"FSharpTokenKind.UInt16","content":"FSharpTokenKind.UInt16 \nUInt16 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#UInt8","title":"FSharpTokenKind.UInt8","content":"FSharpTokenKind.UInt8 \nUInt8 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Int64","title":"FSharpTokenKind.Int64","content":"FSharpTokenKind.Int64 \nInt64 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Int32","title":"FSharpTokenKind.Int32","content":"FSharpTokenKind.Int32 \nInt32 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Int32DotDot","title":"FSharpTokenKind.Int32DotDot","content":"FSharpTokenKind.Int32DotDot \nInt32DotDot \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Int16","title":"FSharpTokenKind.Int16","content":"FSharpTokenKind.Int16 \nInt16 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Int8","title":"FSharpTokenKind.Int8","content":"FSharpTokenKind.Int8 \nInt8 \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#FunkyOperatorName","title":"FSharpTokenKind.FunkyOperatorName","content":"FSharpTokenKind.FunkyOperatorName \nFunkyOperatorName \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#AdjacentPrefixOperator","title":"FSharpTokenKind.AdjacentPrefixOperator","content":"FSharpTokenKind.AdjacentPrefixOperator \nAdjacentPrefixOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#PlusMinusOperator","title":"FSharpTokenKind.PlusMinusOperator","content":"FSharpTokenKind.PlusMinusOperator \nPlusMinusOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixAmpersandOperator","title":"FSharpTokenKind.InfixAmpersandOperator","content":"FSharpTokenKind.InfixAmpersandOperator \nInfixAmpersandOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixStarDivideModuloOperator","title":"FSharpTokenKind.InfixStarDivideModuloOperator","content":"FSharpTokenKind.InfixStarDivideModuloOperator \nInfixStarDivideModuloOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#PrefixOperator","title":"FSharpTokenKind.PrefixOperator","content":"FSharpTokenKind.PrefixOperator \nPrefixOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixBarOperator","title":"FSharpTokenKind.InfixBarOperator","content":"FSharpTokenKind.InfixBarOperator \nInfixBarOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixAtHatOperator","title":"FSharpTokenKind.InfixAtHatOperator","content":"FSharpTokenKind.InfixAtHatOperator \nInfixAtHatOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixCompareOperator","title":"FSharpTokenKind.InfixCompareOperator","content":"FSharpTokenKind.InfixCompareOperator \nInfixCompareOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixStarStarOperator","title":"FSharpTokenKind.InfixStarStarOperator","content":"FSharpTokenKind.InfixStarStarOperator \nInfixStarStarOperator \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Identifier","title":"FSharpTokenKind.Identifier","content":"FSharpTokenKind.Identifier \nIdentifier \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#KeywordString","title":"FSharpTokenKind.KeywordString","content":"FSharpTokenKind.KeywordString \nKeywordString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#String","title":"FSharpTokenKind.String","content":"FSharpTokenKind.String \nString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#ByteArray","title":"FSharpTokenKind.ByteArray","content":"FSharpTokenKind.ByteArray \nByteArray \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#Asr","title":"FSharpTokenKind.Asr","content":"FSharpTokenKind.Asr \nAsr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixAsr","title":"FSharpTokenKind.InfixAsr","content":"FSharpTokenKind.InfixAsr \nInfixAsr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixLand","title":"FSharpTokenKind.InfixLand","content":"FSharpTokenKind.InfixLand \nInfixLand \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixLor","title":"FSharpTokenKind.InfixLor","content":"FSharpTokenKind.InfixLor \nInfixLor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixLsl","title":"FSharpTokenKind.InfixLsl","content":"FSharpTokenKind.InfixLsl \nInfixLsl \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixLsr","title":"FSharpTokenKind.InfixLsr","content":"FSharpTokenKind.InfixLsr \nInfixLsr \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixLxor","title":"FSharpTokenKind.InfixLxor","content":"FSharpTokenKind.InfixLxor \nInfixLxor \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenkind.html#InfixMod","title":"FSharpTokenKind.InfixMod","content":"FSharpTokenKind.InfixMod \nInfixMod \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html","title":"FSharpTokenTriggerClass","content":"FSharpTokenTriggerClass \n\n Gives an indication of what should happen when the token is typed in an IDE\n \nFSharpTokenTriggerClass.None \nNone \nFSharpTokenTriggerClass.MemberSelect \nMemberSelect \nFSharpTokenTriggerClass.MatchBraces \nMatchBraces \nFSharpTokenTriggerClass.ChoiceSelect \nChoiceSelect \nFSharpTokenTriggerClass.MethodTip \nMethodTip \nFSharpTokenTriggerClass.ParamStart \nParamStart \nFSharpTokenTriggerClass.ParamNext \nParamNext \nFSharpTokenTriggerClass.ParamEnd \nParamEnd"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#None","title":"FSharpTokenTriggerClass.None","content":"FSharpTokenTriggerClass.None \nNone \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#MemberSelect","title":"FSharpTokenTriggerClass.MemberSelect","content":"FSharpTokenTriggerClass.MemberSelect \nMemberSelect \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#MatchBraces","title":"FSharpTokenTriggerClass.MatchBraces","content":"FSharpTokenTriggerClass.MatchBraces \nMatchBraces \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#ChoiceSelect","title":"FSharpTokenTriggerClass.ChoiceSelect","content":"FSharpTokenTriggerClass.ChoiceSelect \nChoiceSelect \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#MethodTip","title":"FSharpTokenTriggerClass.MethodTip","content":"FSharpTokenTriggerClass.MethodTip \nMethodTip \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#ParamStart","title":"FSharpTokenTriggerClass.ParamStart","content":"FSharpTokenTriggerClass.ParamStart \nParamStart \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#ParamNext","title":"FSharpTokenTriggerClass.ParamNext","content":"FSharpTokenTriggerClass.ParamNext \nParamNext \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokentriggerclass.html#ParamEnd","title":"FSharpTokenTriggerClass.ParamEnd","content":"FSharpTokenTriggerClass.ParamEnd \nParamEnd \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html","title":"FSharpTokenizerColorState","content":"FSharpTokenizerColorState \n\n Represents stable information for the state of the lexing engine at the end of a line\n \nFSharpTokenizerColorState.Token \nToken \nFSharpTokenizerColorState.IfDefSkip \nIfDefSkip \nFSharpTokenizerColorState.String \nString \nFSharpTokenizerColorState.Comment \nComment \nFSharpTokenizerColorState.StringInComment \nStringInComment \nFSharpTokenizerColorState.VerbatimStringInComment \nVerbatimStringInComment \nFSharpTokenizerColorState.CamlOnly \nCamlOnly \nFSharpTokenizerColorState.VerbatimString \nVerbatimString \nFSharpTokenizerColorState.SingleLineComment \nSingleLineComment \nFSharpTokenizerColorState.EndLineThenSkip \nEndLineThenSkip \nFSharpTokenizerColorState.EndLineThenToken \nEndLineThenToken \nFSharpTokenizerColorState.TripleQuoteString \nTripleQuoteString \nFSharpTokenizerColorState.TripleQuoteStringInComment \nTripleQuoteStringInComment \nFSharpTokenizerColorState.InitialState \nInitialState"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#Token","title":"FSharpTokenizerColorState.Token","content":"FSharpTokenizerColorState.Token \nToken \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#IfDefSkip","title":"FSharpTokenizerColorState.IfDefSkip","content":"FSharpTokenizerColorState.IfDefSkip \nIfDefSkip \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#String","title":"FSharpTokenizerColorState.String","content":"FSharpTokenizerColorState.String \nString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#Comment","title":"FSharpTokenizerColorState.Comment","content":"FSharpTokenizerColorState.Comment \nComment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#StringInComment","title":"FSharpTokenizerColorState.StringInComment","content":"FSharpTokenizerColorState.StringInComment \nStringInComment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#VerbatimStringInComment","title":"FSharpTokenizerColorState.VerbatimStringInComment","content":"FSharpTokenizerColorState.VerbatimStringInComment \nVerbatimStringInComment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#CamlOnly","title":"FSharpTokenizerColorState.CamlOnly","content":"FSharpTokenizerColorState.CamlOnly \nCamlOnly \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#VerbatimString","title":"FSharpTokenizerColorState.VerbatimString","content":"FSharpTokenizerColorState.VerbatimString \nVerbatimString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#SingleLineComment","title":"FSharpTokenizerColorState.SingleLineComment","content":"FSharpTokenizerColorState.SingleLineComment \nSingleLineComment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#EndLineThenSkip","title":"FSharpTokenizerColorState.EndLineThenSkip","content":"FSharpTokenizerColorState.EndLineThenSkip \nEndLineThenSkip \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#EndLineThenToken","title":"FSharpTokenizerColorState.EndLineThenToken","content":"FSharpTokenizerColorState.EndLineThenToken \nEndLineThenToken \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#TripleQuoteString","title":"FSharpTokenizerColorState.TripleQuoteString","content":"FSharpTokenizerColorState.TripleQuoteString \nTripleQuoteString \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#TripleQuoteStringInComment","title":"FSharpTokenizerColorState.TripleQuoteStringInComment","content":"FSharpTokenizerColorState.TripleQuoteStringInComment \nTripleQuoteStringInComment \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizercolorstate.html#InitialState","title":"FSharpTokenizerColorState.InitialState","content":"FSharpTokenizerColorState.InitialState \nInitialState \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizerlexstate.html","title":"FSharpTokenizerLexState","content":"FSharpTokenizerLexState \n\n Represents encoded information for the end-of-line continuation of lexing\n \nFSharpTokenizerLexState.Equals \nEquals \nFSharpTokenizerLexState.Initial \nInitial \nFSharpTokenizerLexState.PosBits \nPosBits \nFSharpTokenizerLexState.OtherBits \nOtherBits"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizerlexstate.html#Equals","title":"FSharpTokenizerLexState.Equals","content":"FSharpTokenizerLexState.Equals \nEquals \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizerlexstate.html#Initial","title":"FSharpTokenizerLexState.Initial","content":"FSharpTokenizerLexState.Initial \nInitial \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizerlexstate.html#PosBits","title":"FSharpTokenizerLexState.PosBits","content":"FSharpTokenizerLexState.PosBits \nPosBits \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-tokenization-fsharptokenizerlexstate.html#OtherBits","title":"FSharpTokenizerLexState.OtherBits","content":"FSharpTokenizerLexState.OtherBits \nOtherBits \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html","title":"PreXmlDoc","content":"PreXmlDoc \n\n Represents the XmlDoc fragments as collected from the lexer during parsing\n \nPreXmlDoc.ToXmlDoc \nToXmlDoc \nPreXmlDoc.IsEmpty \nIsEmpty \nPreXmlDoc.Create \nCreate \nPreXmlDoc.Merge \nMerge \nPreXmlDoc.Empty \nEmpty"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#ToXmlDoc","title":"PreXmlDoc.ToXmlDoc","content":"PreXmlDoc.ToXmlDoc \nToXmlDoc \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#IsEmpty","title":"PreXmlDoc.IsEmpty","content":"PreXmlDoc.IsEmpty \nIsEmpty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#Create","title":"PreXmlDoc.Create","content":"PreXmlDoc.Create \nCreate \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#Merge","title":"PreXmlDoc.Merge","content":"PreXmlDoc.Merge \nMerge \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-prexmldoc.html#Empty","title":"PreXmlDoc.Empty","content":"PreXmlDoc.Empty \nEmpty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html","title":"XmlDoc","content":"XmlDoc \n\n Represents collected XmlDoc lines\n \nXmlDoc.( .ctor ) \n( .ctor ) \nXmlDoc.GetElaboratedXmlLines \nGetElaboratedXmlLines \nXmlDoc.GetXmlText \nGetXmlText \nXmlDoc.NonEmpty \nNonEmpty \nXmlDoc.Range \nRange \nXmlDoc.UnprocessedLines \nUnprocessedLines \nXmlDoc.IsEmpty \nIsEmpty \nXmlDoc.Merge \nMerge \nXmlDoc.Empty \nEmpty"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#( .ctor )","title":"XmlDoc.( .ctor )","content":"XmlDoc.( .ctor ) \n( .ctor ) \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#GetElaboratedXmlLines","title":"XmlDoc.GetElaboratedXmlLines","content":"XmlDoc.GetElaboratedXmlLines \nGetElaboratedXmlLines \n\n Get the lines after insertion of implicit summary tags and encoding\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#GetXmlText","title":"XmlDoc.GetXmlText","content":"XmlDoc.GetXmlText \nGetXmlText \n\n Get the elaborated XML documentation as XML text\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#NonEmpty","title":"XmlDoc.NonEmpty","content":"XmlDoc.NonEmpty \nNonEmpty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#Range","title":"XmlDoc.Range","content":"XmlDoc.Range \nRange \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#UnprocessedLines","title":"XmlDoc.UnprocessedLines","content":"XmlDoc.UnprocessedLines \nUnprocessedLines \n\n Get the lines before insertion of implicit summary tags and encoding\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#IsEmpty","title":"XmlDoc.IsEmpty","content":"XmlDoc.IsEmpty \nIsEmpty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#Merge","title":"XmlDoc.Merge","content":"XmlDoc.Merge \nMerge \n\n Merge two XML documentation\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/reference/fsharp-compiler-xml-xmldoc.html#Empty","title":"XmlDoc.Empty","content":"XmlDoc.Empty \nEmpty \n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/coding-standards.html","title":"Coding standards","content":"---\r\ntitle: Coding standards\r\ncategory: Compiler Internals\r\ncategoryindex: 200\r\nindex: 200\r\n---\r\n# Coding standards and idioms\r\n\r\nThe F# compiler code base is slowly being updated to better coding standards. There is a long way to go.\r\n\r\nThe future work includes\r\n\r\n* [ ] Consistent use of fantomas formatting acrossas much of the codebase as feasible\r\n* [ ] Consistent naming conventions\r\n* [ ] Reduction in line length\r\n* [ ] Reduction in single-character identifiers\r\n* [ ] XML documentation for all types, members and cross-module functions\r\n\r\n## Abbreviations\r\n\r\nThe compiler codebase uses various abbreviations. Here are some of the most common ones.\r\n\r\n| Abbreviation             |   Meaning  |  \r\n|:------------------------------|:-----------|\r\n| \u0060ad\u0060                | Accessor domain, meaning the permissions the accessing code has to access other constructs |\r\n| \u0060amap\u0060                | Assembly map, saying how to map IL references to F# CCUs |\r\n| \u0060arg\u0060                | Argument (parameter) |\r\n| \u0060argty\u0060                | Argument (parameter) type |\r\n| \u0060arginfo\u0060                | Argument (parameter) metadata  |\r\n| \u0060ccu\u0060                | Reference to an F# compilation unit = an F# DLL (possibly including the DLL being compiled)  |\r\n| \u0060celem\u0060               | Custom attribute element |\r\n| \u0060cenv\u0060                | Compilation environment. Means different things in different contexts, but usually a parameter for a singlecompilation state object being passed through a set of related functions in a single phase. The compilation state is often mutable. |\r\n| \u0060cpath\u0060                | Compilation path, meaning A.B.C for the overall names containing a type or module definition |\r\n| \u0060css\u0060                | Constraint solver state. |\r\n| \u0060denv\u0060                | Display Environment. Parameters guiding the formatting of types |\r\n| \u0060einfo\u0060              | An info object for an event  (whether a .NET event, an F# event or a provided event) |\r\n| \u0060e\u0060                   | Expression |\r\n| \u0060env\u0060                | Environment. Means different things in different contexts, but usually immutable state being passed and adjusted  through a set of related functions in a single phase. |\r\n| \u0060finfo\u0060              | An info object for a field (whether a .NET field or a provided field) |\r\n| \u0060fref\u0060              | A reference to an ILFieldRef Abstract IL node for a field reference. Would normally be modernized to \u0060ilFieldRef\u0060 |\r\n| \u0060g\u0060                   | The TcGlobals value |\r\n| \u0060id\u0060                   | Identifier |\r\n| \u0060lid\u0060                   | Long Identifier |\r\n| \u0060m\u0060                   | A source code range marker |\r\n| \u0060mimpl\u0060               | IL interface method implementation |\r\n| \u0060minfo\u0060              | An info object for a method (whet a .NET method, an F# method or a provided method) |\r\n| \u0060modul\u0060                | a Typed Tree structure for a namespace or F# module |\r\n| \u0060pat\u0060              | Pattern, a syntactic AST node representing part of a pattern in a pattern match |\r\n| \u0060pinfo\u0060              | An info object for a property  (whether a .NET property, an F# property or a provided property) |\r\n| \u0060rfref\u0060              | Record or class field  reference, a reference to a Typed Tree node for a record or class field |\r\n| \u0060scoref\u0060              | The scope of a reference in IL metadata, either assembly, \u0060.netmodule\u0060 or local |\r\n| \u0060spat\u0060              | Simple Pattern, a syntactic AST node representing part of a pattern in a pattern match |\r\n| \u0060tau\u0060              | A type with the \u0022forall\u0022 nodes stripped off (i.e. the nodes which represent generic type parameters). Comes from the notation _\uD835\uDED5_ used in type theory  |\r\n| \u0060tcref\u0060              | Type constructor  reference (an \u0060EntityRef\u0060) |\r\n| \u0060tinst\u0060              | Type instantiation |\r\n| \u0060tpenv\u0060              | Type parameter environment, tracks the type parameters in scope during type checking |\r\n| \u0060ty\u0060 (not: \u0060typ\u0060)                 |  Type, usually a Typed Tree type |\r\n| \u0060tys\u0060 (not: \u0060typs\u0060)                 |  List of types, usually Typed Tree types |\r\n| \u0060typar\u0060                 |  Type Parameter |\r\n| \u0060tyvar\u0060                | Type Variable, usually referring to an IL type variable, the compiled form of an F# type parameter |\r\n| \u0060ucref\u0060              | Union case reference, a reference to a Typed Tree node for a union case |\r\n| \u0060vref\u0060              | Value reference, a reference to a Typed Tree node for a value |\r\n\r\n| Phase Abbreviation             |   Meaning  |  \r\n|:------------------------------|:-----------|\r\n| \u0060Syn\u0060                  | Abstract Syntax Tree |\r\n| \u0060Tc\u0060                  | Type-checker |\r\n| \u0060IL\u0060                 | Abstract  IL = F# representation of .NET IL |\r\n| \u0060Ilx\u0060                 | Extended Abstract IL = .NET IL plus a couple of contructs that get erased |\r\n\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/compiler-startup-performance.html","title":"Startup Performance","content":"---\r\ntitle: Startup Performance\r\ncategory: Compiler Internals\r\ncategoryindex: 200\r\nindex: 700\r\n---\r\n# Compiler Startup Performance\r\n\r\nCompiler startup performance is a key factor affecting happiness of F# users. If the compiler took 10sec to start up, then far fewer people would use F#.\r\n\r\nOn all platforms, the following factors affect startup performance:\r\n\r\n* Time to load compiler binaries. This depends on the size of the generated binaries, whether they are pre-compiled (for example, using NGEN or CrossGen), and the way the .NET implementation loads them.\r\n\r\n* Time to open referenced assemblies (for example, \u0060mscorlib.dll\u0060, \u0060FSharp.Core.dll\u0060) and analyze them for the types and namespaces defined. This depends particularly on whether this is correctly done in an on-demand way.\r\n\r\n* Time to process \u0022open\u0022 declarations are the top of each file. Processing these declarations have been observed to take time in some cases of  F# compilation.\r\n\r\n* Factors specific to the specific files being compiled.\r\n\r\nOn Windows, the compiler delivered with Visual Studio currently uses NGEN to pre-compile \u0060fsc\u0060, \u0060fsi\u0060, and some assemblies used in Visual Studio tooling. For .NET Core, the CrossGen tool is used to accomplish the same thing. Visual Studio will use _delayed_ NGEN, meaning that it does not run NGEN on every binary up front. This means that F# compilation through Visual Studio may be slow for a few times before it gets NGENed.\r\n\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/debug-emit.html","title":"Debug emit","content":"---\r\ntitle: Debug emit\r\ncategory: Compiler Internals\r\ncategoryindex: 200\r\nindex: 350\r\n---\r\n# Debug emit\r\n\r\nThe F# compiler code base emits debug information and attributes. This article documents what we do, how it is implemented and the problem areas in our implementation.\r\n\r\nThere are mistakes and missing pieces to our debug information. Small improvements can make a major difference. Please help us fix mistakes and get things right.\r\n\r\nThe file \u0060tests\\walkthroughs\\DebugStepping\\TheBigFileOfDebugStepping.fsx\u0060 is crucial for testing the stepping experience for a range of constructs.\r\n\r\n## User experiences\r\n\r\nDebugging information affects numerous user experiences:\r\n\r\n* **Call stacks** during debugging\r\n* **Breakpoint placement** before and during debugging\r\n* **Locals** during debugging\r\n* **Just my code** debugging (which limits the view of debug code to exclude libraries)\r\n* **Exception** debugging (e.g. \u0022first chance\u0022 debugging when exceptions occur)\r\n* **Stepping** debugging\r\n* **Watch** window\r\n* **Profiling** results\r\n* **Code coverage** results\r\n\r\nSome experiences are un-implemented by F# including:\r\n\r\n* **Autos** during debugging\r\n* **Edit and Continue**\r\n* **Hot reload**\r\n\r\n## Emitted information\r\n\r\nEmitted debug information includes:\r\n\r\n* The names of methods in .NET IL\r\n* The PDB file/information (embedded or in PDB file) which contains\r\n  * Debug \u0022sequence\u0022 points for IL code\r\n  * Names of locals and the IL code scopes over which those names are active\r\n* The attributes on IL methods such as \u0060CompilerGeneratedAttribute\u0060 and \u0060DebuggerNonUserCodeAttribute\u0060, wee below\r\n* We add some codegen to give better debug experiences, see below.\r\n\r\n## Design-time services\r\n\r\nIDE tooling performs queries into the F# language service, notably:\r\n\r\n* \u0060ValidateBreakpointLocation\u0060 [(permalink)](https://github.com/dotnet/fsharp/blob/24979b692fc88dc75e2467e30b75667058fd9504/src/fsharp/service/FSharpParseFileResults.fs#L795) is called to validate every breakpoint before debugging is launched. This operates on syntax trees. See notes below.\r\n\r\n## Debugging and optimization\r\n\r\nNearly all optimizations are **off** when debug code is being generated.\r\n\r\n* The optimizer is run for forced inlining only\r\n* List and array expressions do generate collector code\r\n* State machines are generated for tasks and sequences\r\n* \u0022let mutable\u0022 --\u003E \u0022ref\u0022 promotion happens for captured local mutables\r\n* Tailcalls are off by default and not emitted in IlxGen.\r\n\r\nOtherwise, what comes out of the type checker is pretty much what goes into IlxGen.fs.\r\n\r\n## Debug points\r\n\r\n### Terminology\r\n\r\nWe use the terms \u0022sequence point\u0022 and \u0022debug point\u0022 interchangeably. The word \u0022sequence\u0022 has too many meanings in the F# compiler so in the actual code you\u0027ll see \u0022DebugPoint\u0022 more often, though for abbreviations you may see \u0060spFoo\u0060 or \u0060mFoo\u0060.\r\n\r\n### How breakpoints work (high level)\r\n\r\nBreakpoints have two existences which must give matching behavior:\r\n\r\n* At design-time, before debugging is launched, \u0060ValidateBreakpointLocation\u0060 is called to validate every breakpoint.  This operators on the SyntaxTree and forms a kind of \u0022gold-standard\u0022 about the exact places where break points are valid.\r\n\r\n* At run-time, breakpoints are \u0022mapped\u0022 by the .NET runtime to actual sequence points found in the PDB data for .NET methods. The runtime searches all methods with debug points for the relevant document and determines where to \u0022bind\u0022 the actual breakpoint to.  A typical debugger can bind a breakpoint to multiple locations.\r\n\r\nThis means there is an invariant that \u0060ValidateBreakpointLocation\u0060 and the emitted IL debug points correspond.\r\n\r\n\u003E NOTE: The IL code can and does contain extra debug points that don\u0027t pass ValidateBreakpointLocation. It won\u0027t be possible to set a breakpoint for these, but they will appear in stepping.\r\n\r\n### Intended debug points for control-flow constructs\r\n\r\nThe intended debug points for control-flow constructs are as follows:\r\n\r\n|  Construct   | Debug points     |\r\n|:-----------|:----------------|\r\n| \u0060let ..\u0060    |   See below |\r\n| \u0060let rec ..\u0060   | Implicit on body |\r\n| \u0060if .. then ..\u0060   | \u0060if .. then\u0060 and implicit on body |\r\n| \u0060if .. then .. else ..\u0060    | \u0060if .. then\u0060 and implicit on branches |\r\n| \u0060match .. with ..\u0060   | \u0060match .. with\u0060 and \u0060when\u0060 patterns and implicit on case targets |\r\n| \u0060while .. do ..\u0060   | \u0060while .. do\u0060 and implicit on body |\r\n| \u0060for .. do\u0060  | \u0060for .. do\u0060 and implicit on body |\r\n| \u0060try .. with ..\u0060  | \u0060try\u0060 and \u0060with\u0060 and implicit on body and handler |\r\n| \u0060try .. finally ..\u0060   | \u0060try\u0060 and \u0060finally\u0060 and implicit on body and handler |\r\n| \u0060use ..\u0060 | See below for \u0060let\u0060 |\r\n| \u0060expr1; expr\u0060 sequential | On \u0060expr1\u0060 and implicit on \u0060expr2\u0060 |\r\n| \u0060expr1 \u0026#124;\u003E expr2\u0060 | On \u0060expr1\u0060 and \u0060expr2\u0060 |\r\n| \u0060(expr1a, expr1b) \u0026#124;\u0026#124;\u003E expr2\u0060 | On \u0060expr1a\u0060, \u0060expr1b\u0060 and \u0060expr2\u0060 |\r\n| \u0060(expr1a, expr1b, expr1c) \u0026#124;\u0026#124;\u0026#124;\u003E expr2\u0060 | On \u0060expr1a\u0060, \u0060expr1b\u0060 and \u0060expr2\u0060 |\r\n| \u0060yield expr\u0060 | On \u0060yield expr\u0060 |\r\n| \u0060return expr\u0060 | On \u0060return expr\u0060 |\r\n\r\nSome debug points are implicit. In particular, whenever a non-control-flow expression (e.g. a constant or a call) is used in statement position (e.g. as the implementation of a method, or the body of a \u0060while\u0060) then there is an implicit debug point over the whole statement/expression.\r\n\r\n### Intended debug points for let-bindings\r\n\r\n\u0060let\u0060 bindings get immediate debug points if the thing is not a function and the implementation is not control flow. For example\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet f () =\r\n    let x = 1 // debug point for whole of \u0060let x = 1\u0060\r\n    let f x = 1 // no debug point on \u0060let f x =\u0060, debug point on \u00601\u0060\r\n    let x = if today then 1 else tomorrow // no debug point on \u0060let x =\u0060, debug point on \u0060if today then\u0060 and \u00601\u0060 and \u0060tomorrow\u0060\r\n    let x = let y = 1 in y \u002B y // no debug point on \u0060let x =\u0060, debug point on \u0060let y = 1\u0060 and \u0060y \u002B y\u0060\r\n    ...\r\n\u0060\u0060\u0060\r\n\r\n### Intended debug points for nested control-flow\r\n\r\nDebug points are not generally emitted for non-statement constructs, e.g. consider:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet h1 x = g (f x)\r\nlet h2 x = x |\u003E f |\u003E g\r\n\u0060\u0060\u0060\r\n\r\nHere \u0060g (f x)\u0060 gets one debug point. Note that the corresponding pipelining gets three debug points.\r\n\r\nIf however a nested expression is control-flow, then debug points start being emitted again e.g.\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet h3 x = f (if today then 1 else 2)\r\n\u0060\u0060\u0060\r\n\r\nHere debug points are at \u0060if today then\u0060 and \u00601\u0060 and \u00602\u0060 and all of \u0060f (if today then 1 else 2)\u0060\r\n\r\n\u003E NOTE: these debug points are overlapping\r\n\r\n### Intended debug points for \u0060[...]\u0060, \u0060[| ... |]\u0060 code\r\n\r\nThe intended debug points for these constructs are the same as for the expressions inside the constructs. For example\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet x = [ for i in 1 .. 10 do yield 1 ]\r\n\u0060\u0060\u0060\r\n\r\nThis will have debug points on \u0060for i in 1 .. 10 do\u0060 and \u0060yield 1\u0060.\r\n\r\n### Intended debug points for \u0060seq { .. }\u0060 and \u0060task { .. }\u0060 code\r\n\r\nThe intended debug points for tasks is the same as for the expressions inside the constructs. For example\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet f() = task { for i in 1 .. 10 do printfn \u0022hello\u0022 }\r\n\u0060\u0060\u0060\r\n\r\nThis will have debug points on \u0060for i in 1 .. 10 do\u0060 and \u0060printfn \u0022hello\u0022\u0060.\r\n\r\n\u003E NOTE: there are glitches, see further below\r\n\r\n### Intended debug points for other computation expressions\r\n\r\nOther computation expressions such as \u0060async { .. }\u0060 have significant problems with their debug points, for multiple reasons:\r\n\r\n* The debug points are largely lost during de-sugaring\r\n* The computations are often \u0022cold-start\u0022 anyway, leading to a two-phase debug problem\r\n\r\nSee further below. In practice debug points can often be placed for user code, e.g. sequential imperative statements or \u0060let\u0060 bindings. However debug points for control constructs are often lossy or buggy.\r\n\r\n## Implementation of debug points in the compiler\r\n\r\nMost (but not all) debug points are noted by the parser by adding \u0060DebugPointAtTarget\u0060, \u0060DebugPointAtSwitch\u0060, \u0060DebugPointAtSequential\u0060, \u0060DebugPointAtTry\u0060, \u0060DebugPointAtWith\u0060, \u0060DebugPointAtFinally\u0060, \u0060DebugPointAtFor\u0060, \u0060DebugPointAtWhile\u0060 or \u0060DebugPointAtBinding\u0060.\r\n\r\nThese are then used by \u0060ValidateBreakpointLocation\u0060. These same values are also propagated unchanged all the way through to \u0060IlxGen.fs\u0060 for actual code generation, and used for IL emit, e.g. a simple case like this:\r\n\r\n\u0060\u0060\u0060fsharp\r\n    match spTry with\r\n    | DebugPointAtTry.Yes m -\u003E CG.EmitDebugPoint cgbuf m ... \r\n    | DebugPointAtTry.No -\u003E ...\r\n    ...\r\n\u0060\u0060\u0060\r\n\r\nFor many constructs this is adequate. However, in practice the situation is far more complicated.\r\n\r\n### Internals: Implicit debug points\r\n\r\nInternally in the compiler, some debug points are implicit. In particular, whenever a non-control-flow expression (e.g. a constant or a call) is used in statement position (e.g. as the implementation of a method, or the body of a \u0060while\u0060) then there is an implicit debug point.\r\n\r\n* \u0022Statement position\u0022 is tracked by the \u0060spAlways\u0060 argument within ValidateBreakpointLocation ([permalink](https://github.com/dotnet/fsharp/blob/24979b692fc88dc75e2467e30b75667058fd9504/src/fsharp/service/FSharpParseFileResults.fs#L481))\r\n* \u0022Statement position\u0022 is similarly tracked by \u0060SPAlways\u0060 within IlxGen.fs [permalink](https://github.com/dotnet/fsharp/blob/24979b692fc88dc75e2467e30b75667058fd9504/src/fsharp/IlxGen.fs#L2290)\r\n\r\nImplicit debug points but they also arise in some code-generated constructs or in backup paths in the compiler implementation. In general we want to remove or reduce the occurrence of these and make things more explicit. However they still exist, especially for \u0022lowered\u0022 constructs.  \r\n\r\n\u003E For example, \u0060DebugPointAtTry.Body\u0060 represents a debug point implicitly located on the body of the try (rather than a \u0060try\u0060 keyword).  Searching the source code, this is generated in the \u0022try/finally\u0022 implied by a \u0022use x = ...\u0022 construct ([permalink](https://github.com/dotnet/fsharp/blob/24979b692fc88dc75e2467e30b75667058fd9504/src/fsharp/CheckExpressions.fs#L10337)).  Is a debug point even needed here? Yes, because otherwise the body of the \u0022using\u0022 wouldn\u0027t get a debug point.\r\n\r\n### Internals: Debug points for \u0060[...]\u0060, \u0060[| ... |]\u0060 \r\n\r\nThe internal implementation of debug points for list and array expressions is conceptually simple but a little complex.\r\n\r\nConceptually the task is easy, e.g. \u0060[ while check() do yield x \u002B x ]\u0060 is lowered to code like this:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet $collector = ListCollector\u003Cint\u003E()\r\nwhile check() do\r\n    $collector.Add(x\u002Bx)\r\n$collector.Close()\r\n\u0060\u0060\u0060\r\n\r\nNote the \u0060while\u0060 loop is still a \u0060while\u0060 loop - no magic here - and the debug points for the \u0060while\u0060 loop can also apply to the actual generated \u0060for\u0060 loop.\r\n\r\nHowever, the actual implementation is more complicated because there is a TypedTree representation of the code in-between that at first seems to bear little resemblance to what comes in.\r\n\r\n\u0060\u0060\u0060text\r\nSyntaxTree --[CheckComputationExpressions.fs]--\u003E TypedTree --\u003E IlxGen --\u003E[LowerComputedListOrArrayExpr.fs]--\u003E IlxGen\r\n\u0060\u0060\u0060\r\n\r\nThe TypedTree is a functional encoding into \u0060Seq.toList\u0060, \u0060Seq.singleton\u0060 and so on. How do the debug points get propagated?\r\n\r\n* In [\u0060CheckComputationExpressions.fs\u0060](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/CheckComputationExpressions.fs#L1783-L1787) we \u0022note\u0022 the debug point for the For loop and attach it to one of the lambdas generated in the TypedTreeForm\r\n* In [\u0060LowerCallsAndSeq.fs\u0060](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/LowerCallsAndSeqs.fs#L138-L139) we \u0022recover\u0022 the debug point from precisely that lambda.\r\n* This becomes [an actual debug point in the actual generated \u0022while\u0022 loop](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/LowerCallsAndSeqs.fs#L887)\r\n\r\nThis then gives accurate debug points for these constructs.\r\n\r\n### Internals: debug points for \u0060seq { .. .}\u0060 code\r\n\r\nDebug points for \u0060seq { .. }\u0060 compiling to state machines poses similar problems.\r\n\r\n* The de-sugaring is as for list and array expressions\r\n* The debug points are recovered in the state machine generation, for example [here (permalink)](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/LowerCallsAndSeqs.fs#L367)\r\n\r\n### Internals: debug points for \u0060task { .. .}\u0060 code\r\n\r\nDebug points for \u0060task { .. }\u0060 poses much harder problems. We use \u0022while\u0022 loops as an example:\r\n\r\n* The de-sugaring is for computation expressions, and in CheckComputationExpressions.fs \u0022notes\u0022 the debug point ranges for the relevant constructs attaching them to the \u0060task.While(...)\u0060 call ([example permalink](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/CheckComputationExpressions.fs#L960))\r\n* The code is then checked and optimized, and all the resumable code is inlined, e.g. [\u0060task.While\u0060](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/FSharp.Core/tasks.fs#L64) becomes [\u0060Resumable.While\u0060](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/FSharp.Core/resumable.fs#L176-L191) which contains a resumable code while loop.\r\n* When inlining the code for \u0060task.While(...)\u0060 and all associated transitive inlining, the \u0060remarkExpr\u0060 routine is invoked as usual to rewrite all ranges throughout all inlined code to be the range of the outer expression, that is, precisely the earlier noted range. Now [\u0060remarkExpr\u0060 is \u0022hacked\u0022 to note that the actual resumable \u0022while\u0022 loop is being inlined at a noted range](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/TypedTreeOps.fs#L5827-L5832), and places a debug point for that resumable while loop.\r\n* The debug ranges are now attached to the resumable code which is then checked for resumable-code validity and emitted, e.g. see [this](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/LowerStateMachines.fs#L298)\r\n\r\nThis however only works fully for those constructs with a single debug point that can be recovered. In particular \u0060TryWith\u0060 and \u0060TryFinally\u0060 have separate problems\r\n\r\n* \u0060task.TryWith(...)\u0060 becomes a resumable code try/with, see [here](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/FSharp.Core/resumable.fs#L216-L230)\r\n* \u0060task.TryFinally(...)\u0060 becomes a resumable code try/with, see [here](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/FSharp.Core/resumable.fs#L272-L305)\r\n* Some debug points associated with these \u0060try/with\u0060 are suppressed in [\u0060remarkExpr\u0060](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/TypedTreeOps.fs#L5862-L5880)\r\n* The debug points for the \u0060with\u0060 and \u0060finally\u0060 are not currently recovered.\r\n\r\n### Internals: debug points for other computation expressions\r\n\r\nAs mentioned above, other computation expressions such as \u0060async { .. }\u0060 have significant problems with their debug points.\r\n\r\n\u003E NOTE: A systematic solution for quality debugging of computation expressions and resumable code is still elusive.  It really needs the de-sugaring to explicitly or implicitly pass down the debug points through the process of inlining code.  For example consider the de-sugaring:\r\n\r\n\u0060\u0060\u0060fsharp\r\n   builder { for x in xs do ... } --\u003E builder.For(xs, fun x -\u003E ...)\r\n\u0060\u0060\u0060\r\n\r\nHere the debug points could be made explicit and passed as \u0022compile-time parameters\u0022 (assuming inlining)\r\n\r\n\u0060\u0060\u0060fsharp\r\n   builder { for[dp] x in xs do ... } --\u003E builder.For(dp, xs, fun x -\u003E ...)\r\n\u0060\u0060\u0060\r\n\r\nThese could then be used in the implementation:\r\n\r\n\u0060\u0060\u0060fsharp\r\ntype MuBuilder() =\r\n    // Some builder implementation of \u0022For\u0022 - let\u0027s say it prints at each iteration of the loop\r\n    member inline _.For(dp, xs, f) =\r\n        for[dp] x in xs do\r\n           printfn \u0022loop...\u0022\r\n           f x\r\n\u0060\u0060\u0060\r\n\r\nAdding such compile-time parameters would be over-kill, but it may be possible to augment the compiler to keep a well-specified environment through the process of inlining, e.g.\r\n\r\n\u0060\u0060\u0060fsharp\r\n   builder { for[dp] x in xs do ... } --\u003E builder.For[\u0022for-debug-point\u0022--\u003Edp](xs, fun x -\u003E ...)\r\n\u0060\u0060\u0060\r\n\r\nAnd then there is some way to access this and attach to various control constructs:\r\n\r\n\u0060\u0060\u0060fsharp\r\ntype MuBuilder() =\r\n    // Some builder implementation of \u0022For\u0022 - let\u0027s say it prints at each iteration of the loop\r\n    member inline _.For(dp, xs, f) =\r\n        for[\u0022for-debug-point\u0022] x in xs do\r\n           printfn \u0022loop...\u0022\r\n           f x\r\n\u0060\u0060\u0060\r\n\r\nIf carefully used this would allow reasonable debugging across multiple-phase boundaries.\r\n\r\n\u003E NOTE: The use of library code to implement \u0022async\u0022 and similar computation expressions also interacts badly with \u0022Just My Code\u0022 debugging, see https://github.com/dotnet/fsharp/issues/5539 for example.\r\n\r\n\u003E NOTE: The use of many functions to implement \u0022async\u0022 and friends implements badly with \u0022Step Into\u0022 and \u0022Step Over\u0022 and related attributes, see for example https://github.com/dotnet/fsharp/issues/3359\r\n\r\n### FeeFee and F00F00 debug points (Hidden and JustMyCodeWithNoSource)\r\n\r\nSome fragments of code use constructs generate calls and other IL code that should not have debug points and not participate in \u0022Step Into\u0022, for example. These are generated in IlxGen as \u0022FeeFee\u0022 debug points. See the [old blog post on this](https://docs.microsoft.com/en-us/dotnet/api/system.reflection.metadata.sequencepoint.hiddenline?view=net-5.0).\r\n\r\n\u003E TODO: There is also the future prospect of generating \u0060JustMyCodeWithNoSource\u0060 (0xF00F00) debug points but these are not yet emitted by F#.  We should check what this is and when the C# compiler emits these.\r\n\r\n\u003E NOTE: We always make space for a debug point at the head of each method by [emitting a FeeFee debug sequence point](https://github.com/dotnet/fsharp/blob/main/src/fsharp/IlxGen.fs#L1953). This may be immediately replaced by a \u0022real\u0022 debug point [here](https://github.com/dotnet/fsharp/blob/main/src/fsharp/IlxGen.fs#L2019).\r\n\r\n## Generated code\r\n\r\nThe F# compiler generates entire IL classes and methods for constructs such as records, closures, state machines and so on. Each time code is generated we must carefully consider what attributes and debug points are generated.\r\n\r\n### Generated \u0022augment\u0022 methods for records, unions and structs\r\n\r\nWe currently always emit a debug sequence point for all generated code coming from AugmentWithHashCompare.fs (also  anything coming out of optimization etc.)  The \u0060SPAlways\u0060 at https://github.com/dotnet/fsharp/blob/main/src/fsharp/IlxGen.fs#L4801 has the effect that a debug point based on the range of the method will always appear.\r\n\r\n### Generated \u0022New*\u0022, \u0022Is*\u0022, \u0022Tag\u0022 etc. for unions\r\n\r\nDiscriminated unions generate \u0060NewXYZ\u0060, \u0060IsXYZ\u0060, \u0060Tag\u0060 etc. members and the implementations of these lay down debug points. See [here](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/ilx/EraseUnions.fs#L644) for the data that drives this and track back and forth to the production and consumption points of that data.\r\n\r\nThese all get \u0060CompilerGeneratedAttribute\u0060, and \u0060DebuggerNonUserCodeAttribute\u0060, e.g. [here (permalink)](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/ilx/EraseUnions.fs#L635)\r\n\r\n\u003E TODO: generating debug points for these appears wrong, being assessed at time of writing\r\n\r\n\u003E TODO: we should also consider emitting \u0060ExcludeFromCodeCoverageAttribute\u0060, being assessed at time of writing\r\n\r\n### Generated closures for lambdas\r\n\r\nThe debug codegen involved in closures is as follows:\r\n\r\n|  Source         | Construct         | Debug Points | Attributes   |\r\n|:----------------|:------------------|:-------------|:-------------|\r\n| (fun x -\u003E ...)  | Closure class     |              |              |\r\n|                 | \u0060.ctor\u0060 method    | [none](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/ilx/EraseClosures.fs#L584)     | CompilerGenerated, DebuggerNonUserCode |\r\n|                 | \u0060Invoke\u0060 method   | from body of closure     |                                        |\r\n| generic local defn  | Closure class |      |                                        |\r\n|                 | \u0060.ctor\u0060 method    | [none](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/ilx/EraseClosures.fs#L486)     | CompilerGenerated, DebuggerNonUserCode |\r\n|                 | \u0060Specialize\u0060 method |  from body of closure  |                                        |\r\n|  Intermediate closure classes   |  For long curried closures \u0060fun a b c d e f -\u003E ...\u0060.  | See [here](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/ilx/EraseClosures.fs#L459) and [here](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/ilx/EraseClosures.fs#L543).  | CompilerGenerated, DebuggerNonUserCode     |\r\n\r\n\u003E TODO: generating debug points for the intermediate closures appears wrong, this is being assessed at time of writing\r\n\r\n\u003E TODO: we should also consider emitting \u0060ExcludeFromCodeCoverageAttribute\u0060, being assessed at time of writing\r\n\r\n### Generated state machines for \u0060seq { .. }\u0060\r\n\r\nSequence expressions generate class implementations which resemble closures.\r\n\r\nThe debug points recovered for the generated state machine code for \u0060seq { ... }\u0060 is covered up above. The other codegen is as follows:\r\n\r\n|  Source         | Construct         | Debug Points | Attributes   |\r\n|:----------------|:------------------|:-------------|:-------------|\r\n| seq { ... }     | State machine class |            |  \u0022Closure\u0022             |\r\n|                 | \u0060.ctor\u0060 method    |   none      |  [none](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/IlxGen.fs#L5150) |\r\n|                 | \u0060GetFreshEnumerator\u0060   |  [none](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/IlxGen.fs#L5108)  | CompilerGenerated, DebuggerNonUserCode |\r\n|                 | \u0060LastGenerated\u0060   |  [none](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/IlxGen.fs#L5146-L5148)  | CompilerGenerated, DebuggerNonUserCode |\r\n|                 | \u0060Close\u0060   |  [none](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/IlxGen.fs#L5124-L5127)  | none |\r\n|                 | \u0060get_CheckClose\u0060  |  [none](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/IlxGen.fs#L5130-L5133)  | none |\r\n|                 | \u0060GenerateNext\u0060    |  from desugaring, and [here](https://github.com/dotnet/fsharp/blob/db2c9da8d1e76d11217d6da53a64253fd0df0246/src/fsharp/IlxGen.fs#L5136-L5143) | none |\r\n\r\n\u003E NOTE: it appears from the code that extraneous debug points are not being generated, which is good, though should be checked\r\n\r\n\u003E TODO: we should likely be generating attributes for the \u0060Close\u0060 and \u0060get_CheckClose\u0060 and \u0060.ctor\u0060 methods\r\n\r\n\u003E TODO: we should also consider emitting \u0060ExcludeFromCodeCoverageAttribute\u0060, being assessed at time of writing\r\n\r\n### Generated state machines for \u0060task { .. }\u0060\r\n\r\n[Resumable state machines](https://github.com/fsharp/fslang-design/blob/main/FSharp-6.0/FS-1087-resumable-code.md) used for \u0060task { .. }\u0060 also generate struct implementations which resemble closures.\r\n\r\nThe debug points recovered for the generated state machine code for \u0060seq { ... }\u0060 is covered up above. The other codegen is as follows:\r\n\r\n|  Source         | Construct         | Debug Points | Attributes   | Notes |\r\n|:----------------|:------------------|:-------------|:-------------|:------|\r\n| task { ... }     | State machine struct |          |  \u0022Closure\u0022   |       |\r\n|                 | \u0060.ctor\u0060 method    |   none      |  none       | |\r\n|                 | TBD               |              |              | |\r\n\r\n\u003E TODO: we should be generating attributes for some of these\r\n\r\n\u003E TODO: we should assess that only the \u0022MoveNext\u0022 method gets any debug points at all\r\n\r\n### Generated code for delegate constructions \u0060Func\u003Cint,int\u003E(fun x y -\u003E x \u002B y)\u0060\r\n\r\nA closure class is generated.\r\n\r\n### Generated code for constant-sized array and list expressions\r\n\r\nThese are not generally problematic for debug.\r\n\r\n### Generated code for large constant arrays\r\n\r\nThese are not generally problematic for debug.\r\n\r\n### Generated code for pattern matching\r\n\r\nThe implementation is a little gnarly and complicated and has historically had glitches.\r\n\r\n### Generated code for conditionals and boolean logic\r\n\r\nGenerally straight-forward. See for example [this proposed feature improvement](https://github.com/dotnet/fsharp/issues/11980)\r\n\r\n### Capture and closures\r\n\r\nCaptured locals are available via the \u0060this\u0060 pointer of the immediate closure.  Un-captured locals are **not** available as things stand.  See for example [this proposed feature improvement](https://github.com/dotnet/fsharp/issues/11262).\r\n\r\nConsider this code:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet F() =\r\n    let x = 1\r\n    let y = 2\r\n    (fun () -\u003E x \u002B y)\r\n\u0060\u0060\u0060\r\n\r\nHere \u0060x\u0060 and \u0060y\u0060 become closure fields of the closure class generated for the final lambda. When inspecting locals in the inner closure, the C# expression evaluator we rely on for Visual Studio takes local names like \u0060x\u0060 and \u0060y\u0060 and is happy to look them up via \u0060this\u0060. This means hovering over \u0060x\u0060 correctly produces the value stored in \u0060this.x\u0060.\r\n\r\nFor nested closures, values are implicitly re-captured, and again the captured locals will be available.\r\n\r\nHowever this doesn\u0027t work with \u0022capture\u0022 from a class-defined \u0022let\u0022 context. Consider the following variation:\r\n\r\n\u0060\u0060\u0060fsharp\r\ntype C() =\r\n    let x = 1\r\n    member _.M() = \r\n        let y = 2\r\n        (fun () -\u003E x \u002B y)\r\n\u0060\u0060\u0060\r\n\r\nHere the implicitly captured local is \u0060y\u0060, but \u0060x\u0060 is **not** captured, instead it is implicitly rewritten by the F# compiler to \u0060c.x\u0060 where \u0060c\u0060 is the captured outer \u0022this\u0022 pointer of the invocation of \u0060M()\u0060.  This means that hovering over \u0060x\u0060 does not produce a value. See [issue 3759](https://github.com/dotnet/fsharp/issues/3759).\r\n\r\n### Provided code\r\n\r\nCode provided by erasing type providers has all debugging points removed.  It isn\u0027t possible to step into such code or if there are implicit debug points they will be the same range as the construct that was macro-expanded by the code erasure. \r\n\r\n\u003E For example, a [provided if/then/else expression has no debug point](https://github.com/dotnet/fsharp/blob/main/src/fsharp/MethodCalls.fs#L1805)\r\n\r\n## Added code generation for better debugging\r\n\r\nWe do some \u0022extra\u0022 code gen to improve debugging. It is likely much of this could be removed if we had an expression evaluator for F#.\r\n\r\n### \u0027this\u0027 value\r\n\r\nFor \u0060member x.Foo() = ...\u0060 the implementation of the member adds a local variable \u0060x\u0060 containing the \u0060this\u0060 pointer from \u0060ldarg.0\u0060. THis means hovering over \u0060x\u0060 in the method produces the right value, as does \u0060x.Property\u0060 etc.\r\n\r\n### Pipeline debugging\r\n\r\nFor pipeline debugging we emit extra locals for each stage of a pipe and debug points at each stage.\r\n\r\nSee [pipeline debugging mini-spec](https://github.com/dotnet/fsharp/pull/11957).\r\n\r\n### Shadowed locals\r\n\r\nFor shadowed locals we change the name of a local for the scope for which it is shadowed.\r\n\r\nSee [shadowed locals mini-spec](https://github.com/dotnet/fsharp/pull/12018).\r\n\r\n### Discriminated union debug display text\r\n\r\nFor discriminated union types and all implied subtypes we emit a \u0060DebuggerDisplayAttrubte\u0060 and a private \u0060__DebugDisplay()\u0060 method that uses \u0060sprintf \u0022%\u002B0.8A\u0022 obj\u0060 to format the object.\r\n\r\n## Missing debug emit\r\n\r\n### Missing debug emit for PDBs\r\n\r\nOur PDB emit is missing considerable information:\r\n\r\n* Not emitted: [LocalConstants table](https://github.com/dotnet/fsharp/issues/12003)\r\n* Not emitted: [Compilation options table](https://github.com/dotnet/fsharp/issues/12002)\r\n* Not emitted: [Dynamic local variables table](https://github.com/dotnet/fsharp/issues/12001)\r\n* Not emitted: [StateMachineMethod table and StateMachineHoistedLocalScopes table](https://github.com/dotnet/fsharp/issues/12000)\r\n* Not emitted: [ImportScopes table](https://github.com/dotnet/fsharp/issues/1003)\r\n\r\nThese are major holes in the F# experience. Some are required for things like hot-reload.\r\n\r\n### Missing design-time services\r\n\r\nSome design-time services are un-implemented by F#:\r\n\r\n* Unimplemented: [F# expression evaluator](https://github.com/dotnet/fsharp/issues/2544)\r\n* Unimplemented: [Proximity expressions](https://github.com/dotnet/fsharp/issues/4271) (for Autos window)\r\n\r\nThese are major holes in the F# experience and should be implemented.\r\n\r\n### Missing debug emit for F# Interactive\r\n\r\nFor F# Interactive [we do not currently emit debug information for script code](https://github.com/dotnet/fsharp/issues/5457). This is because of a missing piece of functionality in the Reflection.Emit APIs, and means we have to change our approach to emitting code fragments in F# Interactive to no longer use dynamic assemblies.\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/diagnostics.html","title":"Diagnostics","content":"---\r\ntitle: Diagnostics\r\ncategory: Compiler Internals\r\ncategoryindex: 200\r\nindex: 300\r\n---\r\n# Diagnostics\r\n\r\nThe key types are \r\n\r\n* \u0060ErrorLogger\u0060\r\n* \u0060FSharpDiagnosticSeverity\u0060\r\n* \u0060FSharpDiagnostic\u0060\r\n\r\nand functions\r\n\r\n* \u0060warning\u0060 - emit a warning\r\n* \u0060errorR\u0060 - emit an error and continue\r\n* \u0060error\u0060 - emit an error and throw an exception\r\n* \u0060errorRecovery\u0060 - recover from an exception\r\n\r\n## Diagnostic messages\r\n\r\nFor the compiler, a key file is \u0060FSComp.txt\u0060 olding most of the messages. There are also a few other similar files including some old error messages in \u0060FSStrings.resx\u0060.\r\n\r\n## Adding Diagnostics\r\n\r\nAdding or adjusting diagnostics emitted by the compiler is usually straightforward (though it can sometimes imply deeper compiler work). Here\u0027s the general process:\r\n\r\n1. Reproduce the compiler error or warning with the latest F# compiler built from the [F# compiler repository](https://github.com/dotnet/fsharp).\r\n2. Find the error code (such as \u0060FS0020\u0060) in the message.\r\n3. Use a search tool and search for a part of the message. You should find it in \u0060FSComp.fs\u0060 with a title, such as \u0060parsMissingTypeArgs\u0060.\r\n4. Use another search tool or a tool like Find All References / Find Usages to see where it\u0027s used in the compiler source code.\r\n5. Set a breakpoint at the location in source you found. If you debug the compiler with the same steps, it should trigger the breakpoint you set. This verifies that the location you found is the one that emits the error or warning you want to improve.\r\n\r\nFrom here, you can either simply update the error test, or you can use some of the information at the point in the source code you identified to see if there is more information to include in the error message. For example, if the error message doesn\u0027t contain information about the identifier the user is using incorrectly, you may be able to include the name of the identifier based on data the compiler has available at that stage of compilation.\r\n\r\nIf you\u0027re including data from user code in an error message, it\u0027s important to also write a test that verifies the exact error message for a given string of F# code.\r\n\r\n## Formatting Typed Tree items in Diagnostics\r\n\r\nDiagnostics must often format TAST items as user text. When formatting these, you normally use either\r\n\r\n* The functions in the \u0060NicePrint\u0060 module such as \u0060NicePrint.outputTyconRef\u0060. These take a \u0060DisplayEnv\u0060 that records the context in which a type was referenced, for example, the open namespaces. Opened namespaces are not shown in the displayed output.\r\n\r\n* The \u0060DisplayName\u0060 properties on the relevant object. This drops the \u0060\u0027n\u0060 text that .NET adds to the compiled name of a type, and uses the F#-facing name for a type rather than the compiled name for a type (for example, the name given in a \u0060CompiledName\u0060 attribute).\r\n\r\nWhen formatting \u0022info\u0022 objects, see the functions in the \u0060NicePrint\u0060 module.\r\n\r\n## Notes on displaying types\r\n\r\nDiagnostics must often format types.\r\n\r\n* When displaying a type, you will normally want to \u0022prettify\u0022 the type first. This converts any remaining type inference variables to new, better user-friendly type variables with names like \u0060\u0027a\u0060. Various functions prettify types prior to display, for example, \u0060NicePrint.layoutPrettifiedTypes\u0060 and others.\r\n\r\n* When displaying multiple types in a comparative way, for example, two types that didn\u0027t match, you will want to display the minimal amount of infomation to convey the fact that the two types are different, for example, \u0060NicePrint.minimalStringsOfTwoTypes\u0060.\r\n\r\n* When displaying a type, you have the option of displaying the constraints implied by any type variables mentioned in the types, appended as \u0060when ...\u0060. For example, \u0060NicePrint.layoutPrettifiedTypeAndConstraints\u0060.\r\n\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fsharp-core-notes.html","title":"Guidance","content":"---\r\ntitle: Guidance\r\ncategory: FSharp.Core\r\ncategoryindex: 500\r\nindex: 100\r\n---\r\n# Notes and Guidance on FSharp.Core\r\n\r\nThis technical guide discusses the FSharp.Core library.\r\n\r\nReference documentation for FSharp.Core can be found here: https://fsharp.github.io/fsharp-core-docs/\r\n\r\nMuch of the guidance below applies to any .NET library respecting binary compatibility.\r\n\r\n## FSharp.Core is binary compatible\r\n\r\nFSharp.Core is binary compatible across versions of the F# language. For example, this means you can create a newer project with a newer FSharp.Core in an older codebase and things should generally \u0022just work\u0022.\r\n\r\n**Binary compatibility means that a component built for X can bind to Y at runtime. It doesn\u0027t mean that Y behaves 100% the same as X, though.** For example, an older compiler that doesn\u0027t know how to understand \u0060inref\u003C\u0027T\u003E\u0060 referencing a newer FSharp.Core that has \u0060inref\u003C\u0027T\u003E\u0060 defined may not behave correctly if \u0060inref\u003C\u0027T\u003E\u0060 is used in source.\r\n\r\n## FSharp.Core and F# scripts\r\n\r\nF# scripts, executed by F# interactive, execute against the FSharp.Core deployed with the .NET SDK you are using. If you\u0027re expecting to use a more modern library feature and find that it\u0027s missing, it\u0027s likely because you have an older .NET SDK and thus an older F# Interactive. Upgrade your .NET SDK.\r\n\r\n## Guidance for package authors\r\n\r\nIf you are authoring a NuGet package for consumption in the F# and .NET ecosystem, you already have to make a decision about functionality vs. reach by deciding what target framework(s) you support.\r\n\r\nAs an F# package author, you also need to make this decision with respect to FSharp.Core:\r\n\r\n* Targeting an earlier version of FSharp.Core increases your reach because older codebases can use it without issue\r\n* Targeting a newer version of FSharp.Core lets you use and extend newer features\r\n\r\nThis decision is critical, because it can have a network effect. If you choose a higher FSharp.Core version, then that also becomes a dependency for any other package that may depend on your package.\r\n\r\n### Package authors should pin their FSharp.Core reference\r\n\r\nThe default templates for F# projects carry an implicit reference to FSharp.Core. This is ideal for application developers, since applications almost always want to be referencing the highest FSharp.Core available to them. As you upgrade your .NET SDK, the FSharp.Core package referenced implicitly will also be upgraded over time, since FSharp.Core is also distributed with the .NET SDK.\r\n\r\nHowever, as a package author this means that unless you reference FSharp.Core explicitly, you will default to the latest possible version and thus eliminate any hope of reaching older projects in older environments.\r\n\r\n### How to explicitly reference FSharp.Core\r\n\r\nIt\u0027s a simple gesture in your project file that pins to FSharp.Core 4.7.2:\r\n\r\n\u0060\u0060\u0060xml\r\n\u003CItemGroup\u003E\r\n  \u003CPackageReference Update=\u0022FSharp.Core\u0022 Version=\u00224.7.2\u0022 /\u003E\r\n\u003C/ItemGroup\u003E\r\n\u0060\u0060\u0060\r\n\r\nOr if you\u0027re using Paket:\r\n\r\n\u0060\u0060\u0060\r\nnuget FSharp.Core \u003E= 4.7.2\r\n\u0060\u0060\u0060\r\n\r\nAnd that\u0027s it!\r\n\r\n### Compatibility table\r\n\r\nThe following table can help you decide the minimum language/package version you want to support:\r\n\r\n|Minimum F# language version|Minimum FSharp.Core package version|\r\n|------------------------------|------------------------------|\r\n|F# 4.1|4.3.4|\r\n|F# 4.5|4.5.2|\r\n|F# 4.6|4.6.2|\r\n|F# 4.7|4.7.2|\r\n|F# 5.0|5.0.0|\r\n|F# 6.0|6.0.0|\r\n\r\nIf you want to be compatible with much older projects using an F# 4.0 compiler or earlier, you can still do that but it\u0027s not recommended. People using those codebases should upgrade instead.\r\n\r\n### Do *not* bundle FSharp.Core directly with a library \r\n\r\nDo _not_ include a copy of FSharp.Core with your library or package, such in the \u0060lib\u0060 folder of a package. If you do this, you will create havoc for users of your library.\r\n\r\nThe decision about which \u0060FSharp.Core\u0060 a library binds to is up to the application hosting of the library.\r\n\r\n## Guidance for everyone else\r\n\r\nIf you\u0027re not authoring packages for distribution, you have a lot less to worry about.\r\n\r\nIf you are distributing library code across a private organization as if it were a NuGet package, please see the above guidance, as it likely still applies. Otherwise, the below guidance applies.\r\n\r\n### Application authors don\u0027t have to explicitly reference FSharp.Core\r\n\r\nIn general, applications can always just use the latest FSharp.Core bundled in the SDK they are built with.\r\n\r\n### C# projects referencing F# projects may need to pin FSharp.Core\r\n\r\nYou can reference an F# project just fine without needing to be explicit about an FSharp.Core reference when using C# projects based on the .NET SDK. References flow transitively for SDK-style projects, so even if you need to use types directly from FSharp.Core (which you probably shouldn\u0027t do anyways) it will pick up the right types from the right assembly.\r\n\r\nIf you do have an explicit FSharp.Core reference in your C# project that you **need**, you should pin your FSharp.Core reference across your entire codebase. Being in a mixed pinned/non-pinned world is difficult to keep straight over a long period of time.\r\n\r\n## Guidance for older projects, compilers, and tools\r\n\r\nModern .NET development, including F#, uses SDK-style projects. You can read about that here: https://docs.microsoft.com/dotnet/core/project-sdk/overview\r\n\r\nIf you are not using SDK-style projects F# projects and/or have an older toolset, the following guidance applies.\r\n\r\n### Consider upgrading\r\n\r\nYes, really. The old project system that manages legacy projects is not that good, the compiler is older and unoptimized for supporting larger codebases, tooling is not as responsive, etc. You will really have a much better life if you upgrade. Try out the \u0060try-convert\u0060 tool to do that: https://github.com/dotnet/try-convert\r\n\r\nIf you cannot upgrade for some reason, the rest of the guidance applies.\r\n\r\n### Always deploy FSharp.Core as part of a compiled application\r\n\r\nFor applications, FSharp.Core is normally part of the application itself (so-called \u0022xcopy deploy\u0022 of FSharp.Core).  \r\n\r\nFor older project files, you may need to use \u0060\u0060\u003CPrivate\u003Etrue\u003C/Private\u003E\u0060\u0060 in your project file. In  Visual Studio this is equivalent to setting the \u0060CopyLocal\u0060 property to \u0060true\u0060 properties for the \u0060FSharp.Core\u0060 reference.\r\n\r\nFSharp.Core.dll will normally appear in the \u0060bin\u0060 output folder for your application. For example:\r\n\r\n\u0060\u0060\u0060\r\n    Directory of ...\\ConsoleApplication3\\bin\\Debug\\net5.0\r\n    \r\n    18/04/2020  13:20             5,632 ConsoleApplication3.exe\r\n    14/10/2020  12:12         1,400,472 FSharp.Core.dll\r\n\u0060\u0060\u0060\r\n\r\n### FSharp.Core and static linking\r\n\r\nThe ILMerge tool and the F# compiler both allow static linking of assemblies including static linking of FSharp.Core.\r\nThis can be useful to build a single standalone file for a tool.\r\n\r\nHowever, these options must be used with caution. \r\n\r\n* Only use this option for applications, not libraries. If it\u0027s not a .EXE (or a library that is effectively an application) then don\u0027t even try using this option.\r\n\r\nSearching on stackoverflow reveals further guidance on this topic.\r\n\r\n## Reference: FSharp.Core version and NuGet package numbers\r\n\r\nSee [the F# version information RFC](https://github.com/fsharp/fslang-design/blob/master/tooling/FST-1004-versioning-plan.md).\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/index.html","title":"F# compiler guide\r\n","content":"# F# compiler guide\r\n\r\nWelcome to [the F# compiler and tools repository](https://github.com/dotnet/fsharp)! This guide discusses the F# compiler source code and implementation from a technical point of view. \r\n\r\nSee the table of contents on the left. \r\n\r\nThis site also hosts [the documentation for FSharp.Compiler.Service](https://fsharp.github.io/fsharp-compiler-docs/fcs/)\r\n\r\n[Edit the source for these docs](https://github.com/dotnet/fsharp/tree/main/docs). The docs are published automatically daily by [this repo](https://github.com/fsharp/fsharp-compiler-docs).\r\n\r\n## Resources for learning\r\n\r\n* Video: [Learn me some F# Compiler, an online chat with Vlad and Don](https://www.youtube.com/watch?v=-dKf15xSWPY)\r\n\r\n* Video: [Understanding the F# Optimizer, and online chat with Vlad and Don](https://www.youtube.com/watch?v=sfAe5lDue7k)\r\n\r\n* Video: [Lexer and Parser, an online chat with Vlad and Don](https://www.youtube.com/watch?v=3Zr0HNVcooU)\r\n\r\n* Video: [Resumable State Machines, an online chat with Vlad and Don](https://www.youtube.com/watch?v=GYi3ZMF8Pm0)\r\n\r\n* Video: [The Typechecker, an online chat with Vlad and Don](https://www.youtube.com/watch?v=EQ9fjOlmwws)\r\n\r\n* Video: [FSharp.Compiler.Service, an online chat with Vlad and Don](https://www.youtube.com/watch?v=17a3i8WBQpg)\r\n\r\n## Tools to help work with the compiler\r\n\r\n* [sharplab.io](https://sharplab.io/) can be used to decompile code.\r\n\r\n* [fantomas-tools](https://fsprojects.github.io/fantomas-tools/#/ast) can be used to view the Untyped \u0026 Typed Abstract Syntax Tree.\r\n\r\n## Attribution\r\n\r\nThis document is based on an original document published in 2015 by the [F# Software Foundation](http://fsharp.org). It has since been updated substantially.\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/large-inputs-and-stack-overflows.html","title":"Large inputs","content":"---\r\ntitle: Large inputs\r\ncategory: Compiler Internals\r\ncategoryindex: 200\r\nindex: 500\r\n---\r\n# Processing large inputs without stack overflows\r\n\r\nThe compiler accepts large inputs such as:\r\n\r\n* Large literals, such as \u0060let str = \u0022a1\u0022 \u002B \u0022a2\u0022 \u002B ... \u002B \u0022a1000\u0022\u0060\r\n* Large array expressions\r\n* Large list expressions\r\n* Long lists of sequential expressions\r\n* Long lists of bindings, such as \u0060let v1 = e1 in let v2 = e2 in ....\u0060\r\n* Long sequences of \u0060if .. then ... else\u0060 expressions\r\n* Long sequences of \u0060match x with ... | ...\u0060 expressions\r\n* Combinations of these\r\n\r\nThe compiler performs constant folding for large constants so there are no costs to using them at runtime. However, this is subject to a machine\u0027s stack size when compiling, leading to \u0060StackOverflow\u0060 exceptions if those constants are very large. The same can be observed for certain kinds of array, list, or sequence expressions. This appears to be more prominent when compiling on macOS because macOS has a smaller stack size.\r\n\r\nMany sources of \u0060StackOverflow\u0060 exceptions prior to F# 4.7 when processing these kinds of constructs were resolved by processing them on the heap via continuation passing techniques. This avoids filling data on the stack and appears to have negligible effects on overall throughout or memory usage of the compiler.\r\n\r\nThere are two techniques to deal with this\r\n\r\n1. Linearizing processing of specific input shapes, keeping stacks small\r\n2. Using stack guards to simply temporarily move to a new thread when a certain threshold is reached.\r\n\r\n## Linearizing processing if certain inputs\r\n\r\nAside from array expressions, most of the previously-listed inputs are called \u0022linear\u0022 expressions. This means that there is a single linear hole in the shape of expressions. For example:\r\n\r\n* \u0060expr :: HOLE\u0060 (list expressions or other right-linear constructions)\r\n* \u0060expr; HOLE\u0060 (sequential expressions)\r\n* \u0060let v = expr in HOLE\u0060 (let expressions)\r\n* \u0060if expr then expr else HOLE\u0060 (conditional expression)\r\n* \u0060match expr with pat[vs] -\u003E e1[vs] | pat2 -\u003E HOLE\u0060 (for example, \u0060match expr with Some x -\u003E ... | None -\u003E ...\u0060)\r\n\r\nProcessing these constructs with continuation passing is more difficult than a more \u0022natural\u0022 approach that would use the stack.\r\n\r\nFor example, consider the following contrived example:\r\n\r\n\u0060\u0060\u0060fsharp\r\nand remapLinearExpr g compgen tmenv expr contf =\r\n    match expr with\r\n    | Expr.Let (bind, bodyExpr, m, _) -\u003E\r\n        ...\r\n        // tailcall for the linear position\r\n        remapLinearExpr g compgen tmenvinner bodyExpr (contf \u003C\u003C (fun bodyExpr\u0027 -\u003E\r\n            ...))\r\n\r\n    | Expr.Sequential (expr1, expr2, dir, spSeq, m)  -\u003E\r\n        ...\r\n        // tailcall for the linear position\r\n        remapLinearExpr g compgen tmenv expr2 (contf \u003C\u003C (fun expr2\u0027 -\u003E\r\n            ...))\r\n\r\n    | LinearMatchExpr (spBind, exprm, dtree, tg1, expr2, sp2, m2, ty) -\u003E\r\n        ...\r\n        // tailcall for the linear position\r\n        remapLinearExpr g compgen tmenv expr2 (contf \u003C\u003C (fun expr2\u0027 -\u003E  ...))\r\n\r\n    | LinearOpExpr (op, tyargs, argsFront, argLast, m) -\u003E\r\n        ...\r\n        // tailcall for the linear position\r\n        remapLinearExpr g compgen tmenv argLast (contf \u003C\u003C (fun argLast\u0027 -\u003E ...))\r\n\r\n    | _ -\u003E contf (remapExpr g compgen tmenv e)\r\n\r\nand remapExpr (g: TcGlobals) (compgen:ValCopyFlag) (tmenv:Remap) expr =\r\n    match expr with\r\n    ...\r\n    | LinearOpExpr _\r\n    | LinearMatchExpr _\r\n    | Expr.Sequential _\r\n    | Expr.Let _ -\u003E remapLinearExpr g compgen tmenv expr (fun x -\u003E x)\r\n\u0060\u0060\u0060\r\n\r\nThe \u0060remapExpr\u0060 operation becomes two functions, \u0060remapExpr\u0060 (for non-linear cases) and \u0060remapLinearExpr\u0060 (for linear cases). \u0060remapLinearExpr\u0060 uses tailcalls for constructs in the \u0060HOLE\u0060 positions mentioned previously, passing the result to the continuation.\r\n\r\nSome common aspects of this style of programming are:\r\n\r\n* The tell-tale use of \u0060contf\u0060 (continuation function)\r\n* The processing of the body expression \u0060e\u0060 of a let-expression is tail-recursive, if the next construct is also a let-expression.\r\n* The processing of the \u0060e2\u0060 expression of a sequential-expression is tail-recursive\r\n* The processing of the second expression in a cons is tail-recursive\r\n\r\nThe previous example is considered incomplete, because arbitrary _combinations_ of \u0060let\u0060 and sequential expressions aren\u0027t going to be dealt with in a tail-recursive way. The compiler generally tries to do these combinations as well.\r\n\r\n## Stack Guards\r\n\r\nThe \u0060StackGuard\u0060 type is used to count synchronous recursive processing and move to a new thread if a limit is reached. Compilation globals are re-installed. Sample:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet TcStackGuardDepth = StackGuard.GetDepthOption \u0022Tc\u0022\r\n\r\n...\r\n   stackGuard = StackGuard(TcMaxStackGuardDepth)\r\n\r\nlet rec ....\r\n\r\nand TcExpr cenv ty (env: TcEnv) tpenv (expr: SynExpr) =\r\n\r\n    // Guard the stack for deeply nested expressions\r\n    cenv.stackGuard.Guard \u003C| fun () -\u003E\r\n\r\n    ...\r\n\r\n\u0060\u0060\u0060\r\n\r\nNote stack guarding doesn\u0027t result in a tailcall so will appear in recursive stack frames, because a counter must be decremented after the call. This is used systematically for recursive processing of:\r\n\r\n* SyntaxTree SynExpr\r\n* TypedTree Expr\r\n\r\nWe don\u0027t use it for other inputs.\r\n\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/memory-usage.html","title":"Memory usage","content":"---\r\ntitle: Memory usage\r\ncategory: Compiler Internals\r\ncategoryindex: 200\r\nindex: 600\r\n---\r\n# Compiler Memory Usage\r\n\r\nOverall memory usage is a primary determinant of the usability of the F# compiler and instances of the F# compiler service. \r\n\r\n## Why memory usage matters\r\n\r\nOverly high memory usage results in poor throughput (particularly due to increased GC times) and low user interface responsivity in tools such as Visual Studio or other editing environments. In some extreme cases, it can lead to Visual Studio crashing or another IDE becoming unusable due to constant paging from absurdly high memory usage. Luckily, these extreme cases are very rare.\r\n\r\nWhen you do a single compilation to produce a binary, memory usage typically doesn\u0027t matter much. It\u0027s often fine to allocate a lot of memory because it will just be reclaimed after compilation is over.\r\n\r\nHowever, the F# compiler is not simply a batch process that accepts source code as input and produces an assembly as output. When you consider the needs of editor and project tooling in IDEs, the F# compiler is:\r\n\r\n* A database of syntactic and semantic data about the code hosted in an IDE\r\n* An API for tools to request tooling-specific data (e.g. F# tooltip information)\r\n* In FsAutoComplete or other LSP implementations, it\u0027s a server process that accepts requests for syntactic and semantic information\r\n\r\nThinking about the F# compiler in these ways makes performance far more complicated than just throughput of a batch compilation process.\r\n\r\n## Analyzing compiler memory usage\r\n\r\nIn general, the F# compiler allocates a lot of memory. More than it needs to. However, most of the \u0022easy\u0022 sources of allocations have been squashed out and what remains are many smaller sources of allocations. The remaining \u0022big\u0022 pieces allocate as a result of their current architecture, so it isn\u0027t straightforward to address them.\r\n\r\nSome allocations are much more than others\r\n* Large Object Heap (LOH) allocations (\u003E ~80K) are rarely collected and should only be used for long-lived items. \r\n* Ephemeral allocations that never escape the Gen0 seem to not matter that much, though of course should be considered.\r\n* Don\u0027t try to remove all allocations, and don\u0027t asseume copy large structs is better than allocating a reference type. Measure instead.\r\n\r\nTo analyze memory usage of F# tooling, you have two primary avenues:\r\n\r\n1. Take a process dump on your machine and analyze it \r\n2. Use sampling to collect a trace of your system while you perform various tasks in an IDE, ideally for 60 seconds or more.\r\n\r\nYou can analyze dumps and take samples with [dotMemory](https://www.jetbrains.com/dotmemory/) or [PerfView](https://github.com/Microsoft/perfview).\r\n\r\n### Analyzing a process dump file\r\n\r\nProcess dump files are extremely information-rich data files that can be used to see the distribution of memory usage across various types. Tools like [dotMemory](https://www.jetbrains.com/dotmemory/) will show these distributions and intelligently group things to help identify the biggest areas worth improving. Additionally, they will notice things like duplicate strings and sparse arrays, which are often great ways to improve memory usage since it means more memory is being used than is necessary.\r\n\r\n### Analyzing a sample trace of IDE usage\r\n\r\nThe other important tool to understand memory and CPU usage for a given sample of IDE usage is a trace file. These are collected and analyzed by tools like [PerfView](https://github.com/Microsoft/perfview) and [dotTrace](https://www.jetbrains.com/profiler/).\r\n\r\nWhen analyzing a trace, there are a few things to look out for:\r\n\r\n1. Overall GC statistics for the sample to give an overall picture of what was going on in the IDE for your sample:\r\n   a. How much CPU time was spent in the GC as a percentage of total CPU time for the IDE process?\r\n   b. What was the peak working set (total memory usage)?\r\n   c. What was the peak allocations per second?\r\n   d. How many allocations were Gen0? Gen1? Gen2?\r\n2. Memory allocations for the sample, typically also ignoring object deaths:\r\n   a. Is \u0060LargeObject\u0060 showing up anywhere prominently? If so, that\u0027s a problem!\r\n   b. Which objects show up highest on the list? Does their presence that high make sense?\r\n   c. For a type such as \u0060System.String\u0060, which caller allocates it the most? Can that be improved?\r\n3. CPU sampling data, sorted by most CPU time\r\n   a. Are any methods showing up that correspond with high memory allocations? Something showing up prominently in both places is often a sign that it needs work!\r\n\r\nAfter analyzing a trace, you should have a good idea of places that could see improvement. Often times a tuple can be made into a struct tuple, or some convenient string processing could be adjusted to use a \u0060ReadonlySpan\u003C\u0027T\u003E\u0060 or turned into a more verbose loop that avoids allocations.\r\n\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/optimizations.html","title":"Optimizations","content":"---\r\ntitle: Optimizations\r\ncategory: Compiler Internals\r\ncategoryindex: 200\r\nindex: 400\r\n---\r\n# Code Optimizations\r\n\r\nCode optimizations are performed in [\u0060Optimizer.fs\u0060](https://github.com/dotnet/fsharp/blob/main/src/fsharp/Optimizer.fs), [\u0060DetupleArgs.fs\u0060](https://github.com/dotnet/fsharp/blob/main/src/fsharp/DetupleArgs.fs), [\u0060InnerLambdasToTopLevelFuncs.fs\u0060](https://github.com/dotnet/fsharp/blob/main/src/fsharp/InnerLambdasToTopLevelFuncs.fs) and [\u0060LowerCallsAndSeqs.fs\u0060](https://github.com/dotnet/fsharp/blob/main/src/fsharp/LowerCallsAndSeqs.fs).\r\n\r\nSome of the optimizations performed in [\u0060Optimizer.fs\u0060](https://github.com/dotnet/fsharp/blob/main/src/fsharp/Optimizer.fs) are:\r\n\r\n* Propagation of known values (constants, x = y, lambdas, tuples/records/union-cases of known values)\r\n* Inlining of known lambda values\r\n* Eliminating unused bindings\r\n* Eliminating sequential code when there is no side-effect\r\n* Eliminating switches when we determine definite success or failure of pattern matching\r\n* Eliminating getting fields from an immutable record/tuple/union-case of known value\r\n* Expansion of tuple bindings \u0022let v = (x1,...x3)\u0022 to avoid allocations if it\u0027s not used as a first class value\r\n* Splitting large functions into multiple methods, especially at match cases, to avoid massive methods that take a long time to JIT\r\n* Removing tailcalls when it is determined that no code in the transitive closure does a tailcall nor recurses\r\n\r\nIn [\u0060DetupleArgs.fs\u0060](https://github.com/dotnet/fsharp/blob/main/src/fsharp/DetupleArgs.fs), tuples at call sites are eliminated if possible. Concretely, functions that accept a tuple at all call sites are replaced by functions that accept each of the tuple\u0027s arguments individually. This may require inlining to activate.\r\n\r\nConsidering the following example:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet max3 t =\r\n    let (x, y, z) = t\r\n    max x (max y z)\r\n\r\nmax3 (1, 2, 3)\r\n\u0060\u0060\u0060\r\n\r\nThe \u0060max3\u0060 function gets rewritten to simply accept three arguments, and depending on how it gets called it will either get inlined at the call site or called with 3 arguments instead of a new tuple. In either case, the tuple allocation is eliminated.\r\n\r\nHowever, sometimes this optimization is not applied unless a function is marked \u0060inline\u0060. Consider a more complicated case:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet rec runWithTuple t offset times =\r\n    let offsetValues x y z offset =\r\n        (x \u002B offset, y \u002B offset, z \u002B offset)\r\n    if times \u003C= 0 then\r\n        t\r\n    else\r\n        let (x, y, z) = t\r\n        let r = offsetValues x y z offset\r\n        runWithTuple r offset (times - 1)\r\n\u0060\u0060\u0060\r\n\r\nThe inner function \u0060offsetValues\u0060 will allocate a new tuple when called. However, if \u0060offsetValues\u0060 is marked as \u0060inline\u0060 then it will no longer allocate a tuple.\r\n\r\nCurrently, these optimizations are not applied to \u0060struct\u0060 tuples or explicit \u0060ValueTuple\u0060s passed to a function. In most cases, this doesn\u0027t matter because the handling of \u0060ValueTuple\u0060 is well-optimized and may be erased at runtime. However, in the previous \u0060runWithTuple\u0060 function, the overhead of allocating a \u0060ValueTuple\u0060 each call ends up being higher than the previous example with \u0060inline\u0060 applied to \u0060offsetValues\u0060. This may be addressed in the future.\r\n\r\nIn [\u0060InnerLambdasToTopLevelFuncs.fs\u0060](https://github.com/dotnet/fsharp/blob/main/src/fsharp/InnerLambdasToTopLevelFuncs.fs), inner functions and lambdas are analyzed and, if possible, rewritten into separate methods that do not require an \u0060FSharpFunc\u0060 allocation.\r\n\r\nConsider the following implementation of \u0060sumBy\u0060 on an F# list:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet sumBy f xs =\r\n    let rec loop xs acc =\r\n        match xs with\r\n        | [] -\u003E acc\r\n        | x :: t -\u003E loop t (f x \u002B acc)\r\n    loop xs 0\r\n\u0060\u0060\u0060\r\n\r\nThe inner \u0060loop\u0060 function is emitted as a separate static method named \u0060loop@2\u0060 and incurs no overhead involved with allocatin an \u0060FSharpFunc\u0060 at runtime.\r\n\r\nIn [\u0060LowerCallsAndSeqs.fs\u0060](https://github.com/dotnet/fsharp/blob/main/src/fsharp/LowerCallsAndSeqs.fs), a few optimizations are performed:\r\n\r\n* Performs eta-expansion on under-applied values applied to lambda expressions and does a beta-reduction to bind any known arguments\r\n* Analyzes a sequence expression and translates it into a state machine so that operating on sequences doesn\u0027t incur significant closure overhead\r\n\r\n### Potential future optimizations: Better Inlining\r\n\r\nConsider the following example:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet inline f k = (fun x -\u003E k (x \u002B 1))\r\nlet inline g k = (fun x -\u003E k (x \u002B 2))\r\n\r\nlet res = (f \u003C\u003C g) id 1 // 4\r\n\u0060\u0060\u0060\r\n\r\nIntermediate values that inherit from \u0060FSharpFunc\u0060 are allocated at the call set of \u0060res\u0060 to support function composition, even if the functions are marked as \u0060inline\u0060. Currently, if this overhead needs removal, you need to rewrite the code to be more like this:\r\n\r\n\u0060\u0060\u0060fsharp\r\nlet f x = x \u002B 1\r\nlet g x = x \u002B 2\r\n\r\nlet res = id 1 |\u003E g |\u003E f // 4\r\n\u0060\u0060\u0060\r\n\r\nThe downside of course being that the \u0060id\u0060 function can\u0027t propagate to composed functions, meaning the code is now different despite yielding the same result.\r\n\r\nMore generally, any time a first-order function is passed as an argument to a second-order function, the first-order function is not inlined even if everything is marked as \u0060inline\u0060. This results in a performance penalty.\r\n\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/overview.html","title":"Overview","content":"---\r\ntitle: Overview\r\ncategory: Compiler Internals\r\ncategoryindex: 200\r\nindex: 100\r\n---\r\n\r\n# Overview\r\n\r\nThere are several artifacts involved in the development of F#:\r\n\r\n* FSharp.Compiler.Service ([docs](fcs/), [source](https://github.com/dotnet/fsharp/tree/main/src/fsharp)). Contains all logic for F# compilation - including parsing, syntax tree processing, typechecking, constraint solving, optimizations, IL importing, IL writing, pretty printing of F# constructs, and F# metadata format processing - and the F# compiler APIs for tooling.\r\n\r\n* The [F# compiler executable](https://github.com/dotnet/fsharp/tree/main/src/fsharp/fsc), called \u0060fsc\u0060, which is called as a console app. It sets the .NET GC into batch mode and then invokes \u0060FSharp.Compiler.Service\u0060 with command-line arguments.\r\n\r\n* The [FSharp.Core Library](https://github.com/dotnet/fsharp/tree/main/src/fsharp/FSharp.Core), called \u0060FSharp.Core\u0060. Contains all primitive F# types and logic for how they interact, core data structures and library functions for operating on them, structured printing logic, units of measure for scientific programming, core numeric functionality, F# quotations, F# type reflection logic, and asynchronous programming types and logic.\r\n\r\n* The [F# Interactive tool](https://github.com/dotnet/fsharp/tree/main/src/fsharp/fsi), called \u0060fsi\u0060. A REPL for F# that supports execution and pretty-printing of F# code and results, loading F# script files, referencing assemblies, and referencing packages from NuGet.\r\n\r\nThe \u0060FSharp.Compiler.Service\u0060 is by far the largest of these components and contains nearly all logic that \u0060fsc\u0060 and \u0060fsi\u0060 use. It is the primary subject of this guide.\r\n\r\n## Key compiler data formats and representations\r\n\r\nThe following are the key data formats and internal data representations of the F# compiler code in its various configurations:\r\n\r\n* _Input source files_  Read as Unicode text, or binary for referenced assemblies.\r\n\r\n* _Input command-line arguments_  See [CompilerOptions.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/CompilerOptions.fs) for the full code implementing the arguments table. Command-line arguments are also accepted by the F# Compiler Service API in project specifications, and as optional input to F# Interactive.\r\n\r\n* _Tokens_, see [pars.fsy](https://github.com/dotnet/fsharp/blob/main/src/fsharp/pars.fsy), [lex.fsl](https://github.com/dotnet/fsharp/blob/main/src/fsharp/lex.fsl), [lexhelp.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/lexhelp.fs) and related files.\r\n\r\n* _Abstract Syntax Tree (AST)_, see [SyntaxTree.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/SyntaxTree.fs), the untyped syntax tree resulting from parsing.\r\n\r\n* _Typed Abstract Syntax Tree (Typed Tree)_, see [TypedTree.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/TypedTree.fs), [TypedTreeBasics.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/TypedTree.fs), [TypedTreeOps.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/TypedTreeOps.fs), and related files. The typed, bound syntax tree including both type/module definitions and their backing expressions, resulting from type checking and the subject of successive phases of optimization and representation change.\r\n\r\n* _Type checking context/state_, see for example [\u0060TcState\u0060 in ParseAndCheckInputs.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/ParseAndCheckInputs.fsi) and its constituent parts, particularly \u0060TcEnv\u0060 in [CheckExpressions.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/CheckExpressions.fsi) and \u0060NameResolutionEnv\u0060 in [NameResolution.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/NameResolution.fsi). A set of tables representing the available names, assemblies etc. in scope during type checking, plus associated information.\r\n\r\n* _Abstract IL_, the output of code generation, then used for binary generation, and the input format when reading .NET assemblies, see [\u0060ILModuleDef\u0060 in il.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/absil/il.fsi).\r\n\r\n* _The .NET Binary format_ (with added \u0022pickled\u0022 F# Metadata resource), the final output of fsc.exe, see the ECMA 335 specification and the [ilread.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/absil/ilread.fs) and [ilwrite.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/absil/ilwrite.fs) binary reader/generator implementations. The added F# metadata is stored in a binary resource, see [TypedTreePickle.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/TypedTreePickle.fs).\r\n\r\n* _The incrementally emitted .NET reflection assembly,_ the incremental output of fsi.exe. See [ilreflect.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/absil/ilreflect.fs).\r\n\r\n## Key constructs and APIs for F# tooling\r\n\r\nThe following are the most relevant parts of the F# compiler tooling, making up the \u0022engine\u0022 and API surface area of \u0060FSharp.Compiler.Service\u0060.\r\n\r\n* The incremental project build engine state in [IncrementalBuild.fsi](https://github.com/fsharp/FSharp.Compiler.Service/tree/master/src/fsharp/service/IncrementalBuild.fsi)/[IncrementalBuild.fs](https://github.com/fsharp/FSharp.Compiler.Service/tree/master/src/fsharp/service/IncrementalBuild.fs), a part of the F# Compiler Service API.\r\n\r\n* The corresponding APIs wrapping and accessing these structures in the public-facing [\u0060FSharp.Compiler.Service\u0060 API](https://github.com/dotnet/fsharp/tree/main/src/fsharp/service) and [Symbol API](https://github.com/dotnet/fsharp/tree/main/src/fsharp/symbols).\r\n\r\n* The [F# Compiler Service Caches](https://fsharp.github.io/FSharp.Compiler.Service/caches.html), the various caches maintained by an instance of an \u0060FSharpChecker\u0060.\r\n\r\n## Key compiler phases\r\n\r\nThe following is a diagram of how different phases of F# compiler work:\r\n\r\n![F# compiler phases](http://fsharp.github.io/img/fscomp-phases.png)\r\n\r\nThe following are the key phases and high-level logical operations of the F# compiler code in its various configurations:\r\n\r\n* _Basic lexing_. Produces a token stream from input source file text.\r\n\r\n* _White-space sensitive lexing_. Accepts and produces a token stream, augmenting per the F# Language Specification.\r\n\r\n* _Parsing_. Accepts a token stream and produces an AST per the grammar in the F# Language Specification.\r\n\r\n* _Resolving references_. For .NET SDK generally references are resolved explicitly by external tooling.\r\n   There is a legacy aspect to this if references use old .NET Framework references including for\r\n   scripting.  See [ReferenceResolver.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/ReferenceResolver.fs) for the abstract definition of compiler reference resolution. See [LegacyMSBuildReferenceResolver.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/LegacyMSBuildReferenceResolver.fs) for reference resolution used by the .NET Framework F# compiler when running on .NET Framework. See [SimulatedMSBuildReferenceResolver.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/SimulatedMSBuildReferenceResolver.fs) when not using the .NET Framework F# compiler. \r\n   See [DependencyManager](https://github.com/dotnet/fsharp/tree/main/src/fsharp/DependencyManager) for reference resolution and package management used in \u0060fsi\u0060.\r\n\r\n* _Importing referenced .NET binaries_, see [import.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/import.fsi)/[import.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/import.fs). Accepts file references and produces a Typed Tree node for each referenced assembly, including information about its type definitions (and type forwarders if any).\r\n\r\n* _Importing referenced F# binaries and optimization information as Typed Tree data structures_, see [TypedTreePickle.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/TypedTreePickle.fs). Accepts binary data and produces  Typed Tree nodes for each referenced assembly, including information about its type/module/function/member definitions.\r\n\r\n* _Sequentially type checking files_, see [CheckDeclarations.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/CheckDeclarations.fsi)/[CheckDeclarations.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/CheckDeclarations.fs). Accepts an AST plus a type checking context/state and produces new Typed Tree nodes\r\n  incorporated into an updated type checking state, plus additional Typed Tree Expression nodes used during code generation.  A key part of this is\r\n  checking syntactic types and expressions, see [CheckExpressions.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/CheckDeclarations.fsi)/[CheckExpressions.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/CheckDeclarations.fs) including the state held across the checking of a file (see \u0060TcFileState\u0060) and the\r\n  environment active as we traverse declarations and expressions (see \u0060TcEnv\u0060).\r\n\r\n* _Pattern match compilation_, see [PatternMatchCompilation.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/PatternMatchCompilation.fsi)/[PatternMatchCompilation.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/PatternMatchCompilation.fs). Accepts a subset of checked Typed Tree nodes representing F# pattern matching and produces Typed Tree expressions implementing the pattern matching. Called during type checking as each construct involving pattern matching is processed.\r\n\r\n* _Constraint solving_, see [ConstraintSolver.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/ConstraintSolver.fsi)/[ConstraintSolver.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/ConstraintSolver.fs).A constraint solver state is maintained during type checking of a single file, and constraints are progressively asserted (i.e. added to this state). Fresh inference variables are generated and variables are eliminated (solved). Variables are also generalized at various language constructs, or explicitly declared, making them \u0022rigid\u0022. Called during type checking as each construct is processed.\r\n\r\n* _Post-inference type checks_, see [PostInferenceChecks.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/PostInferenceChecks.fsi)/[PostInferenceChecks.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/PostInferenceChecks.fs). Called at the end of type checking/inference for each file. A range of checks that can only be enforced after type checking on a file is complete, such as analysis when using \u0060byref\u003C\u0027T\u003E\u0060 or other \u0060IsByRefLike\u0060 structs.\r\n\r\n* _Quotation translation_, see [QuotationTranslator.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/QuotationTranslator.fsi)/[QuotationTranslator.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/QuotationTranslator.fs)/[QuotationPickler.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/QuotationPickler.fsi)/[QuotationPickler.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/QuotationPickler.fs). Generates the stored information for F# quotation nodes, generated from the Typed Tree expression structures of the F# compiler. Quotations are ultimately stored as binary data plus some added type references. \u0022ReflectedDefinition\u0022 quotations are collected and stored in a single blob.\r\n\r\n* _Optimization phases_, primarily the \u0022Optimize\u0022 (peephole/inlining) and \u0022Top Level Representation\u0022 (lambda lifting) phases, see [Optimizer.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/Optimizer.fsi)/[Optimizer.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/Optimizer.fs) and [InnerLambdasToTopLevelFuncs.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/InnerLambdasToTopLevelFuncs.fsi)/[InnerLambdasToTopLevelFuncs.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/InnerLambdasToTopLevelFuncs.fs) and [LowerCallsAndSeqs.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/LowerCallsAndSeqs.fs). Each of these takes Typed Tree nodes for types and expressions and either modifies the nodes in place or produces new Typed Tree nodes. These phases are orchestrated in [CompilerOptions.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/CompilerOptions.fs)\r\n\r\n* _Code generation_, see [IlxGen.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/IlxGen.fsi)/[IlxGen.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/IlxGen.fs). Accepts Typed Tree nodes and produces Abstract IL nodes, sometimes applying optimizations.\r\n\r\n* _Abstract IL code rewriting_, see [EraseClosures.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/ilx/EraseClosures.fs) and\r\n  [EraseUnions.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/ilx/EraseUnions.fs). Eliminates some constructs by rewriting Abstract IL nodes.\r\n  \r\n* _Binary emit_, see [ilwrite.fsi](https://github.com/dotnet/fsharp/blob/main/src/fsharp/absil/ilwrite.fsi)/[ilwrite.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/absil/ilwrite.fs).\r\n\r\n* _Reflection-Emit_, see [ilreflect.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/absil/ilreflect.fs).\r\n\r\nThese and transformations used to build the following:\r\n\r\n* _The F# Compiler Service API_, see the [Symbol API](https://github.com/dotnet/fsharp/tree/main/src/fsharp/symbols) and [Service API](https://github.com/dotnet/fsharp/tree/main/src/fsharp/service)\r\n\r\n* _The F# Interactive Shell_, see [fsi.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/fsi/fsi.fs).\r\n\r\n* _The F# Compiler Shell_, see [fsc.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/fsc.fs) and [fscmain.fs](https://github.com/dotnet/fsharp/blob/main/src/fsharp/fscmain.fs).\r\n\r\n## Bootstrapping\r\n\r\nThe F# compiler is bootstrapped. That is, an existing F# compiler is used to build a \u0022proto\u0022 compiler from the current source code. That \u0022proto\u0022 compiler is then used to compile itself, producing a \u0022final\u0022 compiler. This ensures the final compiler is compiled with all relevant optimizations and fixes.\r\n\r\n## FSharp.Build\r\n\r\n\u0060FSharp.Build.dll\u0060 and \u0060Microsoft.FSharp.targets\u0060 give MSBuild support for F# projects (\u0060.fsproj\u0060) and contain the. Although not strictly part of the F# compiler, they are essential for using F# in all contexts for .NET, aside from some more targeted scripting scenarios. The targets expose things like the \u0060CoreCompile\u0060 and \u0060Fsc\u0060 tasks called by MSBuild.\r\n\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/project-builds.html","title":"Project builds","content":"---\r\ntitle: Project builds\r\ncategory: Language Service Internals\r\ncategoryindex: 300\r\nindex: 600\r\n---\r\n# Project builds\r\n\r\nThe compiler is generally built to compile one assembly: the assumption that the compiler is compiling one assembly is baked into several aspects of the design of the Typed Tree. In contrast, FCS supports compiling a graph of projects, each for a different assembly, each undergoing incremental change.\r\n\r\nProject builds are currently stateful and reliant on I/O to on-disk assemblies. This causes many problems and we have a plan for how to fix this core issue in the F# Language Service implementation. See [Plan: Modernizing F# Analysis](https://github.com/dotnet/fsharp/issues/11976). Please read this carefully if you plan to work on any of service.fs, IncrementalBuild.fs or FSharpCheckerResults.fs.\r\n\r\nKey data structures:\r\n\r\n* \u0060IncrementalBuilder\u0060  manages an incremental build graph for the build of an F# project.\r\n  * See also [Plan: Modernizing F# Analysis](https://github.com/dotnet/fsharp/issues/11976) for how this will evolve to \u0060FSharpProject\u0060.\r\n\r\n* \u0060FSharpParseFileResults\u0060 -  represents the enrichment (e.g. breakpoint validation) available from the parse tree of a file. The enrichment is made up of several pieces such as:\r\n  * \u0060SyntaxTree\u0060/\u0060ParsedInput\u0060\r\n  * diagnostics from the parsing\r\n\r\n* \u0060FSharpCheckFileResults\u0060 -  represents the enrichment (e.g. tooltips) available after checking a file. The enrichment is made up of several pieces such as\r\n  * \u0060TcGlobals\u0060 - the globals for the compilation, also used in command-line build\r\n  * \u0060TcConfig\u0060 - the compiler configuration for the compilation, also used in command-line build\r\n  * \u0060TcImports\u0060 - the table of imports for the compilation\r\n  * \u0060CcuThunk\u0060 - the thunk of the assembly being compiled\r\n  * \u0060TcState\u0060 - the state of the compilation up to this point\r\n  * \u0060TcResolutions\u0060 - name environments across the file, ultimately from NameResolution.fs\r\n  * \u0060TcSymbolUses\u0060 - resolutions of symbols across the file\r\n  * \u0060LoadClosure\u0060 - the \u0060#load\u0060 closure of a script\r\n  * \u0060TypedImplFile\u0060 - the TAST expression results of compilation, may be thrown away if \u0060keepAssemblyContents\u0060 is not true\r\n\r\n* \u0060FSharpCheckProjectResults\u0060 -  represents the enrichment (e.g. find-all symbol uses) available after checking a project\r\n  * \u0060TcGlobals\u0060 - the globals for the compilation, also used in command-line build\r\n  * \u0060TcConfig\u0060 - the compiler configuration for the compilation, also used in command-line build\r\n  * \u0060TcImports\u0060 - the table of imports for the compilation\r\n  * \u0060CcuThunk\u0060 - the thunk of the assembly being compiled\r\n  * \u0060TcState\u0060 - the final state of the compilation\r\n\r\n## Multi-project builds and cross-project references\r\n\r\nIn FCS, there is no single abstraction for a \u0022solution build\u0022 and instead you have multiple project builds. These are all essentially independent, in the sense they each logically represent an invocation of the F# compiler. That is, the Typed Tree (TAST), TcState etc. nodes are **not** shared between different project compilations. \r\n\r\nIf you want to understand why this invariant is important, some key things to understand are:\r\n\r\n* The \u0060RawFSharpAssemblyData\u0060 is the data blob that would normally be stuffed in the F# resource in the generated DLL  in a normal compilation. That\u0027s the \u0022output\u0022 of checking each project.\r\n\r\n* This is used as \u0022input\u0022 for the assembly reference of each consuming project (instead of an on-disk DLL)\r\n\r\n* Within each consuming project that blob is then resurrected to Typed Tree nodes in \u0060TypedTreePickle.fs\u0060.\r\n\r\nCould the compiler share this data across projects? In theory, yes. In practice, it\u0027s very tricky business. From a correctness point of view: the process of generating this blob (TypedTreePickle \u0060p_XYZ\u0060) and resurrecting it (TypedTreePickle \u0060u_*\u0060) does some transformations to the Typed Tree that are necessary for correctness of compilation, for example, [in \u0060TypedTreePickle\u0060](https://github.com/dotnet/fsharp/blob/main/src/fsharp/TypedTreePickle.fs#L738). Basically, the Typed Tree nodes from the compilation of one assembly are _not_ valid when compiling a different assembly.\r\n\r\nThe Typed Tree nodes include \u0060CcuData\u0060 nodes, which have access to a number of callbacks into the \u0060TcImports\u0060 compilation context for the assembly being compiled. TypedTree nodes are effectively tied to a particular compilation of a particular assembly due to this. There isn\u0027t any way to share this data without losing correctness and invalidating many invariants held in the current design. From a lifetime point of view: the Typed Tree nodes are tied together in a graph, so sharing one or two of them might drag across the entire graph and extend lifetimes of that graph. None of these interrelated nodes were designed to be shared across assemblies.\r\n\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/tooling-features.html","title":"Overview","content":"---\r\ntitle: Overview\r\ncategory: Language Service Internals\r\ncategoryindex: 300\r\nindex: 100\r\n---\r\n# Overview\r\n\r\nThe F# Language Service (FSharp.Editor, using FSharp.Compiler.Service) is designed to support tooling in Visual Studio and other IDEs. This document gives an overview of the features supported and notes on their technical characteristics.\r\n\r\n## Kinds of data processed and served in F# tooling\r\n\r\nThe following tables are split into two categories: syntactic and semantic. They contain common kinds of information requested, the kind of data that is involved, and roughly how expensive the operation is in terms of expected memory allocation and CPU processing.\r\n\r\n### IDE actions based on syntax\r\n\r\n|  Action                                | Data inspected | Data returned | Expected CPU/Allocations (S/M/L/XL) |\r\n|----------------------------------------|----------------|---------------|-----------------|\r\n| Syntactic Classification               | Current doc\u0027s source text | Text span and classification type for each token in the document | S |\r\n| Breakpoint Resolution                  | Current doc\u0027s syntax tree | Text span representing where breakpoing where resolve | S |\r\n| Debugging data tip info                | Current doc\u0027s source text | Text span representing the token being inspected | S |\r\n| Brace pair matching                    | Current doc\u0027s source text | Text spans representing brace pairs that match in the input document | S |\r\n| \u0022Smart\u0022 indentation                    | Current doc\u0027s source text | Indentation location in a document | S |\r\n| Code fixes operating only on syntax    | Current doc\u0027s source text | Small text change for document | S |\r\n| XML doc template generation            | Current doc\u0027s syntax tree | Small (usually) text change for document | S |\r\n| Brace pair completion                  | Current doc\u0027s source text | Additional brace pair inserted into source text | S |\r\n| Souce document navigation              | Current doc\u0027s syntax tree | \u0022Navigation Items\u0022 with optional child navigation items containing ranges in source code | S |\r\n| Code outlining                         | Current doc\u0027s source text | Text spans representing blocks of F# code that are collapsable as a group | S - M |\r\n| Editor formatting                      | Current doc\u0027s source text | New source text for the document | S - L |\r\n| Syntax diagnostics                     | Current doc\u0027s source text | List of diagnostic data including the span of text corresponding to the diagnostic | S |\r\n| Global construct search and navigation | All syntax trees for all projects | All items that match a user\u0027s search pattern with spans of text that represent where a given item is located | S-L |\r\n\r\nYou likely noticed that nearly all of the syntactical operations are marked \u0060S\u0060. Aside from extreme cases, like files with 50k lines or higher, syntax-only operations typically finish very quickly. In addition to being computationally inexpensive, they are also run asynchronously and free-threaded.\r\n\r\nEditor formatting is a bit of an exception. Most IDEs offer common commands for format an entire document, and although they also offer commands to format a given text selection, users typically choose to format the whole document. This means an entire document has to be inspected and potentially rewritten based on often complex rules. In practice this isn\u0027t bad when working with a document that has already been formatted, but it can be expensive for larger documents with strange stylistic choices.\r\n\r\nMost of the syntax operations require an entire document\u0027s source text or parse tree. It stands to reason that this could be improved by operating on a diff of a parse tree instead of the whole thing. This is likely a very complex thing to implement though, since none of the F# compiler infrastructure works in this way today.\r\n\r\n### IDE actions based on semantics\r\n\r\n|  Action | Data inspected | Data returned | Expected CPU/Allocations (S/M/L/XL) |\r\n|---------|---------------|---------------|-----------------|\r\n| Most code fixes | Current document\u0027s typecheck data | Set (1 or more) of suggested text replacements | S-M |\r\n| Semantic classification | Current document\u0027s typecheck data | Spans of text with semantic classification type for all constructs in a document | S-L |\r\n| Code lenses | Current document\u0027s typecheck data and top-level declarations (for showing signatures); graph of all projects that reference the current one (for showing references) | Signature data for each top-level construct; spans of text for each reference to a top-level construct with navigation information | S-XL |\r\n| Code generation / refactorings | Current document\u0027s typecheck data and/or current resolved symbol/symbols | Text replacement(s) | S-L |\r\n| Code completion | Current document\u0027s typecheck data and currently-resolved symbol user is typing at | List of all symbols in scope that are \u0022completable\u0022 based on where completion is invoked | S-L |\r\n| Editor tooltips | Current document\u0027s typecheck data and resolved symbol where user invoked a tooltip | F# tooltip data based on inspecting a type and its declarations, then pretty-printing them | S-XL |\r\n| Diagnostics based on F# semantics | Current document\u0027s typecheck data | Diagnostic info for each symbol with diagnostics to show, including the range of text associated with the diagnostic | M-XL |\r\n| Symbol highlighting in a document | Current document\u0027s typecheck data and currently-resolved symbol where user\u0027s caret is located | Ranges of text representing instances of that symbol in the document | S-M |\r\n| Semantic navigation (for example, Go to Definition) | Current document\u0027s typecheck data and currently-resolved symbol where the user invoked navigation | Location of a symbol\u0027s declaration | S-M |\r\n| Rename | Graph of all projects that use the symbol that rename is triggered on and the typecheck data for each of those projects | List of all uses of all symbols that are to be renamed | S-XL |\r\n| Find all references | Graph of all projects that Find References is triggered on and the typecheck data for each of those projects | List of all uses of all symbols that are found | S-XL |\r\n| Unused value/symbol analysis | Typecheck data for the current document | List of all symbols that aren\u0027t a public API and are unused | S-M |\r\n| Unused \u0060open\u0060 analysis | Typecheck data for the current document and all symbol data brought into scope by each \u0060open\u0060 declaration | List of \u0060open\u0060 declarations whose symbols it exposes aren\u0027t used in the current document | S-L |\r\n| Missing \u0060open\u0060 analysis | Typecheck data for the current document, resolved symbol with an error, and list of available namespaces or modules | List of candidate namespaces or modules that can be opened | S-M |\r\n| Misspelled name suggestion analysis | Typecheck data for the current document and resolved symbol with an error | List of candidates that are in scope and best match the misspelled name based on a string distance algorithm | S-M |\r\n| Name simplification analysis | Typecheck data for the current document and all symbol data brought into scope by each \u0060open\u0060 declaration | List of text changes available for any fully- or partially-qualified symbol that can be simplified | S-XL |\r\n\r\nYou likely noticed that every cost associated with an action has a range. This is based on two factors:\r\n\r\n1. If the semantic data being operated on is cached\r\n2. How much semantic data must be processed for the action to be completed\r\n\r\nMost actions are \u0060S\u0060 if they operate on cached data and the compiler determines that no data needs to be re-computed. The size of their range is influenced largely by the _kind_ of semantic operations each action has to do, such as:\r\n\r\n* Typechecking a single document and processing the resulting data\r\n* Typechecking a document and its containing project and then processing the resulting data\r\n* Resolving a single symbol in a document\r\n* Resolving the definition of a single symbol in a codebase\r\n* Inspecting all symbols brought into scope by a given \u0060open\u0060 declaration\r\n* Inspecting all symbols in a document\r\n* Inspecting all symbols in all documents contained in a graph of projects\r\n\r\nFor example, commands like Find All References and Rename can be cheap if a codebase is small, hence the lower bound being \u0060S\u0060. But if the symbol in question is used across many documents in a large project graph, they are very expensive because the entire graph must be crawled and all symbols contained in its documents must be inspected.\r\n\r\nIn contrast, actions like highlighting all symbols in a document aren\u0027t terribly expensive even for very large file files. That\u0027s because the symbols to be inspected are ultimately only in a single document.\r\n\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/caches.html","title":"FSharpChecker caches","content":"(**\n---\ntitle: FSharpChecker caches\ncategory: Language Service Internals\ncategoryindex: 300\nindex: 1000\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nCompiler Services: Notes on the FSharpChecker caches\n=================================================\n\nThis is a design note on the FSharpChecker component and its caches.  See also the notes on the [FSharpChecker operations queue](queue.html)\n\nEach FSharpChecker object maintains a set of caches.  These are\n\n* \u0060\u0060scriptClosureCache\u0060\u0060 - an MRU cache of default size \u0060\u0060projectCacheSize\u0060\u0060 that caches the \n  computation of GetProjectOptionsFromScript. This computation can be lengthy as it can involve processing the transitive closure\n  of all \u0060\u0060#load\u0060\u0060 directives, which in turn can mean parsing an unbounded number of script files\n\n* \u0060\u0060incrementalBuildersCache\u0060\u0060 - an MRU cache of projects where a handle is being kept to their incremental checking state, \n  of default size \u0060\u0060projectCacheSize\u0060\u0060 (= 3 unless explicitly set as a parameter).  \n  The \u0022current background project\u0022 (see the [FSharpChecker operations queue](queue.html)) \n  will be one of these projects.  When analyzing large collections of projects, this cache usually occupies by far the most memory.\n  Increasing the size of this cache can dramatically decrease incremental computation of project-wide checking, or of checking\n  individual files within a project, but can very greatly increase memory usage.\n\n* \u0060\u0060braceMatchCache\u0060\u0060 - an MRU cache of size \u0060\u0060braceMatchCacheSize\u0060\u0060 (default = 5) keeping the results of calls to MatchBraces, keyed by filename, source and project options.\n\n* \u0060\u0060parseFileCache\u0060\u0060 - an MRU cache of size \u0060\u0060parseFileCacheSize\u0060\u0060 (default = 2) keeping the results of ParseFile, \n  keyed by filename, source and project options.\n\n* \u0060\u0060checkFileInProjectCache\u0060\u0060 - an MRU cache of size \u0060\u0060incrementalTypeCheckCacheSize\u0060\u0060 (default = 5) keeping the results of \n  ParseAndCheckFileInProject, CheckFileInProject and/or CheckFileInProjectIfReady. This is keyed by filename, file source \n  and project options.  The results held in this cache are only returned if they would reflect an accurate parse and check of the\n  file.\n\n* \u0060\u0060getToolTipTextCache\u0060\u0060 - an aged lookup cache of strong size \u0060\u0060getToolTipTextSize\u0060\u0060 (default = 5) computing the results of GetToolTipText.\n\n* \u0060\u0060ilModuleReaderCache\u0060\u0060 - an aged lookup of weak references to \u0022readers\u0022 for references .NET binaries. Because these\n  are all weak references, you can generally ignore this cache, since its entries will be automatically collected.\n  Strong references to binary readers will be kept by other FCS data structures, e.g. any project checkers, symbols or project checking results.\n\n  In more detail, the bytes for referenced .NET binaries are read into memory all at once, eagerly. Files are not left \n  open or memory-mapped when using FSharpChecker (as opposed to FsiEvaluationSession, which loads assemblies using reflection). \n  The purpose of this cache is mainly to ensure that while setting up compilation, the reads of mscorlib, FSharp.Core and so on\n  amortize cracking the DLLs.\n\n* \u0060\u0060frameworkTcImportsCache\u0060\u0060 - an aged lookup of strong size 8 which caches the process of setting up type checking against a set of system\n  components (e.g. a particular version of mscorlib, FSharp.Core and other system DLLs).  These resources are automatically shared between multiple\n  project checkers which happen to reference the same set of system assemblies.\n\nProfiling the memory used by the various caches can be done by looking for the corresponding static roots in memory profiling traces.\n\nThe sizes of some of these caches can be adjusted by giving parameters to FSharpChecker.  Unless otherwise noted, \nthe cache sizes above indicate the \u0022strong\u0022 size of the cache, where memory is held regardless of the memory \npressure on the system. Some of the caches can also hold \u0022weak\u0022 references which can be collected at will by the GC.\n\n\u003E Note: Because of these caches, you should generally use one global, shared FSharpChecker for everything in an IDE application.\n\n\nLow-Memory Condition\n-------\n\nVersion 1.4.0.8 added a \u0022maximum memory\u0022 limit specified by the \u0060MaxMemory\u0060 property on FSharpChecker (in MB). If an FCS project operation\nis performed (see \u0060CheckMaxMemoryReached\u0060 in \u0060service.fs\u0060) and \u0060System.GC.GetTotalMemory(false)\u0060 reports a figure greater than this, then\nthe strong sizes of all FCS caches are reduced to either 0 or 1.  This happens for the remainder of the lifetime of the FSharpChecker object. \nIn practice this will still make tools like the Visual Studio F# Power Tools usable, but some operations like renaming across multiple \nprojects may take substantially longer.\n\nBy default the maximum memory trigger is disabled, see \u0060maxMBDefault\u0060 in \u0060service.fs\u0060. \n\nReducing the FCS strong cache sizes does not guarantee there will be enough memory to continue operations - even holding one project \nstrongly may exceed a process memory budget. It just means FCS may hold less memory strongly.\n\nIf you do not want the maximum memory limit to apply then set MaxMemory to System.Int32.MaxValue.\n\nSummary\n-------\n\nIn this design note, you learned that the FSharpChecker component keeps a set of caches in order to support common\nincremental analysis scenarios reasonably efficiently. They correspond roughly to the original caches and sizes \nused by the Visual F# Tools, from which the FSharpChecker component derives.\n\nIn long running, highly interactive, multi-project scenarios you should carefully \nconsider the cache sizes you are using and the tradeoffs involved between incremental multi-project checking and memory usage.\n*)"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/compiler.html","title":"Tutorial: Hosting the compiler","content":"(**\n---\ntitle: Tutorial: Hosting the compiler\ncategory: FSharp.Compiler.Service\ncategoryindex: 300\nindex: 900\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nHosted Compiler\n===============\n\nThis tutorial demonstrates how to host the F# compiler.\n\n\u003E **NOTE:** The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n*)\n\n(**\n\u003E **NOTE:** There are several options for hosting the F# compiler. The easiest one is to use the \n\u0060fsc.exe\u0060 process and pass arguments. \n*)\n\n(**\n\n\u003E **NOTE:** By default [compilations using FSharp.Compiler.Service reference FSharp.Core 4.3.0.0](https://github.com/fsharp/FSharp.Compiler.Service/issues/156) (matching F# 3.0).  You can override\nthis choice by passing a reference to FSharp.Core for 4.3.1.0 or later explicitly in your command-line arguments.\n\n*)\n\n(**\n---------------------------\n\nFirst, we need to reference the libraries that contain F# interactive service:\n*)\n\n#r \u0022FSharp.Compiler.Service.dll\u0022\nopen System.IO\nopen FSharp.Compiler.CodeAnalysis\n\n// Create an interactive checker instance \nlet checker = FSharpChecker.Create()\n\n(**\nNow write content to a temporary file:\n\n*)\nlet fn = Path.GetTempFileName()\nlet fn2 = Path.ChangeExtension(fn, \u0022.fsx\u0022)\nlet fn3 = Path.ChangeExtension(fn, \u0022.dll\u0022)\n\nFile.WriteAllText(fn2, \u0022\u0022\u0022\nmodule M\n\ntype C() = \n   member x.P = 1\n\nlet x = 3 \u002B 4\n\u0022\u0022\u0022)\n\n(**\nNow invoke the compiler:\n*)\n\nlet errors1, exitCode1 = \n    checker.Compile([| \u0022fsc.exe\u0022; \u0022-o\u0022; fn3; \u0022-a\u0022; fn2 |]) \n    |\u003E Async.RunSynchronously\n\n(** \n\nIf errors occur you can see this in the \u0027exitCode\u0027 and the returned array of errors:\n\n*)\nFile.WriteAllText(fn2, \u0022\u0022\u0022\nmodule M\n\nlet x = 1.0 \u002B \u0022\u0022 // a type error\n\u0022\u0022\u0022)\n\nlet errors1b, exitCode1b = \n    checker.Compile([| \u0022fsc.exe\u0022; \u0022-o\u0022; fn3; \u0022-a\u0022; fn2 |])\n    |\u003E Async.RunSynchronously\n\n(**\n\nCompiling to a dynamic assembly\n===============================\n\nYou can also compile to a dynamic assembly, which uses the F# Interactive code generator.\nThis can be useful if you are, for example, in a situation where writing to the file system\nis not really an option.\n\nYou still have to pass the \u0022-o\u0022 option to name the output file, but the output file is not actually written to disk.\n\nThe \u0027None\u0027 option indicates that the initialization code for the assembly is not executed. \n*)\nlet errors2, exitCode2, dynAssembly2 = \n    checker.CompileToDynamicAssembly([| \u0022-o\u0022; fn3; \u0022-a\u0022; fn2 |], execute=None)\n     |\u003E Async.RunSynchronously\n\n(*\nPassing \u0027Some\u0027 for the \u0027execute\u0027 parameter executes  the initialization code for the assembly.\n*)\nlet errors3, exitCode3, dynAssembly3 = \n    checker.CompileToDynamicAssembly([| \u0022-o\u0022; fn3; \u0022-a\u0022; fn2 |], Some(stdout,stderr))\n     |\u003E Async.RunSynchronously\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/corelib.html","title":"Notes on FSharp.Core","content":"(**\n---\ntitle: Notes on FSharp.Core\ncategory: FSharp.Compiler.Service\ncategoryindex: 300\nindex: 1100\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nCompiler Services: Notes on FSharp.Core.dll\n=================================================\n\nVersions of FSharp.Core involved in the operation of FSharp.Compiler.Service\n---------------------------------------------\n\nThere are three versions of FSharp.Core relevant to the operation of FSharp.Compiler.Service:\n\n1. **The FSharp.Compiler.Service.dll static reference to FSharp.Core** - The FCS DLL and nuget have a static minbound dependency on FSharp.Core.\n\n   This is just a normal .NET dependency like any other, it expresses the minimum surface area of FSharp.Core that the implementation of FSharp.Compiler.Service (and any components that depend on it) needs.  It could be a reference to a reference assembly if we supported that.  In theory this could be very low and all is cool - if we could implement FCS in terms of FSharp.Core 2.0.0.0 then that could be the minbound (indeed in theory we could implement FCS pretty almost without any use of FSharp.Core functionality at all, though obviously we don\u0027t)\n\n   In practice this is 0-2 versions behind latest FSharp.Core.\n\n2. **The runtime reference to FSharp.Core in a tool, application or test suite that includes FSharp.Compiler.Service** - This is the actual version of FSharp.Core used when, say, fsc.exe or devenv.exe or fsi.exe or fsdocs.exe runs.\n\n   This must be at least as high as (1) and is usually the very latest FSharp.Core available (in or out of repo tree).  This is important to the operation of the FCS-based tool because it is used for execution of scripts, and the default compilation reference for scripts.  If scripts are going to use a particular language feature then this must be sufficient to support the language feature\n\n3. **The FSharp.Core reference in a compilation or analysis being processed by FSharp.Compiler.Service**.\n\n   This can be anything - 2.0.0.0, 4.0.0.0 or 5.0.0 or whatever.  For script compilation and execution is is the same as (2).  It must be sufficient to support language features used in the compilation.\n\nShipping an FSharp.Core with your application\n---------------------------------------------\n\nWhen building applications or plug-in components which use FSharp.Compiler.Service.dll, you will normally also\ninclude a copy of FSharp.Core.dll as part of your application.\n\nFor example, if you build a \u0060\u0060HostedCompiler.exe\u0060\u0060, you will normally place an FSharp.Core.dll (say 4.3.1.0) alongside\nyour \u0060\u0060HostedCompiler.exe\u0060\u0060.\n\nWhich FSharp.Core and .NET SDK get referenced in compilation?\n--------------------------------------\n\nThe FSharp.Compiler.Service component can be used to do more or less any sort of F# compilation.\nIn particular you can reference an explicit FSharp.Core and/or framework\nassemblies in the command line arguments (different to the FSharp.Core and a .NET Framework being used to run your tool).\n\nWhat about if I am using \u0060\u0060FsiEvaluationSession\u0060\u0060 or \u0060\u0060GetProjectOptionsFromScript\u0060\u0060\n-------------------------------------------------------------------\n\nIf you do not explicitly reference an FSharp.Core.dll from an SDK location, or if you are processing a script\nusing \u0060\u0060FsiEvaluationSession\u0060\u0060 or \u0060\u0060GetProjectOptionsFromScript\u0060\u0060, then an implicit reference to FSharp.Core will be made\nby the following choice:\n\n1. The version of FSharp.Core.dll for the SDK implied by global.json\n\n2. The version of FSharp.Core.dll statically referenced by the host assembly returned by \u0060\u0060System.Reflection.Assembly.GetEntryAssembly()\u0060\u0060.\n\n3. If there is no static reference to FSharp.Core in the host assembly, then a default is chosen\n\n\u003E NOTE: these may depend on exact flags passed to \u0060GetProjectOptionsFromScript\u0060\n\n*)"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/editor.html","title":"Tutorial: Editor services","content":"(**\n---\ntitle: Tutorial: Editor services\ncategory: FSharp.Compiler.Service\ncategoryindex: 300\nindex: 500\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nCompiler Services: Editor services\n==================================\n\nThis tutorial demonstrates how to use the editor services provided by the F# compiler.\nThis API is used to provide auto-complete, tool-tips, parameter info help, matching of\nbrackets and other functions in F# editors including Visual Studio, Xamarin Studio and Emacs\n(see [fsharpbindings](https://github.com/fsharp/fsharpbinding) project for more information).\nSimilarly to [the tutorial on using untyped AST](untypedtree.html), we start by\ngetting the \u0060InteractiveChecker\u0060 object.\n\n\u003E **NOTE:** The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n\n\nType checking sample source code\n--------------------------------\n\nAs in the [previous tutorial (using untyped AST)](untypedtree.html), we start by referencing\n\u0060FSharp.Compiler.Service.dll\u0060, opening the relevant namespace and creating an instance\nof \u0060InteractiveChecker\u0060:\n\n*)\n// Reference F# compiler API\n#r \u0022FSharp.Compiler.Service.dll\u0022\n\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.EditorServices\nopen FSharp.Compiler.Text\nopen FSharp.Compiler.Tokenization\n\n// Create an interactive checker instance\nlet checker = FSharpChecker.Create()\n\n(**\n\nAs [previously](untypedtree.html), we use \u0060GetProjectOptionsFromScriptRoot\u0060 to get a context\nwhere the specified input is the only file passed to the compiler (and it is treated as a\nscript file or stand-alone F# source code).\n\n*)\n// Sample input as a multi-line string\nlet input =\n    \u0022\u0022\u0022\n  open System\n\n  let foo() =\n    let msg = String.Concat(\u0022Hello\u0022,\u0022 \u0022,\u0022world\u0022)\n    if true then\n      printfn \u0022%s\u0022 msg.\n  \u0022\u0022\u0022\n// Split the input \u0026 define file name\nlet inputLines = input.Split(\u0027\\n\u0027)\nlet file = \u0022/home/user/Test.fsx\u0022\n\nlet projOptions, _diagnostics =\n    checker.GetProjectOptionsFromScript(file, SourceText.ofString input, assumeDotNetFramework=false)\n    |\u003E Async.RunSynchronously\n\nlet parsingOptions, _diagnostics2 =\n    checker.GetParsingOptionsFromProjectOptions(projOptions)\n\n(**\nTo perform type checking, we first need to parse the input using\n\u0060ParseFile\u0060, which gives us access to the [untyped AST](untypedtree.html). However,\nthen we need to call \u0060CheckFileInProject\u0060 to perform the full type checking. This function\nalso requires the result of \u0060ParseFileInProject\u0060, so the two functions are often called\ntogether.\n*)\n// Perform parsing\n\nlet parseFileResults =\n    checker.ParseFile(file, SourceText.ofString input, parsingOptions)\n    |\u003E Async.RunSynchronously\n(**\nBefore we look at the interesting operations provided by \u0060TypeCheckResults\u0060, we\nneed to run the type checker on a sample input. On F# code with errors, you would get some type checking\nresult (but it may contain incorrectly \u0022guessed\u0022 results).\n*)\n\n// Perform type checking\nlet checkFileAnswer =\n    checker.CheckFileInProject(parseFileResults, file, 0, SourceText.ofString input, projOptions)\n    |\u003E Async.RunSynchronously\n\n(**\nAlternatively you can use \u0060ParseAndCheckFileInProject\u0060 to check both in one step:\n*)\n\nlet parseResults2, checkFileAnswer2 =\n    checker.ParseAndCheckFileInProject(file, 0, SourceText.ofString input, projOptions)\n    |\u003E Async.RunSynchronously\n\n(**\n\nThe function returns both the untyped parse result (which we do not use in this\ntutorial), but also a \u0060CheckFileAnswer\u0060 value, which gives us access to all\nthe interesting functionality...\n*)\n\nlet checkFileResults =\n    match checkFileAnswer with\n    | FSharpCheckFileAnswer.Succeeded (res) -\u003E res\n    | res -\u003E failwithf \u0022Parsing did not finish... (%A)\u0022 res\n\n(**\n\nHere, we type check a simple function that (conditionally) prints \u0022Hello world\u0022.\nOn the last line, we leave an additional dot in \u0060msg.\u0060 so that we can get the\ncompletion list on the \u0060msg\u0060 value (we expect to see various methods on the string\ntype there).\n\n\nUsing type checking results\n---------------------------\n\nLet\u0027s now look at some of the API that is exposed by the \u0060TypeCheckResults\u0060 type. In general,\nthis is the type that lets you implement most of the interesting F# source code editor services.\n\n### Getting a tool tip\n\nTo get a tool tip, you can use \u0060GetToolTip\u0060 method. The method takes a line number and character\noffset. Both of the numbers are zero-based. In the sample code, we want to get tooltip for the \u0060foo\u0060\nfunction that is defined on line 3 (line 0 is blank) and the letter \u0060f\u0060 starts at index 7 (the tooltip\nwould work anywhere inside the identifier).\n\nIn addition, the method takes a tag of token which is typically \u0060IDENT\u0060, when getting tooltip for an\nidentifier (the other option lets you get tooltip with full assembly location when using \u0060#r \u0022...\u0022\u0060).\n\n*)\n// Get tag of the IDENT token to be used as the last argument\nlet identToken = FSharpTokenTag.Identifier\n\n// Get tool tip at the specified location\nlet tip =\n    checkFileResults.GetToolTip(4, 7, inputLines.[1], [ \u0022foo\u0022 ], identToken)\n\nprintfn \u0022%A\u0022 tip\n\n(**\n\n*)\n\n(**\nAside from the location and token kind, the function also requires the current contents of the line\n(useful when the source code changes) and a \u0060Names\u0060 value, which is a list of strings representing\nthe current long name. For example to get tooltip for the \u0060Random\u0060 identifier in a long name\n\u0060System.Random\u0060, you would use location somewhere in the string \u0060Random\u0060 and you would pass\n\u0060[\u0022System\u0022; \u0022Random\u0022]\u0060 as the \u0060Names\u0060 value.\n\nThe returned value is of type \u0060ToolTipText\u0060 which contains a discriminated union \u0060ToolTipElement\u0060.\nThe union represents different kinds of tool tips that you can get from the compiler.\n\n### Getting auto-complete lists\n\nThe next method exposed by \u0060TypeCheckResults\u0060 lets us perform auto-complete on a given location.\nThis can be called on any identifier or in any scope (in which case you get a list of names visible\nin the scope) or immediately after \u0060.\u0060 to get a list of members of some object. Here, we get a\nlist of members of the string value \u0060msg\u0060.\n\nTo do this, we call \u0060GetDeclarationListInfo\u0060 with the location of the \u0060.\u0060 symbol on the last line\n(ending with \u0060printfn \u0022%s\u0022 msg.\u0060). The offsets are one-based, so the location is \u00607, 23\u0060.\nWe also need to specify a function that says that the text has not changed and the current identifier\nwhere we need to perform the completion.\n*)\n// Get declarations (autocomplete) for a location\nlet decls =\n    checkFileResults.GetDeclarationListInfo(\n        Some parseFileResults,\n        7,\n        inputLines.[6],\n        PartialLongName.Empty 23,\n        (fun () -\u003E [])\n    )\n\n// Print the names of available items\nfor item in decls.Items do\n    printfn \u0022 - %s\u0022 item.Name\n\n(**\n\n\u003E **NOTE:** \u0060v\u0060 is an alternative name for the old \u0060GetDeclarations\u0060. The old \u0060GetDeclarations\u0060 was\ndeprecated because it accepted zero-based line numbers.  At some point it will be removed, and  \u0060GetDeclarationListInfo\u0060 will be renamed back to \u0060GetDeclarations\u0060.\n*)\n\n(**\nWhen you run the code, you should get a list containing the usual string methods such as\n\u0060Substring\u0060, \u0060ToUpper\u0060, \u0060ToLower\u0060 etc. The fourth argument of \u0060GetDeclarations\u0060, here \u0060([], \u0022msg\u0022)\u0060,\nspecifies the context for the auto-completion. Here, we want a completion on a complete name\n\u0060msg\u0060, but you could for example use \u0060([\u0022System\u0022; \u0022Collections\u0022], \u0022Generic\u0022)\u0060 to get a completion list\nfor a fully qualified namespace.\n\n### Getting parameter information\n\nThe next common feature of editors is to provide information about overloads of a method. In our\nsample code, we use \u0060String.Concat\u0060 which has a number of overloads. We can get the list using\n\u0060GetMethods\u0060 operation. As previously, this takes zero-indexed offset of the location that we are\ninterested in (here, right at the end of the \u0060String.Concat\u0060 identifier) and we also need to provide\nthe identifier again (so that the compiler can provide up-to-date information when the source code\nchanges):\n\n*)\n// Get overloads of the String.Concat method\nlet methods =\n    checkFileResults.GetMethods(5, 27, inputLines.[4], Some [ \u0022String\u0022; \u0022Concat\u0022 ])\n\n// Print concatenated parameter lists\nfor mi in methods.Methods do\n    [ for p in mi.Parameters do\n          for tt in p.Display do\n              yield tt.Text ]\n    |\u003E String.concat \u0022, \u0022\n    |\u003E printfn \u0022%s(%s)\u0022 methods.MethodName\n(**\nThe code uses the \u0060Display\u0060 property to get the annotation for each parameter. This returns information\nsuch as \u0060arg0: obj\u0060 or \u0060params args: obj[]\u0060 or \u0060str0: string, str1: string\u0060. We concatenate the parameters\nand print a type annotation with the method name.\n*)\n\n(**\n\n## Asynchronous and immediate operations\n\nYou may have noticed that \u0060CheckFileInProject\u0060 is an asynchronous operation.\nThis indicates that type checking of F# code can take some time.\nThe F# compiler performs the work in background (automatically) and when\nwe call \u0060CheckFileInProject\u0060 method, it returns an asynchronous operation.\n\nThere is also the \u0060CheckFileInProjectIfReady\u0060 method. This returns immediately if the\ntype checking operation can\u0027t be started immediately, e.g. if other files in the project\nare not yet type-checked. In this case, a background worker might choose to do other\nwork in the meantime, or give up on type checking the file until the \u0060FileTypeCheckStateIsDirty\u0060 event\nis raised.\n\n\u003E The [fsharpbinding](https://github.com/fsharp/fsharpbinding) project has more advanced\nexample of handling the background work where all requests are sent through an F# agent.\nThis may be a more appropriate for implementing editor support.\n\n*)\n\n\n(**\nSummary\n-------\n\nThe \u0060CheckFileAnswer\u0060 object contains other useful methods that were not covered in this tutorial. You\ncan use it to get location of a declaration for a given identifier, additional colorization information\n(the F# 3.1 colorizes computation builder identifiers \u0026 query operators) and others.\n\nUsing the FSharpChecker component in multi-project, incremental and interactive editing situations may involve\nknowledge of the [FSharpChecker operations queue](queue.html) and the [FSharpChecker caches](caches.html).\n\n\nFinally, if you are implementing an editor support for an editor that cannot directly call .NET API,\nyou can call many of the methods discussed here via a command line interface that is available in the\n[FSharp.AutoComplete](https://github.com/fsharp/fsharpbinding/tree/master/FSharp.AutoComplete) project.\n\n*)"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/filesystem.html","title":"IFileSystem","content":"(**\n---\ntitle: IFileSystem\ncategory: FSharp.Compiler.Service\ncategoryindex: 300\nindex: 1200\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nCompiler Services: Virtualized File System\n==========================================\n\nThe \u0060FSharp.Compiler.Service\u0060 component has a global variable\nrepresenting the file system. By setting this variable you can host the compiler in situations where a file system\nis not available.\n\n\u003E **NOTE:** The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published.\n\n\nSetting the FileSystem\n----------------------\n\nIn the example below, we set the file system to an implementation which reads from disk\n*)\n#r \u0022FSharp.Compiler.Service.dll\u0022\n\nopen System.IO\nopen System.Text\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.IO\n\nlet defaultFileSystem = FileSystem\n\nlet fileName1 = @\u0022c:\\mycode\\test1.fs\u0022 // note, the path doesn\u0027t exist\nlet fileName2 = @\u0022c:\\mycode\\test2.fs\u0022 // note, the path doesn\u0027t exist\n\ntype MyFileSystem() =\n    let file1 =\n        \u0022\u0022\u0022\nmodule File1\n\nlet A = 1\u0022\u0022\u0022\n\n    let file2 =\n        \u0022\u0022\u0022\nmodule File2\nlet B = File1.A \u002B File1.A\u0022\u0022\u0022\n\n    let files =\n        dict [ (fileName1, file1)\n               (fileName2, file2) ]\n\n    interface IFileSystem with\n        // Implement the service to open files for reading and writing\n        member _.OpenFileForReadShim(fileName, ?useMemoryMappedFile: bool, ?shouldShadowCopy: bool) =\n            match files.TryGetValue fileName with\n            | true, text -\u003E new MemoryStream(Encoding.UTF8.GetBytes(text)) :\u003E Stream\n            | _ -\u003E\n                defaultFileSystem.OpenFileForReadShim(\n                    fileName,\n                    ?useMemoryMappedFile = useMemoryMappedFile,\n                    ?shouldShadowCopy = shouldShadowCopy\n                )\n\n        member _.OpenFileForWriteShim(fileName, ?fileMode: FileMode, ?fileAccess: FileAccess, ?fileShare: FileShare) =\n            defaultFileSystem.OpenFileForWriteShim(\n                fileName,\n                ?fileMode = fileMode,\n                ?fileAccess = fileAccess,\n                ?fileShare = fileShare\n            )\n\n        // Implement the service related to file existence and deletion\n        member _.FileExistsShim(fileName) =\n            files.ContainsKey(fileName)\n            || defaultFileSystem.FileExistsShim(fileName)\n\n        // Implement the service related to temporary paths and file time stamps\n        member _.GetTempPathShim() = defaultFileSystem.GetTempPathShim()\n\n        member _.GetLastWriteTimeShim(fileName) =\n            defaultFileSystem.GetLastWriteTimeShim(fileName)\n\n        member _.GetFullPathShim(fileName) =\n            defaultFileSystem.GetFullPathShim(fileName)\n\n        member _.IsInvalidPathShim(fileName) =\n            defaultFileSystem.IsInvalidPathShim(fileName)\n\n        member _.IsPathRootedShim(fileName) =\n            defaultFileSystem.IsPathRootedShim(fileName)\n\n        member _.FileDeleteShim(fileName) =\n            defaultFileSystem.FileDeleteShim(fileName)\n\n        member _.AssemblyLoader = defaultFileSystem.AssemblyLoader\n\n        member _.GetFullFilePathInDirectoryShim dir fileName =\n            defaultFileSystem.GetFullFilePathInDirectoryShim dir fileName\n\n        member _.NormalizePathShim(path) =\n            defaultFileSystem.NormalizePathShim(path)\n\n        member _.GetDirectoryNameShim(path) =\n            defaultFileSystem.GetDirectoryNameShim(path)\n\n        member _.GetCreationTimeShim(path) =\n            defaultFileSystem.GetCreationTimeShim(path)\n\n        member _.CopyShim(src, dest, overwrite) =\n            defaultFileSystem.CopyShim(src, dest, overwrite)\n\n        member _.DirectoryCreateShim(path) =\n            defaultFileSystem.DirectoryCreateShim(path)\n\n        member _.DirectoryExistsShim(path) =\n            defaultFileSystem.DirectoryExistsShim(path)\n\n        member _.DirectoryDeleteShim(path) =\n            defaultFileSystem.DirectoryDeleteShim(path)\n\n        member _.EnumerateFilesShim(path, pattern) =\n            defaultFileSystem.EnumerateFilesShim(path, pattern)\n\n        member _.EnumerateDirectoriesShim(path) =\n            defaultFileSystem.EnumerateDirectoriesShim(path)\n\n        member _.IsStableFileHeuristic(path) =\n            defaultFileSystem.IsStableFileHeuristic(path)\n\nlet myFileSystem = MyFileSystem()\nFileSystem \u003C- MyFileSystem()\n\n(**\n\nDoing a compilation with the FileSystem\n---------------------------------------\n\n*)\n\nlet checker = FSharpChecker.Create()\n\nlet projectOptions =\n    let sysLib nm =\n        if System.Environment.OSVersion.Platform = System.PlatformID.Win32NT then // file references only valid on Windows\n            System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\n            \u002B @\u0022\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0\\\u0022\n            \u002B nm\n            \u002B \u0022.dll\u0022\n        else\n            let sysDir =\n                System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory()\n\n            let (\u002B\u002B) a b = System.IO.Path.Combine(a, b)\n            sysDir \u002B\u002B nm \u002B \u0022.dll\u0022\n\n    let fsCore4300 () =\n        if System.Environment.OSVersion.Platform = System.PlatformID.Win32NT then // file references only valid on Windows\n            System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\n            \u002B @\u0022\\Reference Assemblies\\Microsoft\\FSharp\\.NETFramework\\v4.0\\4.3.0.0\\FSharp.Core.dll\u0022\n        else\n            sysLib \u0022FSharp.Core\u0022\n\n    let allFlags =\n        [| \u0022--simpleresolution\u0022\n           \u0022--noframework\u0022\n           \u0022--debug:full\u0022\n           \u0022--define:DEBUG\u0022\n           \u0022--optimize-\u0022\n           \u0022--doc:test.xml\u0022\n           \u0022--warn:3\u0022\n           \u0022--fullpaths\u0022\n           \u0022--flaterrors\u0022\n           \u0022--target:library\u0022\n           let references =\n               [ sysLib \u0022mscorlib\u0022\n                 sysLib \u0022System\u0022\n                 sysLib \u0022System.Core\u0022\n                 fsCore4300 () ]\n\n           for r in references do\n               \u0022-r:\u0022 \u002B r |]\n\n    { ProjectFileName = @\u0022c:\\mycode\\compilation.fsproj\u0022 // Make a name that is unique in this directory.\n      ProjectId = None\n      SourceFiles = [| fileName1; fileName2 |]\n      OriginalLoadReferences = []\n      Stamp = None\n      OtherOptions = allFlags\n      ReferencedProjects = [||]\n      IsIncompleteTypeCheckEnvironment = false\n      UseScriptResolutionRules = true\n      LoadTime = System.DateTime.Now // Note using \u0027Now\u0027 forces reloading\n      UnresolvedReferences = None }\n\nlet results =\n    checker.ParseAndCheckProject(projectOptions)\n    |\u003E Async.RunSynchronously\n\nresults.Diagnostics\nresults.AssemblySignature.Entities.Count //2\n\nresults.AssemblySignature.Entities.[0]\n    .MembersFunctionsAndValues\n    .Count\n\nresults.AssemblySignature.Entities.[0]\n    .MembersFunctionsAndValues.[0]\n    .DisplayName\n\n(**\nSummary\n-------\nIn this tutorial, we\u0027ve seen how to globally customize the view of the file system used by the FSharp.Compiler.Service\ncomponent.\n\nAt the time of writing, the following System.IO operations are not considered part of the virtualized file system API.\nFuture iterations on the compiler service implementation may add these to the API.\n\n  - Path.Combine\n  - Path.DirectorySeparatorChar\n  - Path.GetDirectoryName\n  - Path.GetFileName\n  - Path.GetFileNameWithoutExtension\n  - Path.HasExtension\n  - Path.GetRandomFileName (used only in generation compiled win32 resources in assemblies)\n\n**NOTE:** Several operations in the \u0060SourceCodeServices\u0060 API accept the contents of a file to parse\nor check as a parameter, in addition to a file name. In these cases, the file name is only used for\nerror reporting.\n\n**NOTE:** Type provider components do not use the virtualized file system.\n\n**NOTE:** The compiler service may use MSBuild for assembly resolutions unless \u0060--simpleresolution\u0060 is\nprovided. When using the \u0060FileSystem\u0060 API you will normally want to specify \u0060--simpleresolution\u0060 as one\nof your compiler flags. Also specify \u0060--noframework\u0060.  You will need to supply explicit resolutions of all\nreferenced .NET assemblies.\n\n*)"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/index.html","title":"FSharp.Compiler.Service","content":"---\r\ntitle: FSharp.Compiler.Service\r\ncategory: FSharp.Compiler.Service\r\ncategoryindex: 300\r\nindex: 100\r\n---\r\n# FSharp.Compiler.Service\r\n\r\nThe [FSharp.Compiler.Service](https://www.nuget.org/packages/FSharp.Compiler.Service) package is a component derived from the F# compiler source code that\r\nexposes additional functionality for implementing F# language bindings, additional\r\ntools based on the compiler or refactoring tools. The package also includes\r\ndynamic execution of F# code that can be used for embedding F# scripting into your applications.\r\n\r\n## Available services\r\n\r\nThe project currently exposes the following services that are tested \u0026 documented on this page.\r\nThe libraries contain additional public API that can be used, but is not documented here.\r\n\r\n* [**F# Language tokenizer**](tokenizer.html) - turns any F# source code into a stream of tokens.\r\n  Useful for implementing source code colorization and basic tools. Correctly handle nested\r\n  comments, strings etc.\r\n\r\n* [**Processing SyntaxTree**](untypedtree.html) - allows accessing the syntax tree.\r\n  This represents parsed F# syntax without type information and can be used to implement code formatting\r\n  and various simple processing tasks.\r\n\r\n* [**Working with resolved symbols**](symbols.html) - many services related to type checking\r\n  return resolved symbols, representing inferred types, and the signatures of whole assemblies.\r\n\r\n* [**Working with resolved expressions**](typedtree.html) - services related to working with\r\n  type-checked expressions and declarations, where names have been resolved to symbols.\r\n\r\n* [**Using editor services**](editor.html) - expose functionality for auto-completion, tool-tips,\r\n  parameter information etc. These functions are useful for implementing F# support for editors\r\n  and for getting some type information for F# code.\r\n\r\n* [**Working with project-wide analysis**](project.html) - you can request a check of\r\n  an entire project, and ask for the results of whole-project analyses such as find-all-references.\r\n\r\n* [**Hosting F# interactive**](interactive.html) - allows calling F# interactive as a .NET library\r\n  from your .NET code. You can use this API to embed F# as a scripting language in your projects.\r\n\r\n* [**Hosting the F# compiler**](compiler.html) - allows you to embed calls to the F# compiler.\r\n\r\n* [**File system API**](filesystem.html) - the \u0060FSharp.Compiler.Service\u0060 component has a global variable\r\n  representing the file system. By setting this variable you can host the compiler in situations where a file system\r\n  is not available.\r\n\r\n\u003E **NOTE:** The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\r\n\r\n## The Public Surface Area\r\n\r\nWe are in the process of cleaning up the surface area of FCS to allow it to be fully binary compatible going forward.\r\n\r\nThe full current surface area can be seen at: https://fsharp.github.io/fsharp-compiler-docs/reference/index.html\r\n\r\nThe API is generally designed with F#/.NET design conventions (e.g. types in namespaces, not modules, no nesting of modules etc.) and we must continue to iterate to make this so.\r\n\r\nThe parts of the compiler under \u0060FSharp.Compiler.AbstractIL.*\u0060 are \u0022incidental\u0022 and not really designed for public use apart from the hook for JetBrains Rider (Aside: In theory all these other parts could be renamed to FSharp.Compiler though there\u0027s no need to do that right now).   These internal parts tend to be implemented with the \u0022module containing lots of stuff in one big file\u0022 approach for layers of the compiler.\r\n\r\n### Basics - Syntax, Text and Diagnostics\r\n\r\n* [FSharp.Compiler.Diagnostics](reference/fsharp-compiler-diagnostics.html)\r\n* [FSharp.Compiler.IO](reference/fsharp-compiler-io.html)\r\n* [FSharp.Compiler.Syntax](reference/fsharp-compiler-syntax.html)\r\n* [FSharp.Compiler.Text](reference/fsharp-compiler-text.html)\r\n\r\n### Tokenization\r\n\r\n* [FSharp.Compiler.Tokenization](reference/fsharp-compiler-tokenization.html)\r\n\r\n### Symbols and Code Analysis\r\n\r\n* [FSharp.Compiler.Symbols](reference/fsharp-compiler-symbols.html)\r\n* [FSharp.Compiler.CodeAnalysis](reference/fsharp-compiler-codeanalysis.html)\r\n\r\n### Editor Services\r\n\r\n* [FSharp.Compiler.EditorServices](reference/fsharp-compiler-editorservices.html)\r\n\r\n### Interactive Execution\r\n\r\n* [FSharp.Compiler.Interactive.Shell](reference/fsharp-compiler-interactive-shell.html)\r\n\r\n### Internal extension points\r\n\r\n* [FSharp.Compiler.AbstractIL](reference/fsharp-compiler-abstractil.html)\r\n\r\n## Projects using the F# Compiler Services\r\n\r\nSome of the projects using the F# Compiler Services are:\r\n\r\n* [**F# in Visual Studio**](https://github.com/dotnet/fsharp/)\r\n* [**F# in Visual Studio for Mac**](https://github.com/mono/monodevelop/tree/master/main/external/fsharpbinding)\r\n* [**FsAutoComplete**](https://github.com/fsharp/FsAutoComplete)\r\n* [**F# in JetBrains Rider**](https://www.jetbrains.com/help/rider/F_Sharp.html)\r\n* [**F# in .NET Interactive Notebooks**](https://github.com/dotnet/interactive)\r\n* [**Fantomas**](https://github.com/fsprojects/fantomas/) - Source code formatting for F#\r\n* [**FSharpLint**](https://fsprojects.github.io/FSharpLint/) - Lint tool for F#\r\n* [**Fable**](https://fable.io/) - F# to JavaScript Compiler and more\r\n* [**WebSharper**](https://websharper.com/) - F# full-stack web framework\r\n\r\nOlder things:\r\n\r\n* [**FsReveal**](https://fsprojects.github.io/FsReveal/) - FsReveal parses markdown and F# script file and generate reveal.js slides\r\n* [**Elucidate**](https://github.com/rookboom/Elucidate) - Visual Studio extension for rich inlined comments using MarkDown\r\n* [**FSharp.Formatting**](http://fsprojects.github.io/FSharp.Formatting/) - F# tools for generating documentation (Markdown processor and F# code formatter)\r\n* [**FAKE**](https://fsprojects.github.io/FAKE/) - \u0022FAKE - F# Make\u0022 is a cross platform build automation system\r\n\r\n## Contributing and copyright\r\n\r\nThe F# source code is copyright by Microsoft Corporation and contributors.\r\n"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/interactive.html","title":"Tutorial: Hosted execution","content":"(**\n---\ntitle: Tutorial: Hosted execution\ncategory: FSharp.Compiler.Service\ncategoryindex: 300\nindex: 700\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nInteractive Service: Embedding F# Interactive\n=============================================\n\nThis tutorial demonstrates how to embed F# interactive in your application. F# interactive\nis an interactive scripting environment that compiles F# code into highly efficient IL code\nand executes it on the fly. The F# interactive service allows you to embed F# evaluation in\nyour application.\n\n\u003E **NOTE:** There is a number of options for embedding F# Interactive. The easiest one is to use the\n\u0060fsi.exe\u0060 process and communicate with it using standard input and standard output. In this\ntutorial, we look at calling F# Interactive directly through .NET API. However, if you have\nno control over the input, it is a good idea to run F# interactive in a separate process.\nOne reason is that there is no way to handle \u0060StackOverflowException\u0060 and so a poorly written\nscript can terminate the host process. **Remember that while calling F# Interactive through .NET API,\n\u0060 --shadowcopyreferences\u0060 option will be ignored**. For detailed discussion, please take a look at\n[this thread](https://github.com/fsharp/FSharp.Compiler.Service/issues/292).\n\u003E **NOTE:** If \u0060FsiEvaluationSession.Create\u0060 fails with an error saying that \u0060FSharp.Core.dll\u0060 cannot be found,\nadd the \u0060FSharp.Core.sigdata\u0060 and \u0060FSharp.Core.optdata\u0060 files. More info [here](https://fsharp.github.io/FSharp.Compiler.Service/corelib.html).\n\nHowever, the F# interactive service is still useful, because you might want to wrap it in your\nown executable that is then executed (and communicates with the rest of your application), or\nif you only need to execute limited subset of F# code (e.g. generated by your own DSL).\n\nStarting the F# interactive\n---------------------------\n\nFirst, we need to reference the libraries that contain F# interactive service:\n*)\n\n#r \u0022FSharp.Compiler.Service.dll\u0022\n\nopen FSharp.Compiler.Interactive.Shell\nopen FSharp.Compiler.Tokenization\n\n(**\nTo communicate with F# interactive, we need to create streams that represent input and\noutput. We will use those later to read the output printed as a result of evaluating some\nF# code that prints:\n*)\nopen System\nopen System.IO\nopen System.Text\n\n// Initialize output and input streams\nlet sbOut = new StringBuilder()\nlet sbErr = new StringBuilder()\nlet inStream = new StringReader(\u0022\u0022)\nlet outStream = new StringWriter(sbOut)\nlet errStream = new StringWriter(sbErr)\n\n// Build command line arguments \u0026 start FSI session\nlet argv = [| \u0022C:\\\\fsi.exe\u0022 |]\n\nlet allArgs =\n    Array.append argv [| \u0022--noninteractive\u0022 |]\n\nlet fsiConfig =\n    FsiEvaluationSession.GetDefaultConfiguration()\n\nlet fsiSession =\n    FsiEvaluationSession.Create(fsiConfig, allArgs, inStream, outStream, errStream)\n\n\n\n(**\nEvaluating and executing code\n-----------------------------\n\nThe F# interactive service exposes several methods that can be used for evaluation. The first\nis \u0060EvalExpression\u0060 which evaluates an expression and returns its result. The result contains\nthe returned value (as \u0060obj\u0060) and the statically inferred type of the value:\n*)\n/// Evaluate expression \u0026 return the result\nlet evalExpression text =\n    match fsiSession.EvalExpression(text) with\n    | Some value -\u003E printfn \u0022%A\u0022 value.ReflectionValue\n    | None -\u003E printfn \u0022Got no result!\u0022\n\n(**\nThis takes a string as an argument and evaluates (i.e. executes) it as F# code.\n*)\nevalExpression \u002242\u002B1\u0022 // prints \u002743\u0027\n\n(**\nThis can be used in a strongly typed way as follows:\n*)\n\n/// Evaluate expression \u0026 return the result, strongly typed\nlet evalExpressionTyped\u003C\u0027T\u003E (text) =\n    match fsiSession.EvalExpression(text) with\n    | Some value -\u003E value.ReflectionValue |\u003E unbox\u003C\u0027T\u003E\n    | None -\u003E failwith \u0022Got no result!\u0022\n\nevalExpressionTyped\u003Cint\u003E \u002242\u002B1\u0022 // gives \u002743\u0027\n\n\n(**\nThe \u0060EvalInteraction\u0060 method can be used to evaluate side-effectful operations\nsuch as printing, declarations, or other interactions that are not valid F# expressions, but can be entered in\nthe F# Interactive console. Such commands include \u0060#time \u0022on\u0022\u0060 (and other directives), \u0060open System\u0060\nall declarations and other top-level statements. The code\ndoes not require \u0060;;\u0060 at the end. Just enter the code that you want to execute:\n*)\nfsiSession.EvalInteraction \u0022printfn \\\u0022bye\\\u0022\u0022\n\n\n(**\nThe \u0060EvalScript\u0060 method allows to evaluate a complete .fsx script.\n*)\n\nFile.WriteAllText(\u0022sample.fsx\u0022, \u0022let twenty = 10 \u002B 10\u0022)\nfsiSession.EvalScript \u0022sample.fsx\u0022\n\n(**\nCatching errors\n------------------\n\n\u0060\u0060EvalExpression\u0060\u0060, \u0060\u0060EvalInteraction\u0060\u0060 and \u0060\u0060EvalScript\u0060\u0060 are awkward if the\ncode has type checking warnings or errors, or if evaluation fails with an exception.\nIn these cases you can use \u0060\u0060EvalExpressionNonThrowing\u0060\u0060, \u0060\u0060EvalInteractionNonThrowing\u0060\u0060\nand \u0060\u0060EvalScriptNonThrowing\u0060\u0060. These return a tuple of a result and an array of \u0060\u0060FSharpDiagnostic\u0060\u0060 values.\nThese represent the errors and warnings. The result part is a \u0060\u0060Choice\u003C_,_\u003E\u0060\u0060 between an actual\nresult and an exception.\n\nThe result part of \u0060\u0060EvalExpression\u0060\u0060 and \u0060\u0060EvalExpressionNonThrowing\u0060\u0060 is an optional \u0060\u0060FSharpValue\u0060\u0060.\nIf that value is not present then it just indicates that the expression didn\u0027t have a tangible\nresult that could be represented as a .NET object.  This situation shouldn\u0027t actually\noccur for any normal input expressions, and only for primitives used in libraries.\n*)\n\nFile.WriteAllText(\u0022sample.fsx\u0022, \u0022let twenty = \u0027a\u0027 \u002B 10.0\u0022)\n\nlet result, warnings =\n    fsiSession.EvalScriptNonThrowing \u0022sample.fsx\u0022\n\n// show the result\nmatch result with\n| Choice1Of2 () -\u003E printfn \u0022checked and executed ok\u0022\n| Choice2Of2 exn -\u003E printfn \u0022execution exception: %s\u0022 exn.Message\n\n\n(**\nGives:\n\n    execution exception: Operation could not be completed due to earlier error\n*)\n\n// show the errors and warnings\nfor w in warnings do\n    printfn \u0022Warning %s at %d,%d\u0022 w.Message w.StartLine w.StartColumn\n\n(**\nGives:\n\n    Warning The type \u0027float\u0027 does not match the type \u0027char\u0027 at 1,19\n    Warning The type \u0027float\u0027 does not match the type \u0027char\u0027 at 1,17\n\nFor expressions:\n*)\n\n\nlet evalExpressionTyped2\u003C\u0027T\u003E text =\n    let res, warnings =\n        fsiSession.EvalExpressionNonThrowing(text)\n\n    for w in warnings do\n        printfn \u0022Warning %s at %d,%d\u0022 w.Message w.StartLine w.StartColumn\n\n    match res with\n    | Choice1Of2 (Some value) -\u003E value.ReflectionValue |\u003E unbox\u003C\u0027T\u003E\n    | Choice1Of2 None -\u003E failwith \u0022null or no result\u0022\n    | Choice2Of2 (exn: exn) -\u003E failwith (sprintf \u0022exception %s\u0022 exn.Message)\n\nevalExpressionTyped2\u003Cint\u003E \u002242\u002B1\u0022 // gives \u002743\u0027\n\n\n(**\nExecuting in parallel\n------------------\n\nBy default the code passed to \u0060\u0060EvalExpression\u0060\u0060 is executed immediately. To execute in parallel, submit a computation that starts a task:\n*)\n\nopen System.Threading.Tasks\n\nlet sampleLongRunningExpr =\n    \u0022\u0022\u0022\nasync {\n    // The code of what you want to run\n    do System.Threading.Thread.Sleep 5000\n    return 10\n}\n  |\u003E Async.StartAsTask\u0022\u0022\u0022\n\nlet task1 =\n    evalExpressionTyped\u003CTask\u003Cint\u003E\u003E (sampleLongRunningExpr)\n\nlet task2 =\n    evalExpressionTyped\u003CTask\u003Cint\u003E\u003E (sampleLongRunningExpr)\n\n(**\nBoth computations have now started.  You can now fetch the results:\n*)\n\n\ntask1.Result // gives the result after completion (up to 5 seconds)\ntask2.Result // gives the result after completion (up to 5 seconds)\n\n(**\nType checking in the evaluation context\n------------------\n\nLet\u0027s assume you have a situation where you would like to typecheck code\nin the context of the F# Interactive scripting session. For example, you first\nevaluation a declaration:\n*)\n\nfsiSession.EvalInteraction \u0022let xxx = 1 \u002B 1\u0022\n\n(**\n\nNow you want to typecheck the partially complete code \u0060xxx \u002B xx\u0060\n*)\n\nlet parseResults, checkResults, checkProjectResults =\n    fsiSession.ParseAndCheckInteraction(\u0022xxx \u002B xx\u0022)\n\n(**\nThe \u0060parseResults\u0060 and \u0060checkResults\u0060 have types \u0060ParseFileResults\u0060 and \u0060CheckFileResults\u0060\nexplained in [Editor](editor.html). You can, for example, look at the type errors in the code:\n*)\ncheckResults.Diagnostics.Length // 1\n\n(**\nThe code is checked with respect to the logical type context available in the F# interactive session\nbased on the declarations executed so far.\n\nYou can also request declaration list information, tooltip text and symbol resolution:\n*)\n\n// get a tooltip\ncheckResults.GetToolTip(1, 2, \u0022xxx \u002B xx\u0022, [ \u0022xxx\u0022 ], FSharpTokenTag.IDENT)\n\ncheckResults.GetSymbolUseAtLocation(1, 2, \u0022xxx \u002B xx\u0022, [ \u0022xxx\u0022 ]) // symbol xxx\n\n(**\nThe \u0027fsi\u0027 object\n------------------\n\nIf you want your scripting code to be able to access the \u0027fsi\u0027 object, you should pass in an implementation of this object explicitly.\nNormally the one from FSharp.Compiler.Interactive.Settings.dll is used.\n*)\n\nlet fsiConfig2 =\n    FsiEvaluationSession.GetDefaultConfiguration(fsiSession)\n\n(**\nCollectible code generation\n------------------\n\nEvaluating code in using FsiEvaluationSession generates a .NET dynamic assembly and uses other resources.\nYou can make generated code collectible by passing \u0060collectible=true\u0060.  However code will only\nbe collected if there are no outstanding object references involving types, for example\n\u0060FsiValue\u0060 objects returned by \u0060EvalExpression\u0060, and you must have disposed the \u0060FsiEvaluationSession\u0060.\nSee also [Restrictions on Collectible Assemblies](https://docs.microsoft.com/en-us/previous-versions/dotnet/netframework-4.0/dd554932(v=vs.100)#restrictions).\n\nThe example below shows the creation of 200 evaluation sessions. Note that \u0060collectible=true\u0060 and\n\u0060use session = ...\u0060 are both used.\n\nIf collectible code is working correctly,\noverall resource usage will not increase linearly as the evaluation progresses.\n*)\n\nlet collectionTest () =\n\n    for i in 1 .. 200 do\n        let defaultArgs =\n            [| \u0022fsi.exe\u0022\n               \u0022--noninteractive\u0022\n               \u0022--nologo\u0022\n               \u0022--gui-\u0022 |]\n\n        use inStream = new StringReader(\u0022\u0022)\n        use outStream = new StringWriter()\n        use errStream = new StringWriter()\n\n        let fsiConfig =\n            FsiEvaluationSession.GetDefaultConfiguration()\n\n        use session =\n            FsiEvaluationSession.Create(fsiConfig, defaultArgs, inStream, outStream, errStream, collectible = true)\n\n        session.EvalInteraction(sprintf \u0022type D = { v : int }\u0022)\n\n        let v =\n            session.EvalExpression(sprintf \u0022{ v = 42 * %d }\u0022 i)\n\n        printfn \u0022iteration %d, result = %A\u0022 i v.Value.ReflectionValue\n\n// collectionTest()  \u003C-- run the test like this"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/project.html","title":"Tutorial: Project analysis","content":"(**\n---\ntitle: Tutorial: Project analysis\ncategory: FSharp.Compiler.Service\ncategoryindex: 300\nindex: 600\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nCompiler Services: Project Analysis\n==================================\n\nThis tutorial demonstrates how to can analyze a whole project using services provided by the F# compiler.\n\n\u003E **NOTE:** The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published.\n\n*)\n\n\n(**\n\nGetting whole-project results\n-----------------------------\n\nAs in the [previous tutorial (using untyped AST)](untypedtree.html), we start by referencing\n\u0060FSharp.Compiler.Service.dll\u0060, opening the relevant namespace and creating an instance\nof \u0060InteractiveChecker\u0060:\n\n*)\n// Reference F# compiler API\n#r \u0022FSharp.Compiler.Service.dll\u0022\n\nopen System\nopen System.Collections.Generic\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.Symbols\nopen FSharp.Compiler.Text\n\n// Create an interactive checker instance\nlet checker = FSharpChecker.Create()\n\n(**\nHere are our sample inputs:\n*)\n\nmodule Inputs =\n    open System.IO\n\n    let base1 = Path.GetTempFileName()\n    let fileName1 = Path.ChangeExtension(base1, \u0022.fs\u0022)\n    let base2 = Path.GetTempFileName()\n    let fileName2 = Path.ChangeExtension(base2, \u0022.fs\u0022)\n    let dllName = Path.ChangeExtension(base2, \u0022.dll\u0022)\n    let projFileName = Path.ChangeExtension(base2, \u0022.fsproj\u0022)\n\n    let fileSource1 =\n        \u0022\u0022\u0022\nmodule M\n\ntype C() =\n    member x.P = 1\n\nlet xxx = 3 \u002B 4\nlet fff () = xxx \u002B xxx\n    \u0022\u0022\u0022\n\n    File.WriteAllText(fileName1, fileSource1)\n\n    let fileSource2 =\n        \u0022\u0022\u0022\nmodule N\n\nopen M\n\ntype D1() =\n    member x.SomeProperty = M.xxx\n\ntype D2() =\n    member x.SomeProperty = M.fff() \u002B D1().P\n\n// Generate a warning\nlet y2 = match 1 with 1 -\u003E M.xxx\n    \u0022\u0022\u0022\n\n    File.WriteAllText(fileName2, fileSource2)\n\n\n(**\nWe use \u0060GetProjectOptionsFromCommandLineArgs\u0060 to treat two files as a project:\n*)\n\nlet projectOptions =\n    let sysLib nm =\n        if System.Environment.OSVersion.Platform = System.PlatformID.Win32NT then\n            // file references only valid on Windows\n            System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\n            \u002B @\u0022\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0\\\u0022\n            \u002B nm\n            \u002B \u0022.dll\u0022\n        else\n            let sysDir =\n                System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory()\n\n            let (\u002B\u002B) a b = System.IO.Path.Combine(a, b)\n            sysDir \u002B\u002B nm \u002B \u0022.dll\u0022\n\n    let fsCore4300 () =\n        if System.Environment.OSVersion.Platform = System.PlatformID.Win32NT then\n            // file references only valid on Windows\n            System.Environment.GetFolderPath(System.Environment.SpecialFolder.ProgramFilesX86)\n            \u002B @\u0022\\Reference Assemblies\\Microsoft\\FSharp\\.NETFramework\\v4.0\\4.3.0.0\\FSharp.Core.dll\u0022\n        else\n            sysLib \u0022FSharp.Core\u0022\n\n    checker.GetProjectOptionsFromCommandLineArgs(\n        Inputs.projFileName,\n        [| yield \u0022--simpleresolution\u0022\n           yield \u0022--noframework\u0022\n           yield \u0022--debug:full\u0022\n           yield \u0022--define:DEBUG\u0022\n           yield \u0022--optimize-\u0022\n           yield \u0022--out:\u0022 \u002B Inputs.dllName\n           yield \u0022--doc:test.xml\u0022\n           yield \u0022--warn:3\u0022\n           yield \u0022--fullpaths\u0022\n           yield \u0022--flaterrors\u0022\n           yield \u0022--target:library\u0022\n           yield Inputs.fileName1\n           yield Inputs.fileName2\n           let references =\n               [ sysLib \u0022mscorlib\u0022\n                 sysLib \u0022System\u0022\n                 sysLib \u0022System.Core\u0022\n                 fsCore4300 () ]\n\n           for r in references do\n               yield \u0022-r:\u0022 \u002B r |]\n    )\n\n(**\nNow check the entire project (using the files saved on disk):\n*)\n\nlet wholeProjectResults =\n    checker.ParseAndCheckProject(projectOptions)\n    |\u003E Async.RunSynchronously\n\n(**\nNow look at the errors and warnings:\n*)\nwholeProjectResults.Diagnostics.Length // 1\n\nwholeProjectResults.Diagnostics.[0]\n    .Message.Contains(\u0022Incomplete pattern matches on this expression\u0022) // yes it does\n\nwholeProjectResults.Diagnostics.[0].StartLine\nwholeProjectResults.Diagnostics.[0].EndLine\nwholeProjectResults.Diagnostics.[0].StartColumn\nwholeProjectResults.Diagnostics.[0].EndColumn\n\n(**\nNow look at the inferred signature for the project:\n*)\n[ for x in wholeProjectResults.AssemblySignature.Entities -\u003E x.DisplayName ] // [\u0022N\u0022; \u0022M\u0022]\n\n[ for x in\n      wholeProjectResults.AssemblySignature.Entities.[0]\n          .NestedEntities -\u003E x.DisplayName ] // [\u0022D1\u0022; \u0022D2\u0022]\n\n[ for x in\n      wholeProjectResults.AssemblySignature.Entities.[1]\n          .NestedEntities -\u003E x.DisplayName ] // [\u0022C\u0022]\n\n[ for x in\n      wholeProjectResults.AssemblySignature.Entities.[0]\n          .MembersFunctionsAndValues -\u003E x.DisplayName ] // [\u0022y\u0022; \u0022y2\u0022]\n\n(**\nYou can also get all symbols in the project:\n*)\nlet rec allSymbolsInEntities (entities: IList\u003CFSharpEntity\u003E) =\n    [ for e in entities do\n          yield (e :\u003E FSharpSymbol)\n\n          for x in e.MembersFunctionsAndValues do\n              yield (x :\u003E FSharpSymbol)\n\n          for x in e.UnionCases do\n              yield (x :\u003E FSharpSymbol)\n\n          for x in e.FSharpFields do\n              yield (x :\u003E FSharpSymbol)\n\n          yield! allSymbolsInEntities e.NestedEntities ]\n\nlet allSymbols =\n    allSymbolsInEntities wholeProjectResults.AssemblySignature.Entities\n(**\nAfter checking the whole project, you can access the background results for individual files\nin the project. This will be fast and will not involve any additional checking.\n*)\n\nlet backgroundParseResults1, backgroundTypedParse1 =\n    checker.GetBackgroundCheckResultsForFileInProject(Inputs.fileName1, projectOptions)\n    |\u003E Async.RunSynchronously\n\n\n(**\nYou can now resolve symbols in each file:\n*)\n\nlet xSymbolUseOpt =\n    backgroundTypedParse1.GetSymbolUseAtLocation(9, 9, \u0022\u0022, [ \u0022xxx\u0022 ])\n\nlet xSymbolUse = xSymbolUseOpt.Value\n\nlet xSymbol = xSymbolUse.Symbol\n\n(**\nYou can find out more about a symbol by doing type checks on various symbol kinds:\n*)\n\nlet xSymbolAsValue =\n    match xSymbol with\n    | :? FSharpMemberOrFunctionOrValue as xSymbolAsVal -\u003E xSymbolAsVal\n    | _ -\u003E failwith \u0022we expected this to be a member, function or value\u0022\n\n\n(**\nFor each symbol, you can look up the references to that symbol:\n*)\nlet usesOfXSymbol =\n    wholeProjectResults.GetUsesOfSymbol(xSymbol)\n\n(**\nYou can iterate all the defined symbols in the inferred signature and find where they are used:\n*)\nlet allUsesOfAllSignatureSymbols =\n    [ for s in allSymbols do\n          let uses = wholeProjectResults.GetUsesOfSymbol(s)\n          yield s.ToString(), uses ]\n\n(**\nYou can also look at all the symbols uses in the whole project (including uses of symbols with local scope)\n*)\nlet allUsesOfAllSymbols =\n    wholeProjectResults.GetAllUsesOfAllSymbols()\n\n(**\nYou can also request checks of updated versions of files within the project (note that the other files\nin the project are still read from disk, unless you are using the [FileSystem API](filesystem.html)):\n\n*)\n\nlet parseResults1, checkAnswer1 =\n    checker.ParseAndCheckFileInProject(Inputs.fileName1, 0, SourceText.ofString Inputs.fileSource1, projectOptions)\n    |\u003E Async.RunSynchronously\n\nlet checkResults1 =\n    match checkAnswer1 with\n    | FSharpCheckFileAnswer.Succeeded x -\u003E x\n    | _ -\u003E failwith \u0022unexpected aborted\u0022\n\nlet parseResults2, checkAnswer2 =\n    checker.ParseAndCheckFileInProject(Inputs.fileName2, 0, SourceText.ofString Inputs.fileSource2, projectOptions)\n    |\u003E Async.RunSynchronously\n\nlet checkResults2 =\n    match checkAnswer2 with\n    | FSharpCheckFileAnswer.Succeeded x -\u003E x\n    | _ -\u003E failwith \u0022unexpected aborted\u0022\n\n(**\nAgain, you can resolve symbols and ask for references:\n*)\n\nlet xSymbolUse2Opt =\n    checkResults1.GetSymbolUseAtLocation(9, 9, \u0022\u0022, [ \u0022xxx\u0022 ])\n\nlet xSymbolUse2 = xSymbolUse2Opt.Value\n\nlet xSymbol2 = xSymbolUse2.Symbol\n\nlet usesOfXSymbol2 =\n    wholeProjectResults.GetUsesOfSymbol(xSymbol2)\n\n(**\nOr ask for all the symbols uses in the file (including uses of symbols with local scope)\n*)\nlet allUsesOfAllSymbolsInFile1 =\n    checkResults1.GetAllUsesOfAllSymbolsInFile()\n\n(**\nOr ask for all the uses of one symbol in one file:\n*)\nlet allUsesOfXSymbolInFile1 =\n    checkResults1.GetUsesOfSymbolInFile(xSymbol2)\n\nlet allUsesOfXSymbolInFile2 =\n    checkResults2.GetUsesOfSymbolInFile(xSymbol2)\n\n(**\n\nAnalyzing multiple projects\n-----------------------------\n\nIf you have multiple F# projects to analyze which include references from some projects to others,\nthen the simplest way to do this is to build the projects and specify the cross-project references using\na \u0060-r:path-to-output-of-project.dll\u0060 argument in the ProjectOptions. However, this requires the build\nof each project to succeed, producing the DLL file on disk which can be referred to.\n\nIn some situations, e.g. in an IDE, you may wish to allow references to other F# projects prior to successful compilation to\na DLL. To do this, fill in the ProjectReferences entry in ProjectOptions, which recursively specifies the project\noptions for dependent projects. Each project reference still needs a corresponding \u0060-r:path-to-output-of-project.dll\u0060\ncommand line argument in ProjectOptions, along with an entry in ProjectReferences.\nThe first element of each tuple in the ProjectReferences entry should be the DLL name, i.e. \u0060path-to-output-of-project.dll\u0060.\nThis should be the same as the text used in the \u0060-r\u0060 project reference.\n\nWhen a project reference is used, the analysis will make use of the results of incremental\nanalysis of the referenced F# project from source files, without requiring the compilation of these files to DLLs.\n\nTo efficiently analyze a set of F# projects which include cross-references, you should populate the ProjectReferences\ncorrectly and then analyze each project in turn.\n\n*)\n\n(**\n\n\u003E **NOTE:** Project references are disabled if the assembly being referred to contains type provider components -\n  specifying the project reference will have no effect beyond forcing the analysis of the project, and the DLL will\n  still be required on disk.\n\n*)\n\n(**\nSummary\n-------\n\nAs you have seen, the \u0060ParseAndCheckProject\u0060 lets you access results of project-wide analysis\nsuch as symbol references. To learn more about working with symbols, see [Symbols](symbols.html).\n\nUsing the FSharpChecker component in multi-project, incremental and interactive editing situations may involve\nknowledge of the [FSharpChecker operations queue](queue.html) and the [FSharpChecker caches](caches.html).\n\n*)"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/react.html","title":"Incrementality","content":"(**\n---\ntitle: Incrementality\ncategory: Language Service Internals\ncategoryindex: 300\nindex: 1400\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nSnapshots, incrementality and reacting to changes\n============================================\n\nFCS is an incremental execution engine. The aim is to make it Roslyn-like. We\u0027re not quite there.\n\nThere are two dimensions of incrementality:\n\n* The inputs change, e.g. the source filed are edited or a referenced assembly changes, appears or disappears\n* The results of analysis on the inputs (e.g. a parse tree) are further enriched with information (e.g. symbol uses are requested) and this information is held, i.e. not re-computed, perhaps by a returned object.\n\nThe logical results of all \u0022Check\u0022 routines (\u0060\u0060ParseAndCheckFileInProject\u0060\u0060, \u0060\u0060GetBackgroundCheckResultsForFileInProject\u0060\u0060, \n\u0060\u0060TryGetRecentTypeCheckResultsForFile\u0060\u0060, \u0060\u0060ParseAndCheckProject\u0060\u0060) depend on results reported by the file system,\nespecially the \u0060\u0060IFileSystem\u0060\u0060 implementation described in the tutorial on [project wide analysis](project.html).\nLogically speaking, these results would be different if file system changes occur.  For example,\nreferenced DLLs may change on disk, or referenced files may change.\n\nThere is [work-in-progress](https://github.com/dotnet/fsharp/issues/11976) to make all parsing and checking deliver results based on immutable snapshots of inputs.\n\n*)"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/symbols.html","title":"Tutorial: Symbols","content":"(**\n---\ntitle: Tutorial: Symbols\ncategory: FSharp.Compiler.Service\ncategoryindex: 300\nindex: 400\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nCompiler Services: Working with symbols\n============================================\n\nThis tutorial demonstrates how to work with symbols provided by the F# compiler. See also [project wide analysis](project.html)\nfor information on symbol references.\n\n\u003E **NOTE:** The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published.\n\nAs usual we start by referencing \u0060FSharp.Compiler.Service.dll\u0060, opening the relevant namespace and creating an instance\nof \u0060FSharpChecker\u0060:\n\n*)\n// Reference F# compiler API\n#r \u0022FSharp.Compiler.Service.dll\u0022\n\nopen System\nopen System.IO\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.Symbols\nopen FSharp.Compiler.Text\n\n// Create an interactive checker instance \nlet checker = FSharpChecker.Create()\n\n(**\n\nWe now perform type checking on the specified input:\n\n*)\n\nlet parseAndTypeCheckSingleFile (file, input) = \n    // Get context representing a stand-alone (script) file\n    let projOptions, errors = \n        checker.GetProjectOptionsFromScript(file, input, assumeDotNetFramework=false)\n        |\u003E Async.RunSynchronously\n\n    let parseFileResults, checkFileResults = \n        checker.ParseAndCheckFileInProject(file, 0, input, projOptions) \n        |\u003E Async.RunSynchronously\n\n    // Wait until type checking succeeds (or 100 attempts)\n    match checkFileResults with\n    | FSharpCheckFileAnswer.Succeeded(res) -\u003E parseFileResults, res\n    | res -\u003E failwithf \u0022Parsing did not finish... (%A)\u0022 res\n\nlet file = \u0022/home/user/Test.fsx\u0022\n\n(**\n## Getting resolved signature information about the file\n\nAfter type checking a file, you can access the inferred signature of a project up to and including the\nchecking of the given file through the \u0060PartialAssemblySignature\u0060 property of the \u0060TypeCheckResults\u0060.\n\nThe full signature information is available for modules, types, attributes, members, values, functions, \nunion cases, record types, units of measure and other F# language constructs.\n\nThe typed expression trees are also available, see [typed tree tutorial](typedtree.html).\n\n*)\n\nlet input2 = \n      \u0022\u0022\u0022\n[\u003CSystem.CLSCompliant(true)\u003E]\nlet foo(x, y) = \n    let msg = String.Concat(\u0022Hello\u0022,\u0022 \u0022,\u0022world\u0022)\n    if true then \n        printfn \u0022x = %d, y = %d\u0022 x y \n        printfn \u0022%s\u0022 msg\n\ntype C() = \n    member x.P = 1\n      \u0022\u0022\u0022\nlet parseFileResults, checkFileResults = \n    parseAndTypeCheckSingleFile(file, SourceText.ofString input2)\n\n(**\nNow get the partial assembly signature for the code:\n*)\nlet partialAssemblySignature = checkFileResults.PartialAssemblySignature\n    \npartialAssemblySignature.Entities.Count = 1  // one entity\n    \n\n(**\nNow get the entity that corresponds to the module containing the code:\n*)\nlet moduleEntity = partialAssemblySignature.Entities.[0]\n\nmoduleEntity.DisplayName = \u0022Test\u0022\n\n(**\nNow get the entity that corresponds to the type definition in the code:\n*)\nlet classEntity = moduleEntity.NestedEntities.[0]\n\n(**\nNow get the value that corresponds to the function defined in the code:\n*)\nlet fnVal = moduleEntity.MembersFunctionsAndValues.[0]\n\n(**\nNow look around at the properties describing the function value. All of the following evaluate to \u0060true\u0060:\n*)\nfnVal.Attributes.Count = 1\nfnVal.CurriedParameterGroups.Count // 1\nfnVal.CurriedParameterGroups.[0].Count // 2\nfnVal.CurriedParameterGroups.[0].[0].Name // \u0022x\u0022\nfnVal.CurriedParameterGroups.[0].[1].Name // \u0022y\u0022\nfnVal.DeclarationLocation.StartLine // 3\nfnVal.DisplayName // \u0022foo\u0022\nfnVal.DeclaringEntity.Value.DisplayName // \u0022Test\u0022\nfnVal.DeclaringEntity.Value.DeclarationLocation.StartLine // 1\nfnVal.GenericParameters.Count // 0\nfnVal.InlineAnnotation // FSharpInlineAnnotation.OptionalInline\nfnVal.IsActivePattern // false\nfnVal.IsCompilerGenerated // false\nfnVal.IsDispatchSlot // false\nfnVal.IsExtensionMember // false\nfnVal.IsPropertyGetterMethod // false\nfnVal.IsImplicitConstructor // false\nfnVal.IsInstanceMember // false\nfnVal.IsMember // false\nfnVal.IsModuleValueOrMember // true\nfnVal.IsMutable // false\nfnVal.IsPropertySetterMethod // false\nfnVal.IsTypeFunction // false\n\n(**\nNow look at the type of the function if used as a first class value. (Aside: the \u0060CurriedParameterGroups\u0060 property contains\nmore information like the names of the arguments.)\n*)\nfnVal.FullType // int * int -\u003E unit\nfnVal.FullType.IsFunctionType // int * int -\u003E unit\nfnVal.FullType.GenericArguments.[0] // int * int \nfnVal.FullType.GenericArguments.[0].IsTupleType // int * int \nlet argTy1 = fnVal.FullType.GenericArguments.[0].GenericArguments.[0]\n\nargTy1.TypeDefinition.DisplayName // int\n\n(**\nOK, so we got an object representation of the type \u0060int * int -\u003E unit\u0060, and we have seen the first \u0027int\u0027. We can find out more about the\ntype \u0027int\u0027 as follows, determining that it is a named type, which is an F# type abbreviation, \u0060type int = int32\u0060:\n*)\n\nargTy1.HasTypeDefinition\nargTy1.TypeDefinition.IsFSharpAbbreviation // \u0022int\u0022\n\n(**\nWe can now look at the right-hand-side of the type abbreviation, which is the type \u0060int32\u0060:\n*)\n\nlet argTy1b = argTy1.TypeDefinition.AbbreviatedType\nargTy1b.TypeDefinition.Namespace // Some \u0022Microsoft.FSharp.Core\u0022 \nargTy1b.TypeDefinition.CompiledName // \u0022int32\u0022 \n\n(**\nAgain we can now look through the type abbreviation \u0060type int32 = System.Int32\u0060 to get the \nfull information about the type:\n*)\nlet argTy1c = argTy1b.TypeDefinition.AbbreviatedType\nargTy1c.TypeDefinition.Namespace // Some \u0022SystemCore\u0022 \nargTy1c.TypeDefinition.CompiledName // \u0022Int32\u0022 \n\n(**\nThe type checking results for a file also contain information extracted from the project (or script) options\nused in the compilation, called the \u0060ProjectContext\u0060:\n*)\nlet projectContext = checkFileResults.ProjectContext\n    \nfor assembly in projectContext.GetReferencedAssemblies() do\n    match assembly.FileName with \n    | None -\u003E printfn \u0022compilation referenced an assembly without a file\u0022 \n    | Some s -\u003E printfn \u0022compilation references assembly \u0027%s\u0027\u0022 s\n    \n\n(**\n**Notes:**\n\n  - If incomplete code is present, some or all of the attributes may not be quite as expected.\n  - If some assembly references are missing (which is actually very, very common), then \u0027IsUnresolved\u0027  may\n    be true on values, members and/or entities related to external assemblies.  You should be sure to make your\n    code robust against IsUnresolved exceptions.\n\n*)\n\n(**\n\n## Getting symbolic information about whole projects\n\nTo check whole projects, create a checker, then call \u0060parseAndCheckScript\u0060. In this case, we just check \nthe project for a single script. By specifying a different \u0022projOptions\u0022 you can create \na specification of a larger project.\n*)\nlet parseAndCheckScript (file, input) = \n    let projOptions, errors = \n        checker.GetProjectOptionsFromScript(file, input, assumeDotNetFramework=false)\n        |\u003E Async.RunSynchronously\n\n    checker.ParseAndCheckProject(projOptions) |\u003E Async.RunSynchronously\n\n(**\nNow do it for a particular input:\n*)\n\nlet tmpFile = Path.ChangeExtension(System.IO.Path.GetTempFileName() , \u0022fs\u0022)\nFile.WriteAllText(tmpFile, input2)\n\nlet projectResults = parseAndCheckScript(tmpFile, SourceText.ofString input2)\n\n\n(**\nNow look at the results:\n*)\n\nlet assemblySig = projectResults.AssemblySignature\n    \nprintfn $\u0022#entities = {assemblySig.Entities.Count}\u0022 // 1\nprintfn $\u0022namespace = {assemblySig.Entities.[0].Namespace}\u0022  // one entity\nprintfn $\u0022entity name = {assemblySig.Entities.[0].DisplayName}\u0022 // \u0022Tmp28D0\u0022\nprintfn $\u0022#members = {assemblySig.Entities.[0].MembersFunctionsAndValues.Count}\u0022 // 1 \nprintfn $\u0022member name = {assemblySig.Entities.[0].MembersFunctionsAndValues.[0].DisplayName}\u0022 // \u0022foo\u0022 \n    "},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/tokenizer.html","title":"Tutorial: Tokenizing","content":"(**\n---\ntitle: Tutorial: Tokenizing\ncategory: FSharp.Compiler.Service\ncategoryindex: 300\nindex: 200\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nCompiler Services: Using the F# tokenizer\n=========================================\n\nThis tutorial demonstrates how to call the F# language tokenizer. Given F# \nsource code, the tokenizer generates a list of source code lines that contain\ninformation about tokens on each line. For each token, you can get the type\nof the token, exact location as well as color kind of the token (keyword, \nidentifier, number, operator, etc.).\n\n\u003E **NOTE:** The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n\n\nCreating the tokenizer\n---------------------\n\nTo use the tokenizer, reference \u0060FSharp.Compiler.Service.dll\u0060 and open the\n\u0060FSharp.Compiler.Tokenization\u0060 namespace:\n*)\n#r \u0022FSharp.Compiler.Service.dll\u0022\nopen FSharp.Compiler.Tokenization\n(**\nNow you can create an instance of \u0060FSharpSourceTokenizer\u0060. The class takes two \narguments - the first is the list of defined symbols and the second is the\nfile name of the source code. The defined symbols are required because the\ntokenizer handles \u0060#if\u0060 directives. The file name is required only to specify\nlocations of the source code (and it does not have to exist):\n*)\nlet sourceTok = FSharpSourceTokenizer([], Some \u0022C:\\\\test.fsx\u0022)\n(**\nUsing the \u0060sourceTok\u0060 object, we can now (repeatedly) tokenize lines of \nF# source code.\n\nTokenizing F# code\n------------------\n\nThe tokenizer operates on individual lines rather than on the entire source\nfile. After getting a token, the tokenizer also returns new state (as \u0060int64\u0060 value).\nThis can be used to tokenize F# code more efficiently. When source code changes,\nyou do not need to re-tokenize the entire file - only the parts that have changed.\n\n### Tokenizing single line\n\nTo tokenize a single line, we create a \u0060FSharpLineTokenizer\u0060 by calling \u0060CreateLineTokenizer\u0060\non the \u0060FSharpSourceTokenizer\u0060 object that we created earlier:\n*)\nlet tokenizer = sourceTok.CreateLineTokenizer(\u0022let answer=42\u0022)\n(**\nNow, we can write a simple recursive function that calls \u0060ScanToken\u0060 on the \u0060tokenizer\u0060\nuntil it returns \u0060None\u0060 (indicating the end of line). When the function succeeds, it \nreturns \u0060FSharpTokenInfo\u0060 object with all the interesting details:\n*)\n/// Tokenize a single line of F# code\nlet rec tokenizeLine (tokenizer:FSharpLineTokenizer) state =\n  match tokenizer.ScanToken(state) with\n  | Some tok, state -\u003E\n      // Print token name\n      printf \u0022%s \u0022 tok.TokenName\n      // Tokenize the rest, in the new state\n      tokenizeLine tokenizer state\n  | None, state -\u003E state\n(**\nThe function returns the new state, which is needed if you need to tokenize multiple lines\nand an earlier line ends with a multi-line comment. As an initial state, we can use \u00600L\u0060:\n*)\ntokenizeLine tokenizer FSharpTokenizerLexState.Initial\n(**\nThe result is a sequence of tokens with names LET, WHITESPACE, IDENT, EQUALS and INT32.\nThere is a number of interesting properties on \u0060FSharpTokenInfo\u0060 including:\n\n - \u0060CharClass\u0060 and \u0060ColorClass\u0060 return information about the token category that\n   can be used for colorizing F# code.\n - \u0060LeftColumn\u0060 and \u0060RightColumn\u0060 return the location of the token inside the line.\n - \u0060TokenName\u0060 is the name of the token (as defined in the F# lexer) \n\nNote that the tokenizer is stateful - if you want to tokenize single line multiple times,\nyou need to call \u0060CreateLineTokenizer\u0060 again.\n\n### Tokenizing sample code\n\nTo run the tokenizer on a longer sample code or an entire file, you need to read the\nsample input as a collection of \u0060string\u0060 values:\n*)\nlet lines = \u0022\u0022\u0022\n  // Hello world\n  let hello() =\n     printfn \u0022Hello world!\u0022 \u0022\u0022\u0022.Split(\u0027\\r\u0027,\u0027\\n\u0027)\n(**\nTo tokenize multi-line input, we again need a recursive function that keeps the current\nstate. The following function takes the lines as a list of strings (together with line number\nand the current state). We create a new tokenizer for each line and call \u0060tokenizeLine\u0060\nusing the state from the *end* of the previous line:\n*)\n/// Print token names for multiple lines of code\nlet rec tokenizeLines state count lines = \n  match lines with\n  | line::lines -\u003E\n      // Create tokenizer \u0026 tokenize single line\n      printfn \u0022\\nLine %d\u0022 count\n      let tokenizer = sourceTok.CreateLineTokenizer(line)\n      let state = tokenizeLine tokenizer state\n      // Tokenize the rest using new state\n      tokenizeLines state (count\u002B1) lines\n  | [] -\u003E ()\n(**\nThe function simply calls \u0060tokenizeLine\u0060 (defined earlier) to print the names of all\nthe tokens on each line. We can call it on the previous input with \u00600L\u0060 as the initial\nstate and \u00601\u0060 as the number of the first line:\n*)\nlines\n|\u003E List.ofSeq\n|\u003E tokenizeLines FSharpTokenizerLexState.Initial 1\n(**\nIgnoring some unimportant details (like whitespace at the beginning of each line and\nthe first line which is just whitespace), the code generates the following output:\n\n    [lang=text]\n    Line 1\n      LINE_COMMENT LINE_COMMENT (...) LINE_COMMENT \n    Line 2\n      LET WHITESPACE IDENT LPAREN RPAREN WHITESPACE EQUALS \n    Line 3\n      IDENT WHITESPACE STRING_TEXT (...) STRING_TEXT STRING \n\nIt is worth noting that the tokenizer yields multiple \u0060LINE_COMMENT\u0060 tokens and multiple\n\u0060STRING_TEXT\u0060 tokens for each single comment or string (roughly, one for each word), so\nif you want to get the entire text of a comment/string, you need to concatenate the \ntokens.\n*)"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/typedtree.html","title":"Tutorial: Expressions","content":"(**\n---\ntitle: Tutorial: Expressions\ncategory: FSharp.Compiler.Service\ncategoryindex: 300\nindex: 500\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nCompiler Services: Processing typed expression tree\n=================================================\n\nThis tutorial demonstrates how to get the checked, typed expressions tree (TAST)\nfor F# code and how to walk over the tree. \n\nThis can be used for creating tools such as source code analyzers and refactoring tools.\nYou can also combine the information with the API available\nfrom [symbols](symbols.html). \n\n\u003E **NOTE:** The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n\n\nGetting checked expressions\n-----------------------\n\nTo access the type-checked, resolved expressions, you need to create an instance of \u0060InteractiveChecker\u0060.\n\nTo use the interactive checker, reference \u0060FSharp.Compiler.Service.dll\u0060 and open the\nrelevant namespaces:\n*)\n#r \u0022FSharp.Compiler.Service.dll\u0022\nopen System\nopen System.IO\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.EditorServices\nopen FSharp.Compiler.Symbols\nopen FSharp.Compiler.Text\n(**\n\n### Checking code\n\nWe first parse and check some code as in the [symbols](symbols.html) tutorial.\nOne difference is that we set keepAssemblyContents to true.\n\n*)\n// Create an interactive checker instance \nlet checker = FSharpChecker.Create(keepAssemblyContents=true)\n\nlet parseAndCheckSingleFile (input) = \n    let file = Path.ChangeExtension(System.IO.Path.GetTempFileName(), \u0022fsx\u0022)  \n    File.WriteAllText(file, input)\n    // Get context representing a stand-alone (script) file\n    let projOptions, _errors = \n        checker.GetProjectOptionsFromScript(file, SourceText.ofString input, assumeDotNetFramework=false)\n        |\u003E Async.RunSynchronously\n\n    checker.ParseAndCheckProject(projOptions) \n    |\u003E Async.RunSynchronously\n\n(**\n## Getting the expressions\n\nAfter type checking a file, you can access the declarations and contents of the assembly, including expressions:\n\n*)\n\nlet input2 = \n      \u0022\u0022\u0022\nmodule MyLibrary \n\nopen System\n\nlet foo(x, y) = \n    let msg = String.Concat(\u0022Hello\u0022, \u0022 \u0022, \u0022world\u0022)\n    if msg.Length \u003E 10 then \n        10 \n    else \n        20\n\ntype MyClass() = \n    member x.MyMethod() = 1\n      \u0022\u0022\u0022\nlet checkProjectResults = \n    parseAndCheckSingleFile(input2)\n\ncheckProjectResults.Diagnostics // should be empty\n\n(**\n\nChecked assemblies are made up of a series of checked implementation files.  The \u0022file\u0022 granularity\nmatters in F# because initialization actions are triggered at the granularity of files.\nIn this case there is only one implementation file in the project:\n\n*)\n\nlet checkedFile = checkProjectResults.AssemblyContents.ImplementationFiles.[0]\n\n(**\n\nChecked assemblies are made up of a series of checked implementation files.  The \u0022file\u0022 granularity\nmatters in F# because initialization actions are triggered at the granularity of files.\nIn this case there is only one implementation file in the project:\n\n*)\n\nlet rec printDecl prefix d = \n    match d with \n    | FSharpImplementationFileDeclaration.Entity (e, subDecls) -\u003E \n        printfn \u0022%sEntity %s was declared and contains %d sub-declarations\u0022 prefix e.CompiledName subDecls.Length\n        for subDecl in subDecls do \n            printDecl (prefix\u002B\u0022    \u0022) subDecl\n    | FSharpImplementationFileDeclaration.MemberOrFunctionOrValue(v, vs, e) -\u003E \n        printfn \u0022%sMember or value %s was declared\u0022 prefix  v.CompiledName\n    | FSharpImplementationFileDeclaration.InitAction(e) -\u003E \n        printfn \u0022%sA top-level expression was declared\u0022 prefix \n\n\nfor d in checkedFile.Declarations do \n   printDecl \u0022\u0022 d\n\n// Entity MyLibrary was declared and contains 4 sub-declarations\n//     Member or value foo was declared\n//     Entity MyClass was declared and contains 0 sub-declarations\n//     Member or value .ctor was declared\n//     Member or value MyMethod was declared\n\n(**\n\nAs can be seen, the only declaration in the implementation file is that of the module MyLibrary, which \ncontains fours sub-declarations.  \n\n\u003E As an aside, one peculiarity here is that the member declarations (e.g. the \u0022MyMethod\u0022 member) are returned as part of the containing module entity, not as part of their class.\n\n\u003E Note that the class constructor is returned as a separate declaration. The class type definition has been \u0022split\u0022 into a constructor and the other declarations.\n\n*)\n\nlet myLibraryEntity, myLibraryDecls =    \n   match checkedFile.Declarations.[0] with \n   | FSharpImplementationFileDeclaration.Entity (e, subDecls) -\u003E (e, subDecls)\n   | _ -\u003E failwith \u0022unexpected\u0022\n\n\n(**\n\nWhat about the expressions, for example the body of function \u0022foo\u0022? Let\u0027s find it:\n*)\n\nlet (fooSymbol, fooArgs, fooExpression) = \n    match myLibraryDecls.[0] with \n    | FSharpImplementationFileDeclaration.MemberOrFunctionOrValue(v, vs, e) -\u003E (v, vs, e)\n    | _ -\u003E failwith \u0022unexpected\u0022\n\n\n(** Here \u0027fooSymbol\u0027 is a symbol associated with the declaration of \u0027foo\u0027, \n\u0027fooArgs\u0027 represents the formal arguments to the \u0027foo\u0027 function, and \u0027fooExpression\u0027 \nis an expression for the implementation of the \u0027foo\u0027 function.\n\nOnce you have an expression, you can work with it much like an F# quotation.  For example, \nyou can find its declaration range and its type:\n\n*)\n\nfooExpression.Type  // shows that the return type of the body expression is \u0027int\u0027\nfooExpression.Range  // shows the declaration range of the expression implementing \u0027foo\u0027\n\n(**\n\n### Walking over expressions\n\n\nExpressions are analyzed using active patterns, much like F# quotations.\nHere is a generic expression visitor:\n\n*)\n\nlet rec visitExpr f (e:FSharpExpr) = \n    f e\n    match e with \n    | FSharpExprPatterns.AddressOf(lvalueExpr) -\u003E \n        visitExpr f lvalueExpr\n    | FSharpExprPatterns.AddressSet(lvalueExpr, rvalueExpr) -\u003E \n        visitExpr f lvalueExpr; visitExpr f rvalueExpr\n    | FSharpExprPatterns.Application(funcExpr, typeArgs, argExprs) -\u003E \n        visitExpr f funcExpr; visitExprs f argExprs\n    | FSharpExprPatterns.Call(objExprOpt, memberOrFunc, typeArgs1, typeArgs2, argExprs) -\u003E \n        visitObjArg f objExprOpt; visitExprs f argExprs\n    | FSharpExprPatterns.Coerce(targetType, inpExpr) -\u003E \n        visitExpr f inpExpr\n    | FSharpExprPatterns.FastIntegerForLoop(startExpr, limitExpr, consumeExpr, isUp) -\u003E \n        visitExpr f startExpr; visitExpr f limitExpr; visitExpr f consumeExpr\n    | FSharpExprPatterns.ILAsm(asmCode, typeArgs, argExprs) -\u003E \n        visitExprs f argExprs\n    | FSharpExprPatterns.ILFieldGet (objExprOpt, fieldType, fieldName) -\u003E \n        visitObjArg f objExprOpt\n    | FSharpExprPatterns.ILFieldSet (objExprOpt, fieldType, fieldName, valueExpr) -\u003E \n        visitObjArg f objExprOpt\n    | FSharpExprPatterns.IfThenElse (guardExpr, thenExpr, elseExpr) -\u003E \n        visitExpr f guardExpr; visitExpr f thenExpr; visitExpr f elseExpr\n    | FSharpExprPatterns.Lambda(lambdaVar, bodyExpr) -\u003E \n        visitExpr f bodyExpr\n    | FSharpExprPatterns.Let((bindingVar, bindingExpr), bodyExpr) -\u003E \n        visitExpr f bindingExpr; visitExpr f bodyExpr\n    | FSharpExprPatterns.LetRec(recursiveBindings, bodyExpr) -\u003E \n        List.iter (snd \u003E\u003E visitExpr f) recursiveBindings; visitExpr f bodyExpr\n    | FSharpExprPatterns.NewArray(arrayType, argExprs) -\u003E \n        visitExprs f argExprs\n    | FSharpExprPatterns.NewDelegate(delegateType, delegateBodyExpr) -\u003E \n        visitExpr f delegateBodyExpr\n    | FSharpExprPatterns.NewObject(objType, typeArgs, argExprs) -\u003E \n        visitExprs f argExprs\n    | FSharpExprPatterns.NewRecord(recordType, argExprs) -\u003E  \n        visitExprs f argExprs\n    | FSharpExprPatterns.NewAnonRecord(recordType, argExprs) -\u003E  \n        visitExprs f argExprs\n    | FSharpExprPatterns.NewTuple(tupleType, argExprs) -\u003E \n        visitExprs f argExprs\n    | FSharpExprPatterns.NewUnionCase(unionType, unionCase, argExprs) -\u003E \n        visitExprs f argExprs\n    | FSharpExprPatterns.Quote(quotedExpr) -\u003E \n        visitExpr f quotedExpr\n    | FSharpExprPatterns.FSharpFieldGet(objExprOpt, recordOrClassType, fieldInfo) -\u003E \n        visitObjArg f objExprOpt\n    | FSharpExprPatterns.AnonRecordGet(objExpr, recordOrClassType, fieldInfo) -\u003E \n        visitExpr f objExpr\n    | FSharpExprPatterns.FSharpFieldSet(objExprOpt, recordOrClassType, fieldInfo, argExpr) -\u003E \n        visitObjArg f objExprOpt; visitExpr f argExpr\n    | FSharpExprPatterns.Sequential(firstExpr, secondExpr) -\u003E \n        visitExpr f firstExpr; visitExpr f secondExpr\n    | FSharpExprPatterns.TryFinally(bodyExpr, finalizeExpr) -\u003E \n        visitExpr f bodyExpr; visitExpr f finalizeExpr\n    | FSharpExprPatterns.TryWith(bodyExpr, _, _, catchVar, catchExpr) -\u003E \n        visitExpr f bodyExpr; visitExpr f catchExpr\n    | FSharpExprPatterns.TupleGet(tupleType, tupleElemIndex, tupleExpr) -\u003E \n        visitExpr f tupleExpr\n    | FSharpExprPatterns.DecisionTree(decisionExpr, decisionTargets) -\u003E \n        visitExpr f decisionExpr; List.iter (snd \u003E\u003E visitExpr f) decisionTargets\n    | FSharpExprPatterns.DecisionTreeSuccess (decisionTargetIdx, decisionTargetExprs) -\u003E \n        visitExprs f decisionTargetExprs\n    | FSharpExprPatterns.TypeLambda(genericParam, bodyExpr) -\u003E \n        visitExpr f bodyExpr\n    | FSharpExprPatterns.TypeTest(ty, inpExpr) -\u003E \n        visitExpr f inpExpr\n    | FSharpExprPatterns.UnionCaseSet(unionExpr, unionType, unionCase, unionCaseField, valueExpr) -\u003E \n        visitExpr f unionExpr; visitExpr f valueExpr\n    | FSharpExprPatterns.UnionCaseGet(unionExpr, unionType, unionCase, unionCaseField) -\u003E \n        visitExpr f unionExpr\n    | FSharpExprPatterns.UnionCaseTest(unionExpr, unionType, unionCase) -\u003E \n        visitExpr f unionExpr\n    | FSharpExprPatterns.UnionCaseTag(unionExpr, unionType) -\u003E \n        visitExpr f unionExpr\n    | FSharpExprPatterns.ObjectExpr(objType, baseCallExpr, overrides, interfaceImplementations) -\u003E \n        visitExpr f baseCallExpr\n        List.iter (visitObjMember f) overrides\n        List.iter (snd \u003E\u003E List.iter (visitObjMember f)) interfaceImplementations\n    | FSharpExprPatterns.TraitCall(sourceTypes, traitName, typeArgs, typeInstantiation, argTypes, argExprs) -\u003E \n        visitExprs f argExprs\n    | FSharpExprPatterns.ValueSet(valToSet, valueExpr) -\u003E \n        visitExpr f valueExpr\n    | FSharpExprPatterns.WhileLoop(guardExpr, bodyExpr) -\u003E \n        visitExpr f guardExpr; visitExpr f bodyExpr\n    | FSharpExprPatterns.BaseValue baseType -\u003E ()\n    | FSharpExprPatterns.DefaultValue defaultType -\u003E ()\n    | FSharpExprPatterns.ThisValue thisType -\u003E ()\n    | FSharpExprPatterns.Const(constValueObj, constType) -\u003E ()\n    | FSharpExprPatterns.Value(valueToGet) -\u003E ()\n    | _ -\u003E failwith (sprintf \u0022unrecognized %\u002BA\u0022 e)\n\nand visitExprs f exprs = \n    List.iter (visitExpr f) exprs\n\nand visitObjArg f objOpt = \n    Option.iter (visitExpr f) objOpt\n\nand visitObjMember f memb = \n    visitExpr f memb.Body\n\n(**\nLet\u0027s use this expresssion walker:\n\n*)\nfooExpression |\u003E visitExpr (fun e -\u003E printfn \u0022Visiting %A\u0022 e)\n\n// Prints:\n//\n// Visiting Let...\n// Visiting Call...\n// Visiting Const (\u0022Hello\u0022, ...)\n// Visiting Const (\u0022 \u0022, ...)\n// Visiting Const (\u0022world\u0022, ...)\n// Visiting IfThenElse...\n// Visiting Call...\n// Visiting Call...\n// Visiting Value ...\n// Visiting Const ...\n// Visiting Const ...\n// Visiting Const ...\n\n(**\nNote that \n\n* The visitExpr function is recursive (for nested expressions).\n\n* Pattern matching is removed from the tree, into a form called \u0027decision trees\u0027. \n\nSummary\n-------\nIn this tutorial, we looked at basic of working with checked declarations and expressions. \n\nIn practice, it is also useful to combine the information here\nwith some information you can obtain from the [symbols](symbols.html) \ntutorial.\n*)"},{"uri":"https://fsharp.github.io/fsharp-compiler-docs/fcs/untypedtree.html","title":"Tutorial: Expressions","content":"(**\n---\ntitle: Tutorial: Expressions\ncategory: FSharp.Compiler.Service\ncategoryindex: 300\nindex: 300\n---\n*)\n(*** hide ***)\n#I \u0022../../artifacts/bin/FSharp.Compiler.Service/Debug/netstandard2.0\u0022\n(**\nCompiler Services: Processing SyntaxTree\n=================================================\n\nThis tutorial demonstrates how to get the SyntaxTree (AST)\nfor F# code and how to walk over the tree. This can be used for creating tools\nsuch as code formatter, basic refactoring or code navigation tools. The untyped\nsyntax tree contains information about the code structure, but does not contain\ntypes and there are some ambiguities that are resolved only later by the type\nchecker. You can also combine the SyntaxTree information with the API available\nfrom [editor services](editor.html). \n\n\u003E **NOTE:** The FSharp.Compiler.Service API is subject to change when later versions of the nuget package are published\n\n\nGetting the SyntaxTree\n-----------------------\n\nTo access the untyped AST, you need to create an instance of \u0060FSharpChecker\u0060.\nThis type represents a context for type checking and parsing and corresponds either\nto a stand-alone F# script file (e.g. opened in Visual Studio) or to a loaded project\nfile with multiple files. Once you have an instance of \u0060FSharpChecker\u0060, you can\nuse it to perform \u0022untyped parse\u0022 which is the first step of type-checking. The\nsecond phase is \u0022typed parse\u0022 and is used by [editor services](editor.html).\n\nTo use the interactive checker, reference \u0060FSharp.Compiler.Service.dll\u0060 and open the\n\u0060SourceCodeServices\u0060 namespace:\n*)\n#r \u0022FSharp.Compiler.Service.dll\u0022\nopen System\nopen FSharp.Compiler.CodeAnalysis\nopen FSharp.Compiler.Text\n(**\n\n### Performing untyped parse\n\nThe untyped parse operation is very fast (compared to type checking, which can \ntake notable amount of time) and so we can perform it synchronously. First, we\nneed to create \u0060FSharpChecker\u0060 - the constructor takes an argument that\ncan be used to notify the checker about file changes (which we ignore).\n\n*)\n// Create an interactive checker instance \nlet checker = FSharpChecker.Create()\n(**\n\nTo get the AST, we define a function that takes file name and the source code\n(the file is only used for location information and does not have to exist).\nWe first need to get \u0022interactive checker options\u0022 which represents the context.\nFor simple tasks, you can use \u0060GetProjectOptionsFromScriptRoot\u0060 which infers\nthe context for a script file. Then we use the \u0060ParseFile\u0060 method and\nreturn the \u0060ParseTree\u0060 property:\n\n*)\n/// Get untyped tree for a specified input\nlet getUntypedTree (file, input) = \n  // Get compiler options for the \u0027project\u0027 implied by a single script file\n  let projOptions, diagnostics = \n      checker.GetProjectOptionsFromScript(file, input, assumeDotNetFramework=false)\n      |\u003E Async.RunSynchronously\n\n  let parsingOptions, _errors = checker.GetParsingOptionsFromProjectOptions(projOptions)\n\n  // Run the first phase (untyped parsing) of the compiler\n  let parseFileResults = \n      checker.ParseFile(file, input, parsingOptions) \n      |\u003E Async.RunSynchronously\n\n  parseFileResults.ParseTree\n  \n(**\n\nWalking over the AST\n--------------------\n\nThe abstract syntax tree is defined as a number of discriminated unions that represent\ndifferent syntactical elements (such as expressions, patterns, declarations etc.). The best\nway to understand the AST is to look at the definitions in [\u0060ast.fs\u0060 in the source \ncode](https://github.com/fsharp/fsharp/blob/master/src/fsharp/ast.fs#L464).\n\nThe relevant parts are in the following namespace:\n*)\nopen FSharp.Compiler.Syntax\n(**\n\nWhen processing the AST, you will typically write a number of mutually recursive functions\nthat pattern match on the different syntactical elements. There is a number of elements\nthat need to be supported - the top-level element is module or namespace declaration, \ncontaining declarations inside a module (let bindings, types etc.). A let declaration inside\na module then contains expression, which can contain patterns.\n\n### Walking over patterns and expressions\n\nWe start by looking at functions that walk over expressions and patterns - as we walk,\nwe print information about the visited elements. For patterns, the input is of type\n\u0060SynPat\u0060 and has a number of cases including \u0060Wild\u0060 (for \u0060_\u0060 pattern), \u0060Named\u0060 (for\n\u0060\u003Cpat\u003E as name\u0060) and \u0060LongIdent\u0060 (for a \u0060Foo.Bar\u0060 name). Note that the parsed pattern\nis occasionally more complex than what is in the source code (in particular, \u0060Named\u0060 is\nused more often):\n*)\n/// Walk over a pattern - this is for example used in \n/// let \u003Cpat\u003E = \u003Cexpr\u003E or in the \u0027match\u0027 expression\nlet rec visitPattern = function\n  | SynPat.Wild(_) -\u003E \n      printfn \u0022  .. underscore pattern\u0022\n  | SynPat.Named(name, _, _, _) -\u003E\n      printfn \u0022  .. named as \u0027%s\u0027\u0022 name.idText\n  | SynPat.LongIdent(LongIdentWithDots(ident, _), _, _, _, _, _) -\u003E\n      let names = String.concat \u0022.\u0022 [ for i in ident -\u003E i.idText ]\n      printfn \u0022  .. identifier: %s\u0022 names\n  | pat -\u003E printfn \u0022  .. other pattern: %A\u0022 pat\n(**\nThe function is recursive (for nested patterns such as \u0060(foo, _) as bar\u0060), but it does not\ncall any of the functions defined later (because patterns cannot contain other syntactical \nelements).\n\nThe next function iterates over expressions - this is where most of the work would be and\nthere are around 20 cases to cover (type \u0060SynExpr.\u0060 and you\u0027ll get completion with other \noptions). In the following, we only show how to handle \u0060if .. then ..\u0060 and \u0060let .. = ...\u0060:\n*)\n/// Walk over an expression - if expression contains two or three \n/// sub-expressions (two if the \u0027else\u0027 branch is missing), let expression\n/// contains pattern and two sub-expressions\nlet rec visitExpression e = \n  match e with\n  | SynExpr.IfThenElse(ifExpr=cond; thenExpr=trueBranch; elseExpr=falseBranchOpt) -\u003E\n      // Visit all sub-expressions\n      printfn \u0022Conditional:\u0022\n      visitExpression cond\n      visitExpression trueBranch\n      falseBranchOpt |\u003E Option.iter visitExpression \n\n  | SynExpr.LetOrUse(_, _, bindings, body, _) -\u003E\n      // Visit bindings (there may be multiple \n      // for \u0027let .. = .. and .. = .. in ...\u0027\n      printfn \u0022LetOrUse with the following bindings:\u0022\n      for binding in bindings do\n        let (SynBinding(access, kind, isInline, isMutable, attrs, xmlDoc, data, headPat, retInfo, equalsRange, init, m, debugPoint)) = binding\n        visitPattern headPat\n        visitExpression init\n      // Visit the body expression\n      printfn \u0022And the following body:\u0022\n      visitExpression body\n  | expr -\u003E printfn \u0022 - not supported expression: %A\u0022 expr\n(**\nThe \u0060visitExpression\u0060 function will be called from a function that visits all top-level\ndeclarations inside a module. In this tutorial, we ignore types and members, but that would\nbe another source of calls to \u0060visitExpression\u0060.\n\n### Walking over declarations\n\nAs mentioned earlier, the AST of a file contains a number of module or namespace declarations\n(top-level node) that contain declarations inside a module (let bindings or types) or inside\na namespace (just types). The following functions walks over declarations - we ignore types,\nnested modules and all other elements and look only at top-level \u0060let\u0060 bindings (values and \nfunctions):\n*)\n/// Walk over a list of declarations in a module. This is anything\n/// that you can write as a top-level inside module (let bindings,\n/// nested modules, type declarations etc.)\nlet visitDeclarations decls = \n  for declaration in decls do\n    match declaration with\n    | SynModuleDecl.Let(isRec, bindings, range) -\u003E\n        // Let binding as a declaration is similar to let binding\n        // as an expression (in visitExpression), but has no body\n        for binding in bindings do\n          let (SynBinding(access, kind, isInline, isMutable, attrs, xmlDoc, \n                          valData, pat, retInfo, equalsRange, body, m, sp)) = binding\n          visitPattern pat \n          visitExpression body         \n    | _ -\u003E printfn \u0022 - not supported declaration: %A\u0022 declaration\n(**\nThe \u0060visitDeclarations\u0060 function will be called from a function that walks over a \nsequence of module or namespace declarations. This corresponds, for example, to a file \nwith multiple \u0060namespace Foo\u0060 declarations:\n*)\n/// Walk over all module or namespace declarations \n/// (basically \u0027module Foo =\u0027 or \u0027namespace Foo.Bar\u0027)\n/// Note that there is one implicitly, even if the file\n/// does not explicitly define it..\nlet visitModulesAndNamespaces modulesOrNss =\n  for moduleOrNs in modulesOrNss do\n    let (SynModuleOrNamespace(lid, isRec, isMod, decls, xml, attrs, _, m)) = moduleOrNs\n    printfn \u0022Namespace or module: %A\u0022 lid\n    visitDeclarations decls\n(**\nNow that we have functions that walk over the elements of the AST (starting from declaration,\ndown to expressions and patterns), we can get AST of a sample input and run the above function.\n\nPutting things together\n-----------------------\n\nAs already discussed, the \u0060getUntypedTree\u0060 function uses \u0060FSharpChecker\u0060 to run the first\nphase (parsing) on the AST and get back the tree. The function requires F# source code together\nwith location of the file. The location does not have to exist (it is used only for location \ninformation) and it can be in both Unix and Windows formats:\n*)\n// Sample input for the compiler service\nlet input =\n  \u0022\u0022\u0022\n  let foo() = \n    let msg = \u0022Hello world\u0022\n    if true then \n      printfn \u0022%s\u0022 msg\n  \u0022\u0022\u0022\n\n// File name in Unix format\nlet file = \u0022/home/user/Test.fsx\u0022\n\n// Get the AST of sample F# code\nlet tree = getUntypedTree(file, SourceText.ofString input)\n(**\nWhen you run the code in F# interactive, you can enter \u0060tree;;\u0060 in the interactive console and\nsee pretty printed representation of the data structure - the tree contains a lot of information,\nso this is not particularly readable, but it gives you good idea about how the tree looks.\n\nThe returned \u0060tree\u0060 value is again a discriminated union that can be two different cases - one case\nis \u0060ParsedInput.SigFile\u0060 which represents F# signature file (\u0060*.fsi\u0060) and the other one is \n\u0060ParsedInput.ImplFile\u0060 representing regular source code (\u0060*.fsx\u0060 or \u0060*.fs\u0060). The implementation\nfile contains a sequence of modules or namespaces that we can pass to the function implemented\nin the previous step:\n*)\n// Extract implementation file details\nmatch tree with\n| ParsedInput.ImplFile(implFile) -\u003E\n    // Extract declarations and walk over them\n    let (ParsedImplFileInput(fn, script, name, _, _, modules, _)) = implFile\n    visitModulesAndNamespaces modules\n| _ -\u003E failwith \u0022F# Interface file (*.fsi) not supported.\u0022\n(**\nSummary\n-------\nIn this tutorial, we looked at basic of working with the untyped abstract syntax tree. This is a \ncomprehensive topic, so it is not possible to explain everything in a single article. The \n[Fantomas project](https://github.com/dungpa/fantomas) is a good example of tool based on the untyped\nAST that can help you understand more. In practice, it is also useful to combine the information here\nwith some information you can obtain from the [editor services](editor.html) discussed in the next \ntutorial.\n*)"}]